# Generated from grammar/Dart2Parser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,128,2214,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,1,0,1,0,1,0,1,0,
        5,0,419,8,0,10,0,12,0,422,9,0,1,0,1,0,1,0,1,0,4,0,428,8,0,11,0,12,
        0,429,3,0,432,8,0,1,1,1,1,1,2,1,2,1,2,5,2,439,8,2,10,2,12,2,442,
        9,2,1,2,1,2,1,2,5,2,447,8,2,10,2,12,2,450,9,2,3,2,452,8,2,1,3,3,
        3,455,8,3,1,3,1,3,1,4,1,4,1,4,3,4,462,8,4,3,4,464,8,4,1,4,1,4,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,475,8,6,1,6,3,6,478,8,6,1,6,1,6,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,491,8,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,3,9,501,8,9,1,10,5,10,504,8,10,10,10,12,10,507,9,10,
        1,10,1,10,1,11,1,11,3,11,513,8,11,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,3,13,524,8,13,1,14,1,14,1,14,5,14,529,8,14,10,14,
        12,14,532,9,14,1,14,1,14,1,14,4,14,537,8,14,11,14,12,14,538,3,14,
        541,8,14,1,15,1,15,1,16,1,16,1,16,5,16,548,8,16,10,16,12,16,551,
        9,16,1,16,1,16,1,16,4,16,556,8,16,11,16,12,16,557,3,16,560,8,16,
        1,17,1,17,1,17,5,17,565,8,17,10,17,12,17,568,9,17,1,17,1,17,1,17,
        4,17,573,8,17,11,17,12,17,574,3,17,577,8,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,20,1,20,3,20,587,8,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,5,21,599,8,21,10,21,12,21,602,9,21,1,22,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,5,24,612,8,24,10,24,12,24,615,9,24,
        1,24,1,24,1,24,3,24,620,8,24,3,24,622,8,24,1,25,1,25,1,25,1,25,1,
        25,3,25,629,8,25,1,26,1,26,1,26,1,26,1,26,3,26,636,8,26,1,26,1,26,
        1,27,3,27,641,8,27,1,27,1,27,1,27,3,27,646,8,27,1,27,3,27,649,8,
        27,1,27,3,27,652,8,27,1,27,1,27,1,27,1,27,5,27,658,8,27,10,27,12,
        27,661,9,27,1,27,1,27,1,27,3,27,666,8,27,1,27,1,27,3,27,670,8,27,
        1,28,1,28,1,28,1,28,1,28,1,28,3,28,678,8,28,1,29,1,29,1,29,1,29,
        3,29,684,8,29,1,30,1,30,1,30,1,30,3,30,690,8,30,1,30,1,30,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,3,31,712,8,31,1,32,1,32,1,32,1,32,1,32,1,32,3,
        32,720,8,32,1,33,1,33,5,33,724,8,33,10,33,12,33,727,9,33,1,34,1,
        34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
        37,1,37,1,37,1,37,1,37,1,37,3,37,749,8,37,3,37,751,8,37,1,38,1,38,
        1,38,1,38,1,38,1,38,1,39,1,39,1,39,3,39,762,8,39,1,40,1,40,1,40,
        1,41,1,41,3,41,769,8,41,1,41,1,41,1,42,3,42,774,8,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,3,42,784,8,42,3,42,786,8,42,1,42,1,42,
        1,42,3,42,791,8,42,3,42,793,8,42,1,42,1,42,1,42,3,42,798,8,42,3,
        42,800,8,42,1,42,1,42,3,42,804,8,42,1,42,1,42,1,42,1,42,3,42,810,
        8,42,1,42,1,42,1,42,1,42,3,42,816,8,42,1,42,1,42,1,42,1,42,1,42,
        3,42,823,8,42,1,42,1,42,1,42,3,42,828,8,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,3,42,837,8,42,1,42,1,42,1,42,3,42,842,8,42,1,42,1,42,
        1,42,1,42,3,42,848,8,42,1,42,1,42,3,42,852,8,42,1,42,1,42,3,42,856,
        8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,865,8,42,1,42,1,42,
        1,42,3,42,870,8,42,3,42,872,8,42,1,43,3,43,875,8,43,1,43,1,43,1,
        43,1,44,5,44,881,8,44,10,44,12,44,884,9,44,1,44,1,44,1,44,1,44,1,
        45,1,45,1,45,3,45,893,8,45,1,46,1,46,3,46,897,8,46,1,46,1,46,1,46,
        3,46,902,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,
        1,48,5,48,915,8,48,10,48,12,48,918,9,48,1,49,1,49,1,49,1,49,1,49,
        3,49,925,8,49,1,50,1,50,1,50,5,50,930,8,50,10,50,12,50,933,9,50,
        1,50,3,50,936,8,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,
        5,52,947,8,52,10,52,12,52,950,9,52,1,52,3,52,953,8,52,1,52,1,52,
        1,53,1,53,1,53,1,53,3,53,961,8,53,1,53,1,53,1,53,1,53,3,53,967,8,
        53,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,978,8,55,1,
        56,1,56,1,57,1,57,1,57,5,57,985,8,57,10,57,12,57,988,9,57,1,58,3,
        58,991,8,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1001,8,
        59,1,60,1,60,3,60,1005,8,60,1,60,3,60,1008,8,60,1,60,1,60,1,60,1,
        60,1,60,1,60,5,60,1016,8,60,10,60,12,60,1019,9,60,1,60,1,60,1,61,
        3,61,1024,8,61,1,61,1,61,1,61,1,61,1,62,3,62,1031,8,62,1,62,1,62,
        1,62,1,62,1,62,3,62,1038,8,62,3,62,1040,8,62,1,63,1,63,3,63,1044,
        8,63,1,63,1,63,1,63,1,63,1,64,3,64,1051,8,64,1,64,1,64,3,64,1055,
        8,64,1,64,1,64,3,64,1059,8,64,1,64,3,64,1062,8,64,1,64,3,64,1065,
        8,64,1,65,1,65,1,65,1,66,3,66,1071,8,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,67,1,67,3,67,1081,8,67,1,67,3,67,1084,8,67,1,68,1,68,3,68,
        1088,8,68,1,68,1,68,3,68,1092,8,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,3,68,1103,8,68,1,69,1,69,1,69,1,69,1,69,3,69,1110,
        8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        3,69,1124,8,69,1,70,3,70,1127,8,70,1,70,1,70,1,71,3,71,1132,8,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,3,72,1142,8,72,1,72,1,72,
        3,72,1146,8,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1154,8,72,1,72,
        1,72,3,72,1158,8,72,1,72,3,72,1161,8,72,1,73,1,73,1,73,1,74,3,74,
        1167,8,74,1,74,1,74,1,74,1,74,3,74,1173,8,74,1,74,1,74,3,74,1177,
        8,74,1,74,3,74,1180,8,74,1,75,3,75,1183,8,75,1,75,3,75,1186,8,75,
        1,75,1,75,1,75,3,75,1191,8,75,1,76,3,76,1194,8,76,1,76,1,76,1,77,
        3,77,1199,8,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,1208,8,78,
        1,79,1,79,1,79,1,79,1,80,1,80,3,80,1216,8,80,1,80,1,80,1,81,1,81,
        3,81,1222,8,81,1,81,1,81,1,81,3,81,1227,8,81,1,82,3,82,1230,8,82,
        1,82,1,82,1,82,1,83,1,83,1,84,1,84,1,84,5,84,1240,8,84,10,84,12,
        84,1243,9,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1252,8,85,1,
        86,1,86,1,86,5,86,1257,8,86,10,86,12,86,1260,9,86,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,3,87,1269,8,87,1,88,1,88,3,88,1273,8,88,1,89,
        1,89,1,89,3,89,1278,8,89,1,89,1,89,3,89,1282,8,89,1,89,5,89,1285,
        8,89,10,89,12,89,1288,9,89,1,89,1,89,1,90,1,90,1,91,1,91,1,91,3,
        91,1297,8,91,1,92,1,92,1,92,5,92,1302,8,92,10,92,12,92,1305,9,92,
        1,93,1,93,1,93,3,93,1310,8,93,1,93,1,93,5,93,1314,8,93,10,93,12,
        93,1317,9,93,1,94,1,94,3,94,1321,8,94,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,3,95,1332,8,95,1,96,1,96,1,96,1,96,5,96,1338,8,
        96,10,96,12,96,1341,9,96,1,97,1,97,1,97,1,98,1,98,3,98,1348,8,98,
        1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,101,3,101,1359,8,
        101,1,101,5,101,1362,8,101,10,101,12,101,1365,9,101,1,101,5,101,
        1368,8,101,10,101,12,101,1371,9,101,1,101,1,101,1,101,5,101,1376,
        8,101,10,101,12,101,1379,9,101,1,102,1,102,1,102,1,102,5,102,1385,
        8,102,10,102,12,102,1388,9,102,1,102,1,102,1,103,1,103,1,103,1,104,
        1,104,1,104,1,104,1,104,1,105,3,105,1401,8,105,1,105,3,105,1404,
        8,105,1,105,1,105,3,105,1408,8,105,1,105,1,105,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,3,106,1419,8,106,1,107,1,107,1,107,1,107,
        1,108,1,108,1,108,1,108,1,109,1,109,1,109,5,109,1432,8,109,10,109,
        12,109,1435,9,109,1,110,1,110,1,110,5,110,1440,8,110,10,110,12,110,
        1443,9,110,1,111,1,111,1,111,1,111,1,112,1,112,5,112,1451,8,112,
        10,112,12,112,1454,9,112,1,113,1,113,1,113,1,113,1,113,3,113,1461,
        8,113,1,114,1,114,3,114,1465,8,114,1,114,1,114,3,114,1469,8,114,
        1,114,1,114,3,114,1473,8,114,1,114,1,114,3,114,1477,8,114,1,114,
        1,114,3,114,1481,8,114,1,115,1,115,1,116,1,116,1,116,3,116,1488,
        8,116,1,117,1,117,3,117,1492,8,117,1,117,1,117,1,117,1,117,1,118,
        1,118,1,118,3,118,1501,8,118,1,118,1,118,3,118,1505,8,118,1,118,
        3,118,1508,8,118,1,118,1,118,1,118,1,118,5,118,1514,8,118,10,118,
        12,118,1517,9,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,121,
        1,121,1,121,1,121,5,121,1530,8,121,10,121,12,121,1533,9,121,1,121,
        1,121,1,121,1,121,4,121,1539,8,121,11,121,12,121,1540,3,121,1543,
        8,121,1,122,1,122,1,123,1,123,1,123,1,124,1,124,1,124,1,124,5,124,
        1554,8,124,10,124,12,124,1557,9,124,1,124,3,124,1560,8,124,1,124,
        1,124,1,125,1,125,3,125,1566,8,125,1,125,1,125,1,126,1,126,1,126,
        1,126,5,126,1574,8,126,10,126,12,126,1577,9,126,1,126,3,126,1580,
        8,126,1,126,1,126,1,127,1,127,1,128,1,128,1,128,1,128,1,129,1,129,
        1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,1,129,3,129,1607,8,129,1,130,1,130,1,130,1,131,
        1,131,1,131,3,131,1615,8,131,1,132,1,132,1,132,5,132,1620,8,132,
        10,132,12,132,1623,9,132,1,133,1,133,1,133,1,133,1,133,1,133,3,133,
        1631,8,133,1,134,1,134,1,134,5,134,1636,8,134,10,134,12,134,1639,
        9,134,1,135,1,135,1,136,1,136,1,137,1,137,1,137,1,137,1,137,1,137,
        3,137,1651,8,137,1,137,1,137,3,137,1655,8,137,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,3,138,1664,8,138,1,139,3,139,1667,8,139,
        1,139,1,139,1,139,1,139,1,140,1,140,3,140,1675,8,140,1,141,1,141,
        3,141,1679,8,141,1,142,1,142,1,142,1,142,5,142,1685,8,142,10,142,
        12,142,1688,9,142,1,142,3,142,1691,8,142,1,142,1,142,1,143,1,143,
        1,143,3,143,1698,8,143,1,143,1,143,1,144,1,144,1,144,1,144,1,144,
        1,144,1,144,1,144,1,144,1,144,1,144,3,144,1713,8,144,1,144,1,144,
        1,144,1,144,1,144,1,144,3,144,1721,8,144,1,145,1,145,1,145,1,145,
        5,145,1727,8,145,10,145,12,145,1730,9,145,1,146,1,146,1,146,1,146,
        1,146,1,147,1,147,1,147,1,147,1,147,3,147,1742,8,147,1,147,1,147,
        1,148,1,148,1,148,1,148,1,148,5,148,1751,8,148,10,148,12,148,1754,
        9,148,3,148,1756,8,148,1,149,1,149,1,150,1,150,1,150,3,150,1763,
        8,150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
        1,151,1,151,1,151,1,151,1,151,3,151,1780,8,151,1,152,1,152,1,152,
        1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,1792,8,152,1,153,
        3,153,1795,8,153,1,153,1,153,1,153,1,153,1,153,1,153,1,154,1,154,
        1,154,1,154,3,154,1807,8,154,1,154,1,154,1,155,1,155,1,155,1,155,
        1,155,1,155,3,155,1817,8,155,1,155,1,155,1,155,1,155,3,155,1823,
        8,155,1,156,1,156,1,156,1,156,1,156,3,156,1830,8,156,1,157,1,157,
        1,158,1,158,1,158,1,159,1,159,3,159,1839,8,159,1,159,1,159,1,160,
        1,160,1,160,3,160,1846,8,160,1,161,3,161,1849,8,161,1,161,3,161,
        1852,8,161,1,161,1,161,3,161,1856,8,161,1,161,1,161,1,162,3,162,
        1861,8,162,1,162,1,162,1,162,1,162,1,163,1,163,1,163,1,163,5,163,
        1871,8,163,10,163,12,163,1874,9,163,1,163,1,163,1,163,1,163,4,163,
        1880,8,163,11,163,12,163,1881,3,163,1884,8,163,1,164,1,164,1,164,
        1,164,1,164,1,164,3,164,1892,8,164,1,165,1,165,3,165,1896,8,165,
        1,165,3,165,1899,8,165,1,166,1,166,1,167,1,167,1,167,1,168,5,168,
        1907,8,168,10,168,12,168,1910,9,168,1,168,1,168,1,169,5,169,1915,
        8,169,10,169,12,169,1918,9,169,1,170,1,170,1,170,1,170,1,171,1,171,
        1,171,5,171,1927,8,171,10,171,12,171,1930,9,171,1,172,1,172,4,172,
        1934,8,172,11,172,12,172,1935,1,173,1,173,1,173,3,173,1941,8,173,
        1,173,3,173,1944,8,173,1,174,5,174,1947,8,174,10,174,12,174,1950,
        9,174,1,174,1,174,1,174,1,174,1,174,1,175,1,175,1,175,1,175,1,175,
        1,175,5,175,1963,8,175,10,175,12,175,1966,9,175,1,175,3,175,1969,
        8,175,1,175,1,175,1,176,1,176,1,176,1,176,5,176,1977,8,176,10,176,
        12,176,1980,9,176,1,176,1,176,3,176,1984,8,176,1,177,1,177,1,178,
        1,178,1,178,1,179,1,179,1,179,1,180,1,180,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,3,181,2024,8,181,1,181,1,181,1,181,1,181,1,181,1,181,
        3,181,2032,8,181,1,181,1,181,1,181,1,181,3,181,2038,8,181,1,181,
        1,181,1,181,1,181,3,181,2044,8,181,1,182,1,182,1,182,4,182,2049,
        8,182,11,182,12,182,2050,1,182,3,182,2054,8,182,1,182,3,182,2057,
        8,182,1,183,1,183,3,183,2061,8,183,1,183,3,183,2064,8,183,1,184,
        1,184,1,184,3,184,2069,8,184,1,184,1,184,1,184,1,184,1,184,1,184,
        3,184,2077,8,184,1,185,1,185,1,185,1,185,1,186,1,186,1,186,1,187,
        1,187,1,187,1,188,1,188,1,189,1,189,1,189,5,189,2094,8,189,10,189,
        12,189,2097,9,189,1,190,1,190,1,190,3,190,2102,8,190,1,191,1,191,
        3,191,2106,8,191,1,192,1,192,3,192,2110,8,192,1,192,3,192,2113,8,
        192,1,193,1,193,1,193,5,193,2118,8,193,10,193,12,193,2121,9,193,
        1,194,1,194,3,194,2125,8,194,1,194,3,194,2128,8,194,1,194,1,194,
        3,194,2132,8,194,3,194,2134,8,194,1,195,1,195,1,195,5,195,2139,8,
        195,10,195,12,195,2142,9,195,1,196,1,196,1,196,1,196,3,196,2148,
        8,196,1,197,1,197,1,197,1,197,5,197,2154,8,197,10,197,12,197,2157,
        9,197,1,197,1,197,1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,3,199,2171,8,199,1,199,1,199,1,199,1,199,1,199,3,199,
        2178,8,199,1,200,1,200,1,200,1,200,1,200,1,200,3,200,2186,8,200,
        1,201,1,201,1,202,1,202,1,202,3,202,2193,8,202,1,203,1,203,3,203,
        2197,8,203,1,204,1,204,1,204,1,204,1,204,1,204,1,205,1,205,1,205,
        1,205,1,205,1,206,1,206,1,206,1,206,1,206,0,1,42,207,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,412,0,14,2,0,25,
        25,35,35,3,0,1,1,8,8,32,32,2,0,77,77,113,113,2,0,13,13,43,43,2,0,
        10,10,18,18,2,0,16,16,27,27,19,0,54,55,57,58,65,65,67,67,69,69,72,
        72,74,76,81,82,84,84,86,87,89,89,91,91,93,95,98,102,105,107,110,
        110,115,115,120,120,125,125,2,0,26,26,37,37,3,0,33,33,48,49,52,52,
        1,0,121,122,15,0,56,56,59,64,66,66,68,68,70,71,73,73,77,80,85,85,
        88,88,90,90,96,97,103,104,108,109,111,114,116,119,1,0,14,15,2,0,
        63,63,78,78,10,0,57,58,69,69,81,81,84,84,95,95,98,99,106,106,110,
        110,120,120,125,125,2377,0,431,1,0,0,0,2,433,1,0,0,0,4,451,1,0,0,
        0,6,454,1,0,0,0,8,458,1,0,0,0,10,467,1,0,0,0,12,469,1,0,0,0,14,481,
        1,0,0,0,16,490,1,0,0,0,18,500,1,0,0,0,20,505,1,0,0,0,22,512,1,0,
        0,0,24,514,1,0,0,0,26,523,1,0,0,0,28,540,1,0,0,0,30,542,1,0,0,0,
        32,559,1,0,0,0,34,576,1,0,0,0,36,578,1,0,0,0,38,582,1,0,0,0,40,584,
        1,0,0,0,42,590,1,0,0,0,44,603,1,0,0,0,46,606,1,0,0,0,48,621,1,0,
        0,0,50,628,1,0,0,0,52,630,1,0,0,0,54,669,1,0,0,0,56,677,1,0,0,0,
        58,683,1,0,0,0,60,689,1,0,0,0,62,711,1,0,0,0,64,713,1,0,0,0,66,721,
        1,0,0,0,68,728,1,0,0,0,70,734,1,0,0,0,72,738,1,0,0,0,74,750,1,0,
        0,0,76,752,1,0,0,0,78,758,1,0,0,0,80,763,1,0,0,0,82,766,1,0,0,0,
        84,773,1,0,0,0,86,874,1,0,0,0,88,882,1,0,0,0,90,889,1,0,0,0,92,894,
        1,0,0,0,94,903,1,0,0,0,96,911,1,0,0,0,98,924,1,0,0,0,100,926,1,0,
        0,0,102,937,1,0,0,0,104,940,1,0,0,0,106,966,1,0,0,0,108,968,1,0,
        0,0,110,977,1,0,0,0,112,979,1,0,0,0,114,981,1,0,0,0,116,990,1,0,
        0,0,118,1000,1,0,0,0,120,1002,1,0,0,0,122,1023,1,0,0,0,124,1030,
        1,0,0,0,126,1043,1,0,0,0,128,1064,1,0,0,0,130,1066,1,0,0,0,132,1070,
        1,0,0,0,134,1083,1,0,0,0,136,1102,1,0,0,0,138,1123,1,0,0,0,140,1126,
        1,0,0,0,142,1131,1,0,0,0,144,1160,1,0,0,0,146,1162,1,0,0,0,148,1179,
        1,0,0,0,150,1182,1,0,0,0,152,1193,1,0,0,0,154,1198,1,0,0,0,156,1207,
        1,0,0,0,158,1209,1,0,0,0,160,1213,1,0,0,0,162,1226,1,0,0,0,164,1229,
        1,0,0,0,166,1234,1,0,0,0,168,1236,1,0,0,0,170,1244,1,0,0,0,172,1253,
        1,0,0,0,174,1261,1,0,0,0,176,1272,1,0,0,0,178,1274,1,0,0,0,180,1291,
        1,0,0,0,182,1293,1,0,0,0,184,1298,1,0,0,0,186,1306,1,0,0,0,188,1320,
        1,0,0,0,190,1331,1,0,0,0,192,1333,1,0,0,0,194,1342,1,0,0,0,196,1345,
        1,0,0,0,198,1349,1,0,0,0,200,1352,1,0,0,0,202,1358,1,0,0,0,204,1380,
        1,0,0,0,206,1391,1,0,0,0,208,1394,1,0,0,0,210,1400,1,0,0,0,212,1418,
        1,0,0,0,214,1420,1,0,0,0,216,1424,1,0,0,0,218,1428,1,0,0,0,220,1436,
        1,0,0,0,222,1444,1,0,0,0,224,1452,1,0,0,0,226,1460,1,0,0,0,228,1480,
        1,0,0,0,230,1482,1,0,0,0,232,1484,1,0,0,0,234,1489,1,0,0,0,236,1497,
        1,0,0,0,238,1520,1,0,0,0,240,1523,1,0,0,0,242,1542,1,0,0,0,244,1544,
        1,0,0,0,246,1546,1,0,0,0,248,1549,1,0,0,0,250,1563,1,0,0,0,252,1569,
        1,0,0,0,254,1583,1,0,0,0,256,1585,1,0,0,0,258,1606,1,0,0,0,260,1608,
        1,0,0,0,262,1614,1,0,0,0,264,1616,1,0,0,0,266,1630,1,0,0,0,268,1632,
        1,0,0,0,270,1640,1,0,0,0,272,1642,1,0,0,0,274,1654,1,0,0,0,276,1663,
        1,0,0,0,278,1666,1,0,0,0,280,1674,1,0,0,0,282,1678,1,0,0,0,284,1680,
        1,0,0,0,286,1694,1,0,0,0,288,1720,1,0,0,0,290,1722,1,0,0,0,292,1731,
        1,0,0,0,294,1736,1,0,0,0,296,1755,1,0,0,0,298,1757,1,0,0,0,300,1762,
        1,0,0,0,302,1779,1,0,0,0,304,1791,1,0,0,0,306,1794,1,0,0,0,308,1802,
        1,0,0,0,310,1822,1,0,0,0,312,1829,1,0,0,0,314,1831,1,0,0,0,316,1833,
        1,0,0,0,318,1836,1,0,0,0,320,1845,1,0,0,0,322,1848,1,0,0,0,324,1860,
        1,0,0,0,326,1883,1,0,0,0,328,1891,1,0,0,0,330,1898,1,0,0,0,332,1900,
        1,0,0,0,334,1902,1,0,0,0,336,1908,1,0,0,0,338,1916,1,0,0,0,340,1919,
        1,0,0,0,342,1923,1,0,0,0,344,1933,1,0,0,0,346,1943,1,0,0,0,348,1948,
        1,0,0,0,350,1956,1,0,0,0,352,1972,1,0,0,0,354,1985,1,0,0,0,356,1987,
        1,0,0,0,358,1990,1,0,0,0,360,1993,1,0,0,0,362,2043,1,0,0,0,364,2045,
        1,0,0,0,366,2063,1,0,0,0,368,2076,1,0,0,0,370,2078,1,0,0,0,372,2082,
        1,0,0,0,374,2085,1,0,0,0,376,2088,1,0,0,0,378,2090,1,0,0,0,380,2098,
        1,0,0,0,382,2105,1,0,0,0,384,2112,1,0,0,0,386,2114,1,0,0,0,388,2133,
        1,0,0,0,390,2135,1,0,0,0,392,2143,1,0,0,0,394,2149,1,0,0,0,396,2160,
        1,0,0,0,398,2177,1,0,0,0,400,2185,1,0,0,0,402,2187,1,0,0,0,404,2189,
        1,0,0,0,406,2196,1,0,0,0,408,2198,1,0,0,0,410,2204,1,0,0,0,412,2209,
        1,0,0,0,414,420,3,242,121,0,415,416,3,2,1,0,416,417,3,242,121,0,
        417,419,1,0,0,0,418,415,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,
        420,421,1,0,0,0,421,432,1,0,0,0,422,420,1,0,0,0,423,427,5,108,0,
        0,424,425,3,2,1,0,425,426,3,242,121,0,426,428,1,0,0,0,427,424,1,
        0,0,0,428,429,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,432,1,
        0,0,0,431,414,1,0,0,0,431,423,1,0,0,0,432,1,1,0,0,0,433,434,7,0,
        0,0,434,3,1,0,0,0,435,440,3,246,123,0,436,437,5,5,0,0,437,439,3,
        246,123,0,438,436,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,
        1,0,0,0,441,452,1,0,0,0,442,440,1,0,0,0,443,448,3,114,57,0,444,445,
        5,5,0,0,445,447,3,246,123,0,446,444,1,0,0,0,447,450,1,0,0,0,448,
        446,1,0,0,0,448,449,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,451,
        435,1,0,0,0,451,443,1,0,0,0,452,5,1,0,0,0,453,455,3,370,185,0,454,
        453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,3,8,4,0,457,
        7,1,0,0,0,458,463,5,31,0,0,459,461,3,4,2,0,460,462,5,5,0,0,461,460,
        1,0,0,0,461,462,1,0,0,0,462,464,1,0,0,0,463,459,1,0,0,0,463,464,
        1,0,0,0,464,465,1,0,0,0,465,466,5,11,0,0,466,9,1,0,0,0,467,468,5,
        55,0,0,468,11,1,0,0,0,469,470,5,56,0,0,470,471,5,31,0,0,471,474,
        3,110,55,0,472,473,5,5,0,0,473,475,3,110,55,0,474,472,1,0,0,0,474,
        475,1,0,0,0,475,477,1,0,0,0,476,478,5,5,0,0,477,476,1,0,0,0,477,
        478,1,0,0,0,478,479,1,0,0,0,479,480,5,11,0,0,480,13,1,0,0,0,481,
        482,3,12,6,0,482,483,5,46,0,0,483,15,1,0,0,0,484,485,3,302,151,0,
        485,486,3,20,10,0,486,491,1,0,0,0,487,488,5,108,0,0,488,491,3,400,
        200,0,489,491,3,166,83,0,490,484,1,0,0,0,490,487,1,0,0,0,490,489,
        1,0,0,0,491,17,1,0,0,0,492,501,3,400,200,0,493,494,5,42,0,0,494,
        501,3,166,83,0,495,496,5,41,0,0,496,497,5,29,0,0,497,498,3,110,55,
        0,498,499,5,6,0,0,499,501,1,0,0,0,500,492,1,0,0,0,500,493,1,0,0,
        0,500,495,1,0,0,0,501,19,1,0,0,0,502,504,3,320,160,0,503,502,1,0,
        0,0,504,507,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,
        0,0,507,505,1,0,0,0,508,509,3,18,9,0,509,21,1,0,0,0,510,513,5,18,
        0,0,511,513,3,62,31,0,512,510,1,0,0,0,512,511,1,0,0,0,513,23,1,0,
        0,0,514,515,5,58,0,0,515,516,3,398,199,0,516,25,1,0,0,0,517,524,
        3,244,122,0,518,524,3,2,1,0,519,524,3,328,164,0,520,524,3,312,156,
        0,521,524,5,16,0,0,522,524,3,30,15,0,523,517,1,0,0,0,523,518,1,0,
        0,0,523,519,1,0,0,0,523,520,1,0,0,0,523,521,1,0,0,0,523,522,1,0,
        0,0,524,27,1,0,0,0,525,530,3,326,163,0,526,527,5,1,0,0,527,529,3,
        326,163,0,528,526,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,
        1,0,0,0,531,541,1,0,0,0,532,530,1,0,0,0,533,536,5,108,0,0,534,535,
        5,1,0,0,535,537,3,326,163,0,536,534,1,0,0,0,537,538,1,0,0,0,538,
        536,1,0,0,0,538,539,1,0,0,0,539,541,1,0,0,0,540,525,1,0,0,0,540,
        533,1,0,0,0,541,29,1,0,0,0,542,543,7,1,0,0,543,31,1,0,0,0,544,549,
        3,34,17,0,545,546,5,32,0,0,546,548,3,34,17,0,547,545,1,0,0,0,548,
        551,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,560,1,0,0,0,551,
        549,1,0,0,0,552,555,5,108,0,0,553,554,5,32,0,0,554,556,3,34,17,0,
        555,553,1,0,0,0,556,557,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,
        558,560,1,0,0,0,559,544,1,0,0,0,559,552,1,0,0,0,560,33,1,0,0,0,561,
        566,3,28,14,0,562,563,5,8,0,0,563,565,3,28,14,0,564,562,1,0,0,0,
        565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,577,1,0,0,0,
        568,566,1,0,0,0,569,572,5,108,0,0,570,571,5,8,0,0,571,573,3,28,14,
        0,572,570,1,0,0,0,573,574,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,
        0,575,577,1,0,0,0,576,561,1,0,0,0,576,569,1,0,0,0,577,35,1,0,0,0,
        578,579,5,30,0,0,579,580,3,338,169,0,580,581,5,7,0,0,581,37,1,0,
        0,0,582,583,7,2,0,0,583,39,1,0,0,0,584,586,5,59,0,0,585,587,3,166,
        83,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,589,5,46,
        0,0,589,41,1,0,0,0,590,591,6,21,-1,0,591,592,3,64,32,0,592,593,7,
        3,0,0,593,594,3,46,23,0,594,600,1,0,0,0,595,596,10,2,0,0,596,597,
        5,13,0,0,597,599,3,46,23,0,598,595,1,0,0,0,599,602,1,0,0,0,600,598,
        1,0,0,0,600,601,1,0,0,0,601,43,1,0,0,0,602,600,1,0,0,0,603,604,3,
        22,11,0,604,605,3,118,59,0,605,45,1,0,0,0,606,607,3,50,25,0,607,
        608,3,48,24,0,608,47,1,0,0,0,609,622,3,44,22,0,610,612,3,320,160,
        0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,
        0,614,619,1,0,0,0,615,613,1,0,0,0,616,617,3,18,9,0,617,618,3,44,
        22,0,618,620,1,0,0,0,619,616,1,0,0,0,619,620,1,0,0,0,620,622,1,0,
        0,0,621,609,1,0,0,0,621,613,1,0,0,0,622,49,1,0,0,0,623,624,5,29,
        0,0,624,625,3,110,55,0,625,626,5,6,0,0,626,629,1,0,0,0,627,629,3,
        166,83,0,628,623,1,0,0,0,628,627,1,0,0,0,629,51,1,0,0,0,630,631,
        5,61,0,0,631,632,5,31,0,0,632,635,3,166,83,0,633,634,5,5,0,0,634,
        636,3,166,83,0,635,633,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,
        638,5,11,0,0,638,53,1,0,0,0,639,641,5,54,0,0,640,639,1,0,0,0,640,
        641,1,0,0,0,641,642,1,0,0,0,642,643,5,62,0,0,643,645,3,376,188,0,
        644,646,3,394,197,0,645,644,1,0,0,0,645,646,1,0,0,0,646,648,1,0,
        0,0,647,649,3,346,173,0,648,647,1,0,0,0,648,649,1,0,0,0,649,651,
        1,0,0,0,650,652,3,194,97,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,
        1,0,0,0,653,659,5,30,0,0,654,655,3,224,112,0,655,656,3,56,28,0,656,
        658,1,0,0,0,657,654,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,
        660,1,0,0,0,660,662,1,0,0,0,661,659,1,0,0,0,662,663,5,7,0,0,663,
        670,1,0,0,0,664,666,5,54,0,0,665,664,1,0,0,0,665,666,1,0,0,0,666,
        667,1,0,0,0,667,668,5,62,0,0,668,670,3,234,117,0,669,640,1,0,0,0,
        669,665,1,0,0,0,670,55,1,0,0,0,671,672,3,84,42,0,672,673,5,46,0,
        0,673,678,1,0,0,0,674,675,3,228,114,0,675,676,3,144,72,0,676,678,
        1,0,0,0,677,671,1,0,0,0,677,674,1,0,0,0,678,57,1,0,0,0,679,680,5,
        106,0,0,680,684,3,168,84,0,681,682,5,84,0,0,682,684,3,168,84,0,683,
        679,1,0,0,0,683,681,1,0,0,0,684,59,1,0,0,0,685,690,3,202,101,0,686,
        690,3,290,145,0,687,690,3,110,55,0,688,690,3,336,168,0,689,685,1,
        0,0,0,689,686,1,0,0,0,689,687,1,0,0,0,689,688,1,0,0,0,690,691,1,
        0,0,0,691,692,5,0,0,1,692,61,1,0,0,0,693,712,5,53,0,0,694,712,5,
        47,0,0,695,712,5,50,0,0,696,712,5,34,0,0,697,712,5,36,0,0,698,712,
        5,24,0,0,699,712,5,23,0,0,700,701,5,19,0,0,701,702,5,19,0,0,702,
        703,5,19,0,0,703,712,5,18,0,0,704,705,5,19,0,0,705,706,5,19,0,0,
        706,712,5,18,0,0,707,712,5,3,0,0,708,712,5,9,0,0,709,712,5,39,0,
        0,710,712,5,45,0,0,711,693,1,0,0,0,711,694,1,0,0,0,711,695,1,0,0,
        0,711,696,1,0,0,0,711,697,1,0,0,0,711,698,1,0,0,0,711,699,1,0,0,
        0,711,700,1,0,0,0,711,704,1,0,0,0,711,707,1,0,0,0,711,708,1,0,0,
        0,711,709,1,0,0,0,711,710,1,0,0,0,712,63,1,0,0,0,713,719,3,172,86,
        0,714,715,5,41,0,0,715,716,3,118,59,0,716,717,5,10,0,0,717,718,3,
        118,59,0,718,720,1,0,0,0,719,714,1,0,0,0,719,720,1,0,0,0,720,65,
        1,0,0,0,721,725,3,402,201,0,722,724,3,68,34,0,723,722,1,0,0,0,724,
        727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,67,1,0,0,0,727,725,
        1,0,0,0,728,729,5,85,0,0,729,730,5,31,0,0,730,731,3,404,202,0,731,
        732,5,11,0,0,732,733,3,402,201,0,733,69,1,0,0,0,734,735,5,63,0,0,
        735,736,3,78,39,0,736,737,3,138,69,0,737,71,1,0,0,0,738,739,5,63,
        0,0,739,740,3,74,37,0,740,741,3,8,4,0,741,73,1,0,0,0,742,751,3,376,
        188,0,743,751,3,304,152,0,744,745,3,380,190,0,745,748,3,370,185,
        0,746,747,5,12,0,0,747,749,3,166,83,0,748,746,1,0,0,0,748,749,1,
        0,0,0,749,751,1,0,0,0,750,742,1,0,0,0,750,743,1,0,0,0,750,744,1,
        0,0,0,751,75,1,0,0,0,752,753,3,380,190,0,753,754,3,370,185,0,754,
        755,5,12,0,0,755,756,3,166,83,0,756,757,3,8,4,0,757,77,1,0,0,0,758,
        761,3,376,188,0,759,760,5,12,0,0,760,762,3,166,83,0,761,759,1,0,
        0,0,761,762,1,0,0,0,762,79,1,0,0,0,763,764,3,78,39,0,764,765,3,138,
        69,0,765,81,1,0,0,0,766,768,5,64,0,0,767,769,3,166,83,0,768,767,
        1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,5,46,0,0,771,83,
        1,0,0,0,772,774,5,54,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,871,
        1,0,0,0,775,776,5,75,0,0,776,872,3,122,61,0,777,778,5,75,0,0,778,
        872,3,70,35,0,779,780,5,75,0,0,780,872,3,80,40,0,781,783,5,75,0,
        0,782,784,5,107,0,0,783,782,1,0,0,0,783,784,1,0,0,0,784,786,1,0,
        0,0,785,781,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,872,3,164,
        82,0,788,790,5,75,0,0,789,791,5,107,0,0,790,789,1,0,0,0,790,791,
        1,0,0,0,791,793,1,0,0,0,792,788,1,0,0,0,792,793,1,0,0,0,793,794,
        1,0,0,0,794,872,3,324,162,0,795,797,5,75,0,0,796,798,5,107,0,0,797,
        796,1,0,0,0,797,798,1,0,0,0,798,800,1,0,0,0,799,795,1,0,0,0,799,
        800,1,0,0,0,800,801,1,0,0,0,801,872,3,154,77,0,802,804,5,75,0,0,
        803,802,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,872,3,278,139,
        0,806,807,5,107,0,0,807,809,5,63,0,0,808,810,3,366,183,0,809,808,
        1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,872,3,342,171,0,812,
        813,5,107,0,0,813,815,5,78,0,0,814,816,3,366,183,0,815,814,1,0,0,
        0,815,816,1,0,0,0,816,817,1,0,0,0,817,872,3,342,171,0,818,819,5,
        107,0,0,819,820,5,91,0,0,820,822,5,78,0,0,821,823,3,366,183,0,822,
        821,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,872,3,184,92,0,825,
        827,5,107,0,0,826,828,5,91,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,
        829,1,0,0,0,829,830,3,406,203,0,830,831,3,184,92,0,831,872,1,0,0,
        0,832,833,5,65,0,0,833,834,5,91,0,0,834,836,5,78,0,0,835,837,3,366,
        183,0,836,835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,872,3,
        168,84,0,839,841,5,65,0,0,840,842,5,91,0,0,841,840,1,0,0,0,841,842,
        1,0,0,0,842,843,1,0,0,0,843,844,3,406,203,0,844,845,3,184,92,0,845,
        872,1,0,0,0,846,848,5,91,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,
        849,1,0,0,0,849,851,5,78,0,0,850,852,3,366,183,0,851,850,1,0,0,0,
        851,852,1,0,0,0,852,853,1,0,0,0,853,872,3,184,92,0,854,856,5,91,
        0,0,855,854,1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,858,3,406,
        203,0,858,859,3,184,92,0,859,872,1,0,0,0,860,872,3,306,153,0,861,
        864,3,70,35,0,862,865,3,308,154,0,863,865,3,192,96,0,864,862,1,0,
        0,0,864,863,1,0,0,0,864,865,1,0,0,0,865,872,1,0,0,0,866,869,3,80,
        40,0,867,870,3,308,154,0,868,870,3,192,96,0,869,867,1,0,0,0,869,
        868,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,775,1,0,0,0,871,
        777,1,0,0,0,871,779,1,0,0,0,871,785,1,0,0,0,871,792,1,0,0,0,871,
        799,1,0,0,0,871,803,1,0,0,0,871,806,1,0,0,0,871,812,1,0,0,0,871,
        818,1,0,0,0,871,825,1,0,0,0,871,832,1,0,0,0,871,839,1,0,0,0,871,
        847,1,0,0,0,871,855,1,0,0,0,871,860,1,0,0,0,871,861,1,0,0,0,871,
        866,1,0,0,0,872,85,1,0,0,0,873,875,5,65,0,0,874,873,1,0,0,0,874,
        875,1,0,0,0,875,876,1,0,0,0,876,877,3,128,64,0,877,878,3,166,83,
        0,878,87,1,0,0,0,879,881,3,198,99,0,880,879,1,0,0,0,881,884,1,0,
        0,0,882,880,1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,882,1,0,
        0,0,885,886,5,66,0,0,886,887,5,10,0,0,887,888,3,338,169,0,888,89,
        1,0,0,0,889,892,3,260,130,0,890,891,5,18,0,0,891,893,3,110,55,0,
        892,890,1,0,0,0,892,893,1,0,0,0,893,91,1,0,0,0,894,896,3,224,112,
        0,895,897,5,102,0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,
        0,0,898,901,3,262,131,0,899,900,7,4,0,0,900,902,3,110,55,0,901,899,
        1,0,0,0,901,902,1,0,0,0,902,93,1,0,0,0,903,904,5,68,0,0,904,905,
        3,336,168,0,905,906,5,118,0,0,906,907,5,31,0,0,907,908,3,110,55,
        0,908,909,5,11,0,0,909,910,5,46,0,0,910,95,1,0,0,0,911,916,3,166,
        83,0,912,913,5,12,0,0,913,915,3,166,83,0,914,912,1,0,0,0,915,918,
        1,0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,97,1,0,0,0,918,916,1,
        0,0,0,919,925,3,112,56,0,920,925,3,222,111,0,921,925,3,334,167,0,
        922,925,3,170,85,0,923,925,3,132,66,0,924,919,1,0,0,0,924,920,1,
        0,0,0,924,921,1,0,0,0,924,922,1,0,0,0,924,923,1,0,0,0,925,99,1,0,
        0,0,926,931,3,98,49,0,927,928,5,5,0,0,928,930,3,98,49,0,929,927,
        1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,935,
        1,0,0,0,933,931,1,0,0,0,934,936,5,5,0,0,935,934,1,0,0,0,935,936,
        1,0,0,0,936,101,1,0,0,0,937,938,3,224,112,0,938,939,3,166,83,0,939,
        103,1,0,0,0,940,941,5,71,0,0,941,942,3,166,83,0,942,943,5,30,0,0,
        943,948,3,102,51,0,944,945,5,5,0,0,945,947,3,102,51,0,946,944,1,
        0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,948,949,1,0,0,0,949,952,1,
        0,0,0,950,948,1,0,0,0,951,953,5,5,0,0,952,951,1,0,0,0,952,953,1,
        0,0,0,953,954,1,0,0,0,954,955,5,7,0,0,955,105,1,0,0,0,956,960,3,
        310,155,0,957,958,3,108,54,0,958,959,3,310,155,0,959,961,1,0,0,0,
        960,957,1,0,0,0,960,961,1,0,0,0,961,967,1,0,0,0,962,963,5,108,0,
        0,963,964,3,108,54,0,964,965,3,310,155,0,965,967,1,0,0,0,966,956,
        1,0,0,0,966,962,1,0,0,0,967,107,1,0,0,0,968,969,7,5,0,0,969,109,
        1,0,0,0,970,971,3,16,8,0,971,972,3,22,11,0,972,973,3,110,55,0,973,
        978,1,0,0,0,974,978,3,64,32,0,975,978,3,42,21,0,976,978,3,356,178,
        0,977,970,1,0,0,0,977,974,1,0,0,0,977,975,1,0,0,0,977,976,1,0,0,
        0,978,111,1,0,0,0,979,980,3,110,55,0,980,113,1,0,0,0,981,986,3,110,
        55,0,982,983,5,5,0,0,983,985,3,110,55,0,984,982,1,0,0,0,985,988,
        1,0,0,0,986,984,1,0,0,0,986,987,1,0,0,0,987,115,1,0,0,0,988,986,
        1,0,0,0,989,991,3,110,55,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,
        1,0,0,0,992,993,5,46,0,0,993,117,1,0,0,0,994,995,3,16,8,0,995,996,
        3,22,11,0,996,997,3,118,59,0,997,1001,1,0,0,0,998,1001,3,64,32,0,
        999,1001,3,358,179,0,1000,994,1,0,0,0,1000,998,1,0,0,0,1000,999,
        1,0,0,0,1001,119,1,0,0,0,1002,1004,5,74,0,0,1003,1005,3,166,83,0,
        1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1007,1,0,0,0,1006,1008,
        3,394,197,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,
        0,1009,1010,5,99,0,0,1010,1011,3,366,183,0,1011,1017,5,30,0,0,1012,
        1013,3,224,112,0,1013,1014,3,56,28,0,1014,1016,1,0,0,0,1015,1012,
        1,0,0,0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,
        1020,1,0,0,0,1019,1017,1,0,0,0,1020,1021,5,7,0,0,1021,121,1,0,0,
        0,1022,1024,5,63,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,
        1,0,0,0,1025,1026,5,76,0,0,1026,1027,3,78,39,0,1027,1028,3,138,69,
        0,1028,123,1,0,0,0,1029,1031,3,128,64,0,1030,1029,1,0,0,0,1030,1031,
        1,0,0,0,1031,1032,1,0,0,0,1032,1033,5,111,0,0,1033,1034,5,12,0,0,
        1034,1039,3,166,83,0,1035,1037,3,140,70,0,1036,1038,5,41,0,0,1037,
        1036,1,0,0,0,1037,1038,1,0,0,0,1038,1040,1,0,0,0,1039,1035,1,0,0,
        0,1039,1040,1,0,0,0,1040,125,1,0,0,0,1041,1042,5,111,0,0,1042,1044,
        5,12,0,0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,
        1046,3,166,83,0,1046,1047,5,18,0,0,1047,1048,3,188,94,0,1048,127,
        1,0,0,0,1049,1051,5,91,0,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,
        1052,1,0,0,0,1052,1054,5,78,0,0,1053,1055,3,366,183,0,1054,1053,
        1,0,0,0,1054,1055,1,0,0,0,1055,1065,1,0,0,0,1056,1058,5,63,0,0,1057,
        1059,3,366,183,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1065,1,
        0,0,0,1060,1062,5,91,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,
        1063,1,0,0,0,1063,1065,3,406,203,0,1064,1050,1,0,0,0,1064,1056,1,
        0,0,0,1064,1061,1,0,0,0,1065,129,1,0,0,0,1066,1067,5,79,0,0,1067,
        1068,3,36,18,0,1068,131,1,0,0,0,1069,1071,5,58,0,0,1070,1069,1,0,
        0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1073,5,80,0,0,1073,
        1074,5,31,0,0,1074,1075,3,136,68,0,1075,1076,5,11,0,0,1076,1077,
        3,98,49,0,1077,133,1,0,0,0,1078,1084,3,216,108,0,1079,1081,3,110,
        55,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,
        1084,5,46,0,0,1083,1078,1,0,0,0,1083,1080,1,0,0,0,1084,135,1,0,0,
        0,1085,1087,3,134,67,0,1086,1088,3,110,55,0,1087,1086,1,0,0,0,1087,
        1088,1,0,0,0,1088,1089,1,0,0,0,1089,1091,5,46,0,0,1090,1092,3,114,
        57,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,1103,1,0,0,0,1093,
        1094,3,224,112,0,1094,1095,3,86,43,0,1095,1096,5,88,0,0,1096,1097,
        3,110,55,0,1097,1103,1,0,0,0,1098,1099,3,166,83,0,1099,1100,5,88,
        0,0,1100,1101,3,110,55,0,1101,1103,1,0,0,0,1102,1085,1,0,0,0,1102,
        1093,1,0,0,0,1102,1098,1,0,0,0,1103,137,1,0,0,0,1104,1105,5,31,0,
        0,1105,1124,5,11,0,0,1106,1107,5,31,0,0,1107,1109,3,264,132,0,1108,
        1110,5,5,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,
        0,1111,1112,5,11,0,0,1112,1124,1,0,0,0,1113,1114,5,31,0,0,1114,1115,
        3,264,132,0,1115,1116,5,5,0,0,1116,1117,3,280,140,0,1117,1118,5,
        11,0,0,1118,1124,1,0,0,0,1119,1120,5,31,0,0,1120,1121,3,280,140,
        0,1121,1122,5,11,0,0,1122,1124,1,0,0,0,1123,1104,1,0,0,0,1123,1106,
        1,0,0,0,1123,1113,1,0,0,0,1123,1119,1,0,0,0,1124,139,1,0,0,0,1125,
        1127,3,394,197,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,1127,1128,1,
        0,0,0,1128,1129,3,138,69,0,1129,141,1,0,0,0,1130,1132,5,58,0,0,1131,
        1130,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,0,0,1133,1134,5,80,
        0,0,1134,1135,5,31,0,0,1135,1136,3,136,68,0,1136,1137,5,11,0,0,1137,
        1138,3,336,168,0,1138,143,1,0,0,0,1139,1141,5,95,0,0,1140,1142,3,
        344,172,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,
        1143,1161,5,46,0,0,1144,1146,5,57,0,0,1145,1144,1,0,0,0,1145,1146,
        1,0,0,0,1146,1147,1,0,0,0,1147,1148,5,17,0,0,1148,1149,3,110,55,
        0,1149,1150,5,46,0,0,1150,1161,1,0,0,0,1151,1153,5,57,0,0,1152,1154,
        5,52,0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1158,1,0,0,0,1155,
        1156,5,110,0,0,1156,1158,5,52,0,0,1157,1151,1,0,0,0,1157,1155,1,
        0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1161,3,36,18,0,1160,
        1139,1,0,0,0,1160,1145,1,0,0,0,1160,1157,1,0,0,0,1161,145,1,0,0,
        0,1162,1163,3,140,70,0,1163,1164,3,148,74,0,1164,147,1,0,0,0,1165,
        1167,5,57,0,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,1168,1,0,
        0,0,1168,1169,5,17,0,0,1169,1180,3,110,55,0,1170,1172,5,57,0,0,1171,
        1173,5,52,0,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,1177,1,0,
        0,0,1174,1175,5,110,0,0,1175,1177,5,52,0,0,1176,1170,1,0,0,0,1176,
        1174,1,0,0,0,1176,1177,1,0,0,0,1177,1178,1,0,0,0,1178,1180,3,36,
        18,0,1179,1166,1,0,0,0,1179,1176,1,0,0,0,1180,149,1,0,0,0,1181,1183,
        5,65,0,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,
        1186,3,366,183,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,
        0,0,0,1187,1188,3,166,83,0,1188,1190,3,140,70,0,1189,1191,5,41,0,
        0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,151,1,0,0,0,1192,1194,
        3,366,183,0,1193,1192,1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,
        0,1195,1196,3,166,83,0,1196,153,1,0,0,0,1197,1199,3,366,183,0,1198,
        1197,1,0,0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,1201,3,166,
        83,0,1201,1202,3,140,70,0,1202,155,1,0,0,0,1203,1208,3,162,81,0,
        1204,1205,3,382,191,0,1205,1206,3,162,81,0,1206,1208,1,0,0,0,1207,
        1203,1,0,0,0,1207,1204,1,0,0,0,1208,157,1,0,0,0,1209,1210,3,152,
        76,0,1210,1211,3,140,70,0,1211,1212,5,46,0,0,1212,159,1,0,0,0,1213,
        1215,5,81,0,0,1214,1216,3,394,197,0,1215,1214,1,0,0,0,1215,1216,
        1,0,0,0,1216,1217,1,0,0,0,1217,1218,3,288,144,0,1218,161,1,0,0,0,
        1219,1221,3,160,80,0,1220,1222,5,41,0,0,1221,1220,1,0,0,0,1221,1222,
        1,0,0,0,1222,1223,1,0,0,0,1223,1224,3,162,81,0,1224,1227,1,0,0,0,
        1225,1227,3,160,80,0,1226,1219,1,0,0,0,1226,1225,1,0,0,0,1227,163,
        1,0,0,0,1228,1230,3,366,183,0,1229,1228,1,0,0,0,1229,1230,1,0,0,
        0,1230,1231,1,0,0,0,1231,1232,5,82,0,0,1232,1233,3,166,83,0,1233,
        165,1,0,0,0,1234,1235,7,6,0,0,1235,167,1,0,0,0,1236,1241,3,166,83,
        0,1237,1238,5,5,0,0,1238,1240,3,166,83,0,1239,1237,1,0,0,0,1240,
        1243,1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,169,1,0,0,
        0,1243,1241,1,0,0,0,1244,1245,5,85,0,0,1245,1246,5,31,0,0,1246,1247,
        3,110,55,0,1247,1248,5,11,0,0,1248,1251,3,98,49,0,1249,1250,5,70,
        0,0,1250,1252,3,98,49,0,1251,1249,1,0,0,0,1251,1252,1,0,0,0,1252,
        171,1,0,0,0,1253,1258,3,220,110,0,1254,1255,5,44,0,0,1255,1257,3,
        220,110,0,1256,1254,1,0,0,0,1257,1260,1,0,0,0,1258,1256,1,0,0,0,
        1258,1259,1,0,0,0,1259,173,1,0,0,0,1260,1258,1,0,0,0,1261,1262,5,
        85,0,0,1262,1263,5,31,0,0,1263,1264,3,110,55,0,1264,1265,5,11,0,
        0,1265,1268,3,336,168,0,1266,1267,5,70,0,0,1267,1269,3,336,168,0,
        1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,175,1,0,0,0,1270,1273,3,
        206,103,0,1271,1273,3,204,102,0,1272,1270,1,0,0,0,1272,1271,1,0,
        0,0,1273,177,1,0,0,0,1274,1275,5,87,0,0,1275,1281,3,66,33,0,1276,
        1278,5,67,0,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,
        0,0,1279,1280,5,55,0,0,1280,1282,3,166,83,0,1281,1277,1,0,0,0,1281,
        1282,1,0,0,0,1282,1286,1,0,0,0,1283,1285,3,58,29,0,1284,1283,1,0,
        0,0,1285,1288,1,0,0,0,1286,1284,1,0,0,0,1286,1287,1,0,0,0,1287,1289,
        1,0,0,0,1288,1286,1,0,0,0,1289,1290,5,46,0,0,1290,179,1,0,0,0,1291,
        1292,7,7,0,0,1292,181,1,0,0,0,1293,1296,3,166,83,0,1294,1295,5,18,
        0,0,1295,1297,3,110,55,0,1296,1294,1,0,0,0,1296,1297,1,0,0,0,1297,
        183,1,0,0,0,1298,1303,3,182,91,0,1299,1300,5,5,0,0,1300,1302,3,182,
        91,0,1301,1299,1,0,0,0,1302,1305,1,0,0,0,1303,1301,1,0,0,0,1303,
        1304,1,0,0,0,1304,185,1,0,0,0,1305,1303,1,0,0,0,1306,1309,3,86,43,
        0,1307,1308,5,18,0,0,1308,1310,3,110,55,0,1309,1307,1,0,0,0,1309,
        1310,1,0,0,0,1310,1315,1,0,0,0,1311,1312,5,5,0,0,1312,1314,3,182,
        91,0,1313,1311,1,0,0,0,1314,1317,1,0,0,0,1315,1313,1,0,0,0,1315,
        1316,1,0,0,0,1316,187,1,0,0,0,1317,1315,1,0,0,0,1318,1321,3,64,32,
        0,1319,1321,3,42,21,0,1320,1318,1,0,0,0,1320,1319,1,0,0,0,1321,189,
        1,0,0,0,1322,1323,5,108,0,0,1323,1332,3,8,4,0,1324,1325,5,108,0,
        0,1325,1326,5,12,0,0,1326,1327,3,166,83,0,1327,1328,3,8,4,0,1328,
        1332,1,0,0,0,1329,1332,3,126,63,0,1330,1332,3,12,6,0,1331,1322,1,
        0,0,0,1331,1324,1,0,0,0,1331,1329,1,0,0,0,1331,1330,1,0,0,0,1332,
        191,1,0,0,0,1333,1334,5,10,0,0,1334,1339,3,190,95,0,1335,1336,5,
        5,0,0,1336,1338,3,190,95,0,1337,1335,1,0,0,0,1338,1341,1,0,0,0,1339,
        1337,1,0,0,0,1339,1340,1,0,0,0,1340,193,1,0,0,0,1341,1339,1,0,0,
        0,1342,1343,5,86,0,0,1343,1344,3,386,193,0,1344,195,1,0,0,0,1345,
        1347,5,90,0,0,1346,1348,5,28,0,0,1347,1346,1,0,0,0,1347,1348,1,0,
        0,0,1348,197,1,0,0,0,1349,1350,3,166,83,0,1350,1351,5,10,0,0,1351,
        199,1,0,0,0,1352,1353,5,92,0,0,1353,1354,3,342,171,0,1354,1355,5,
        88,0,0,1355,1356,3,110,55,0,1356,201,1,0,0,0,1357,1359,3,208,104,
        0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,1363,1,0,0,0,1360,1362,
        3,176,88,0,1361,1360,1,0,0,0,1362,1365,1,0,0,0,1363,1361,1,0,0,0,
        1363,1364,1,0,0,0,1364,1369,1,0,0,0,1365,1363,1,0,0,0,1366,1368,
        3,292,146,0,1367,1366,1,0,0,0,1368,1371,1,0,0,0,1369,1367,1,0,0,
        0,1369,1370,1,0,0,0,1370,1377,1,0,0,0,1371,1369,1,0,0,0,1372,1373,
        3,224,112,0,1373,1374,3,362,181,0,1374,1376,1,0,0,0,1375,1372,1,
        0,0,0,1376,1379,1,0,0,0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,
        203,1,0,0,0,1379,1377,1,0,0,0,1380,1381,3,224,112,0,1381,1382,5,
        72,0,0,1382,1386,3,66,33,0,1383,1385,3,58,29,0,1384,1383,1,0,0,0,
        1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,1387,1,0,0,0,1387,1389,
        1,0,0,0,1388,1386,1,0,0,0,1389,1390,5,46,0,0,1390,205,1,0,0,0,1391,
        1392,3,224,112,0,1392,1393,3,178,89,0,1393,207,1,0,0,0,1394,1395,
        3,224,112,0,1395,1396,5,93,0,0,1396,1397,3,96,48,0,1397,1398,5,46,
        0,0,1398,209,1,0,0,0,1399,1401,5,63,0,0,1400,1399,1,0,0,0,1400,1401,
        1,0,0,0,1401,1403,1,0,0,0,1402,1404,3,370,185,0,1403,1402,1,0,0,
        0,1403,1404,1,0,0,0,1404,1405,1,0,0,0,1405,1407,5,29,0,0,1406,1408,
        3,100,50,0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1409,1,0,0,0,
        1409,1410,5,6,0,0,1410,211,1,0,0,0,1411,1419,3,270,135,0,1412,1419,
        3,38,19,0,1413,1419,3,272,136,0,1414,1419,3,344,172,0,1415,1419,
        3,352,176,0,1416,1419,3,210,105,0,1417,1419,3,322,161,0,1418,1411,
        1,0,0,0,1418,1412,1,0,0,0,1418,1413,1,0,0,0,1418,1414,1,0,0,0,1418,
        1415,1,0,0,0,1418,1416,1,0,0,0,1418,1417,1,0,0,0,1419,213,1,0,0,
        0,1420,1421,3,224,112,0,1421,1422,3,154,77,0,1422,1423,3,144,72,
        0,1423,215,1,0,0,0,1424,1425,3,224,112,0,1425,1426,3,186,93,0,1426,
        1427,5,46,0,0,1427,217,1,0,0,0,1428,1433,3,106,53,0,1429,1430,5,
        2,0,0,1430,1432,3,106,53,0,1431,1429,1,0,0,0,1432,1435,1,0,0,0,1433,
        1431,1,0,0,0,1433,1434,1,0,0,0,1434,219,1,0,0,0,1435,1433,1,0,0,
        0,1436,1441,3,218,109,0,1437,1438,5,40,0,0,1438,1440,3,218,109,0,
        1439,1437,1,0,0,0,1440,1443,1,0,0,0,1441,1439,1,0,0,0,1441,1442,
        1,0,0,0,1442,221,1,0,0,0,1443,1441,1,0,0,0,1444,1445,3,110,55,0,
        1445,1446,5,10,0,0,1446,1447,3,110,55,0,1447,223,1,0,0,0,1448,1449,
        5,4,0,0,1449,1451,3,226,113,0,1450,1448,1,0,0,0,1451,1454,1,0,0,
        0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,225,1,0,0,0,1454,1452,
        1,0,0,0,1455,1461,3,166,83,0,1456,1461,3,304,152,0,1457,1458,3,74,
        37,0,1458,1459,3,8,4,0,1459,1461,1,0,0,0,1460,1455,1,0,0,0,1460,
        1456,1,0,0,0,1460,1457,1,0,0,0,1461,227,1,0,0,0,1462,1464,3,80,40,
        0,1463,1465,3,192,96,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,
        1481,1,0,0,0,1466,1481,3,122,61,0,1467,1469,5,107,0,0,1468,1467,
        1,0,0,0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,1481,3,154,77,0,
        1471,1473,5,107,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,
        1,0,0,0,1474,1481,3,164,82,0,1475,1477,5,107,0,0,1476,1475,1,0,0,
        0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1481,3,324,162,0,1479,
        1481,3,278,139,0,1480,1462,1,0,0,0,1480,1466,1,0,0,0,1480,1468,1,
        0,0,0,1480,1472,1,0,0,0,1480,1476,1,0,0,0,1480,1479,1,0,0,0,1481,
        229,1,0,0,0,1482,1483,5,25,0,0,1483,231,1,0,0,0,1484,1485,3,384,
        192,0,1485,1487,3,238,119,0,1486,1488,3,194,97,0,1487,1486,1,0,0,
        0,1487,1488,1,0,0,0,1488,233,1,0,0,0,1489,1491,3,166,83,0,1490,1492,
        3,394,197,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,
        0,1493,1494,5,18,0,0,1494,1495,3,232,116,0,1495,1496,5,46,0,0,1496,
        235,1,0,0,0,1497,1498,5,94,0,0,1498,1500,3,376,188,0,1499,1501,3,
        394,197,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1504,1,0,0,0,
        1502,1503,5,99,0,0,1503,1505,3,386,193,0,1504,1502,1,0,0,0,1504,
        1505,1,0,0,0,1505,1507,1,0,0,0,1506,1508,3,194,97,0,1507,1506,1,
        0,0,0,1507,1508,1,0,0,0,1508,1509,1,0,0,0,1509,1515,5,30,0,0,1510,
        1511,3,224,112,0,1511,1512,3,56,28,0,1512,1514,1,0,0,0,1513,1510,
        1,0,0,0,1514,1517,1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,
        1518,1,0,0,0,1517,1515,1,0,0,0,1518,1519,5,7,0,0,1519,237,1,0,0,
        0,1520,1521,5,119,0,0,1521,1522,3,386,193,0,1522,239,1,0,0,0,1523,
        1524,5,124,0,0,1524,241,1,0,0,0,1525,1531,3,398,199,0,1526,1527,
        3,244,122,0,1527,1528,3,398,199,0,1528,1530,1,0,0,0,1529,1526,1,
        0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,
        1543,1,0,0,0,1533,1531,1,0,0,0,1534,1538,5,108,0,0,1535,1536,3,244,
        122,0,1536,1537,3,398,199,0,1537,1539,1,0,0,0,1538,1535,1,0,0,0,
        1539,1540,1,0,0,0,1540,1538,1,0,0,0,1540,1541,1,0,0,0,1541,1543,
        1,0,0,0,1542,1525,1,0,0,0,1542,1534,1,0,0,0,1543,243,1,0,0,0,1544,
        1545,7,8,0,0,1545,245,1,0,0,0,1546,1547,3,198,99,0,1547,1548,3,110,
        55,0,1548,247,1,0,0,0,1549,1550,5,30,0,0,1550,1555,3,92,46,0,1551,
        1552,5,5,0,0,1552,1554,3,92,46,0,1553,1551,1,0,0,0,1554,1557,1,0,
        0,0,1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,1559,1,0,0,0,1557,1555,
        1,0,0,0,1558,1560,5,5,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,
        1561,1,0,0,0,1561,1562,5,7,0,0,1562,249,1,0,0,0,1563,1565,3,224,
        112,0,1564,1566,5,102,0,0,1565,1564,1,0,0,0,1565,1566,1,0,0,0,1566,
        1567,1,0,0,0,1567,1568,3,374,187,0,1568,251,1,0,0,0,1569,1570,5,
        30,0,0,1570,1575,3,250,125,0,1571,1572,5,5,0,0,1572,1574,3,250,125,
        0,1573,1571,1,0,0,0,1574,1577,1,0,0,0,1575,1573,1,0,0,0,1575,1576,
        1,0,0,0,1576,1579,1,0,0,0,1577,1575,1,0,0,0,1578,1580,5,5,0,0,1579,
        1578,1,0,0,0,1579,1580,1,0,0,0,1580,1581,1,0,0,0,1581,1582,5,7,0,
        0,1582,253,1,0,0,0,1583,1584,5,28,0,0,1584,255,1,0,0,0,1585,1586,
        5,96,0,0,1586,1587,3,74,37,0,1587,1588,3,8,4,0,1588,257,1,0,0,0,
        1589,1607,3,36,18,0,1590,1607,3,216,108,0,1591,1607,3,142,71,0,1592,
        1607,3,408,204,0,1593,1607,3,94,47,0,1594,1607,3,350,175,0,1595,
        1607,3,174,87,0,1596,1607,3,316,158,0,1597,1607,3,364,182,0,1598,
        1607,3,40,20,0,1599,1607,3,82,41,0,1600,1607,3,318,159,0,1601,1607,
        3,412,206,0,1602,1607,3,410,205,0,1603,1607,3,116,58,0,1604,1607,
        3,14,7,0,1605,1607,3,214,107,0,1606,1589,1,0,0,0,1606,1590,1,0,0,
        0,1606,1591,1,0,0,0,1606,1592,1,0,0,0,1606,1593,1,0,0,0,1606,1594,
        1,0,0,0,1606,1595,1,0,0,0,1606,1596,1,0,0,0,1606,1597,1,0,0,0,1606,
        1598,1,0,0,0,1606,1599,1,0,0,0,1606,1600,1,0,0,0,1606,1601,1,0,0,
        0,1606,1602,1,0,0,0,1606,1603,1,0,0,0,1606,1604,1,0,0,0,1606,1605,
        1,0,0,0,1607,259,1,0,0,0,1608,1609,3,224,112,0,1609,1610,3,262,131,
        0,1610,261,1,0,0,0,1611,1615,3,150,75,0,1612,1615,3,124,62,0,1613,
        1615,3,330,165,0,1614,1611,1,0,0,0,1614,1612,1,0,0,0,1614,1613,1,
        0,0,0,1615,263,1,0,0,0,1616,1621,3,260,130,0,1617,1618,5,5,0,0,1618,
        1620,3,260,130,0,1619,1617,1,0,0,0,1620,1623,1,0,0,0,1621,1619,1,
        0,0,0,1621,1622,1,0,0,0,1622,265,1,0,0,0,1623,1621,1,0,0,0,1624,
        1625,3,224,112,0,1625,1626,3,374,187,0,1626,1631,1,0,0,0,1627,1628,
        3,224,112,0,1628,1629,3,366,183,0,1629,1631,1,0,0,0,1630,1624,1,
        0,0,0,1630,1627,1,0,0,0,1631,267,1,0,0,0,1632,1637,3,266,133,0,1633,
        1634,5,5,0,0,1634,1636,3,266,133,0,1635,1633,1,0,0,0,1636,1639,1,
        0,0,0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,269,1,0,0,0,1639,
        1637,1,0,0,0,1640,1641,5,97,0,0,1641,271,1,0,0,0,1642,1643,7,9,0,
        0,1643,273,1,0,0,0,1644,1645,3,52,26,0,1645,1646,3,36,18,0,1646,
        1655,1,0,0,0,1647,1648,5,99,0,0,1648,1650,3,384,192,0,1649,1651,
        3,52,26,0,1650,1649,1,0,0,0,1650,1651,1,0,0,0,1651,1652,1,0,0,0,
        1652,1653,3,36,18,0,1653,1655,1,0,0,0,1654,1644,1,0,0,0,1654,1647,
        1,0,0,0,1655,275,1,0,0,0,1656,1664,5,51,0,0,1657,1664,3,26,13,0,
        1658,1659,5,29,0,0,1659,1664,5,6,0,0,1660,1661,5,29,0,0,1661,1662,
        5,6,0,0,1662,1664,5,18,0,0,1663,1656,1,0,0,0,1663,1657,1,0,0,0,1663,
        1658,1,0,0,0,1663,1660,1,0,0,0,1664,277,1,0,0,0,1665,1667,3,366,
        183,0,1666,1665,1,0,0,0,1666,1667,1,0,0,0,1667,1668,1,0,0,0,1668,
        1669,5,100,0,0,1669,1670,3,276,138,0,1670,1671,3,138,69,0,1671,279,
        1,0,0,0,1672,1675,3,284,142,0,1673,1675,3,248,124,0,1674,1672,1,
        0,0,0,1674,1673,1,0,0,0,1675,281,1,0,0,0,1676,1679,3,286,143,0,1677,
        1679,3,252,126,0,1678,1676,1,0,0,0,1678,1677,1,0,0,0,1679,283,1,
        0,0,0,1680,1681,5,29,0,0,1681,1686,3,90,45,0,1682,1683,5,5,0,0,1683,
        1685,3,90,45,0,1684,1682,1,0,0,0,1685,1688,1,0,0,0,1686,1684,1,0,
        0,0,1686,1687,1,0,0,0,1687,1690,1,0,0,0,1688,1686,1,0,0,0,1689,1691,
        5,5,0,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1692,1,0,0,0,1692,
        1693,5,6,0,0,1693,285,1,0,0,0,1694,1695,5,29,0,0,1695,1697,3,268,
        134,0,1696,1698,5,5,0,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,
        1699,1,0,0,0,1699,1700,5,6,0,0,1700,287,1,0,0,0,1701,1702,5,31,0,
        0,1702,1721,5,11,0,0,1703,1704,5,31,0,0,1704,1705,3,268,134,0,1705,
        1706,5,5,0,0,1706,1707,3,282,141,0,1707,1708,5,11,0,0,1708,1721,
        1,0,0,0,1709,1710,5,31,0,0,1710,1712,3,268,134,0,1711,1713,5,5,0,
        0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1715,
        5,11,0,0,1715,1721,1,0,0,0,1716,1717,5,31,0,0,1717,1718,3,282,141,
        0,1718,1719,5,11,0,0,1719,1721,1,0,0,0,1720,1701,1,0,0,0,1720,1703,
        1,0,0,0,1720,1709,1,0,0,0,1720,1716,1,0,0,0,1721,289,1,0,0,0,1722,
        1728,3,294,147,0,1723,1724,3,224,112,0,1724,1725,3,362,181,0,1725,
        1727,1,0,0,0,1726,1723,1,0,0,0,1727,1730,1,0,0,0,1728,1726,1,0,0,
        0,1728,1729,1,0,0,0,1729,291,1,0,0,0,1730,1728,1,0,0,0,1731,1732,
        3,224,112,0,1732,1733,5,101,0,0,1733,1734,3,402,201,0,1734,1735,
        5,46,0,0,1735,293,1,0,0,0,1736,1737,3,224,112,0,1737,1738,5,101,
        0,0,1738,1741,5,98,0,0,1739,1742,3,96,48,0,1740,1742,3,402,201,0,
        1741,1739,1,0,0,0,1741,1740,1,0,0,0,1742,1743,1,0,0,0,1743,1744,
        5,46,0,0,1744,295,1,0,0,0,1745,1746,3,16,8,0,1746,1747,3,298,149,
        0,1747,1756,1,0,0,0,1748,1752,3,302,151,0,1749,1751,3,320,160,0,
        1750,1749,1,0,0,0,1751,1754,1,0,0,0,1752,1750,1,0,0,0,1752,1753,
        1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1755,1745,1,0,0,0,1755,
        1748,1,0,0,0,1756,297,1,0,0,0,1757,1758,3,180,90,0,1758,299,1,0,
        0,0,1759,1763,3,230,115,0,1760,1763,3,254,127,0,1761,1763,3,360,
        180,0,1762,1759,1,0,0,0,1762,1760,1,0,0,0,1762,1761,1,0,0,0,1763,
        301,1,0,0,0,1764,1780,3,354,177,0,1765,1766,5,108,0,0,1766,1780,
        3,400,200,0,1767,1768,5,108,0,0,1768,1780,3,6,3,0,1769,1780,3,146,
        73,0,1770,1780,3,212,106,0,1771,1780,3,166,83,0,1772,1780,3,256,
        128,0,1773,1780,3,72,36,0,1774,1780,3,76,38,0,1775,1776,5,31,0,0,
        1776,1777,3,110,55,0,1777,1778,5,11,0,0,1778,1780,1,0,0,0,1779,1764,
        1,0,0,0,1779,1765,1,0,0,0,1779,1767,1,0,0,0,1779,1769,1,0,0,0,1779,
        1770,1,0,0,0,1779,1771,1,0,0,0,1779,1772,1,0,0,0,1779,1773,1,0,0,
        0,1779,1774,1,0,0,0,1779,1775,1,0,0,0,1780,303,1,0,0,0,1781,1782,
        3,376,188,0,1782,1783,5,12,0,0,1783,1784,3,166,83,0,1784,1792,1,
        0,0,0,1785,1786,3,376,188,0,1786,1787,5,12,0,0,1787,1788,3,376,188,
        0,1788,1789,5,12,0,0,1789,1790,3,166,83,0,1790,1792,1,0,0,0,1791,
        1781,1,0,0,0,1791,1785,1,0,0,0,1792,305,1,0,0,0,1793,1795,5,63,0,
        0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,1797,
        5,76,0,0,1797,1798,3,78,39,0,1798,1799,3,138,69,0,1799,1800,5,18,
        0,0,1800,1801,3,74,37,0,1801,307,1,0,0,0,1802,1803,5,10,0,0,1803,
        1806,5,111,0,0,1804,1805,5,12,0,0,1805,1807,3,166,83,0,1806,1804,
        1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,1809,3,8,4,0,1809,
        309,1,0,0,0,1810,1816,3,32,16,0,1811,1817,3,396,198,0,1812,1817,
        3,372,186,0,1813,1814,3,312,156,0,1814,1815,3,32,16,0,1815,1817,
        1,0,0,0,1816,1811,1,0,0,0,1816,1812,1,0,0,0,1816,1813,1,0,0,0,1816,
        1817,1,0,0,0,1817,1823,1,0,0,0,1818,1819,5,108,0,0,1819,1820,3,312,
        156,0,1820,1821,3,32,16,0,1821,1823,1,0,0,0,1822,1810,1,0,0,0,1822,
        1818,1,0,0,0,1823,311,1,0,0,0,1824,1825,5,19,0,0,1825,1830,5,18,
        0,0,1826,1830,5,19,0,0,1827,1830,5,21,0,0,1828,1830,5,20,0,0,1829,
        1824,1,0,0,0,1829,1826,1,0,0,0,1829,1827,1,0,0,0,1829,1828,1,0,0,
        0,1830,313,1,0,0,0,1831,1832,7,10,0,0,1832,315,1,0,0,0,1833,1834,
        5,103,0,0,1834,1835,5,46,0,0,1835,317,1,0,0,0,1836,1838,5,104,0,
        0,1837,1839,3,110,55,0,1838,1837,1,0,0,0,1838,1839,1,0,0,0,1839,
        1840,1,0,0,0,1840,1841,5,46,0,0,1841,319,1,0,0,0,1842,1846,5,28,
        0,0,1843,1846,3,18,9,0,1844,1846,3,6,3,0,1845,1842,1,0,0,0,1845,
        1843,1,0,0,0,1845,1844,1,0,0,0,1846,321,1,0,0,0,1847,1849,5,63,0,
        0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1851,1,0,0,0,1850,1852,
        3,370,185,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,
        0,1853,1855,5,30,0,0,1854,1856,3,100,50,0,1855,1854,1,0,0,0,1855,
        1856,1,0,0,0,1856,1857,1,0,0,0,1857,1858,5,7,0,0,1858,323,1,0,0,
        0,1859,1861,3,366,183,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,
        1862,1,0,0,0,1862,1863,5,105,0,0,1863,1864,3,166,83,0,1864,1865,
        3,138,69,0,1865,325,1,0,0,0,1866,1872,3,0,0,0,1867,1868,3,328,164,
        0,1868,1869,3,0,0,0,1869,1871,1,0,0,0,1870,1867,1,0,0,0,1871,1874,
        1,0,0,0,1872,1870,1,0,0,0,1872,1873,1,0,0,0,1873,1884,1,0,0,0,1874,
        1872,1,0,0,0,1875,1879,5,108,0,0,1876,1877,3,328,164,0,1877,1878,
        3,0,0,0,1878,1880,1,0,0,0,1879,1876,1,0,0,0,1880,1881,1,0,0,0,1881,
        1879,1,0,0,0,1881,1882,1,0,0,0,1882,1884,1,0,0,0,1883,1866,1,0,0,
        0,1883,1875,1,0,0,0,1884,327,1,0,0,0,1885,1892,5,22,0,0,1886,1887,
        5,19,0,0,1887,1888,5,19,0,0,1888,1892,5,19,0,0,1889,1890,5,19,0,
        0,1890,1892,5,19,0,0,1891,1885,1,0,0,0,1891,1886,1,0,0,0,1891,1889,
        1,0,0,0,1892,329,1,0,0,0,1893,1899,3,86,43,0,1894,1896,5,65,0,0,
        1895,1894,1,0,0,0,1895,1896,1,0,0,0,1896,1897,1,0,0,0,1897,1899,
        3,166,83,0,1898,1893,1,0,0,0,1898,1895,1,0,0,0,1899,331,1,0,0,0,
        1900,1901,5,123,0,0,1901,333,1,0,0,0,1902,1903,7,11,0,0,1903,1904,
        3,110,55,0,1904,335,1,0,0,0,1905,1907,3,198,99,0,1906,1905,1,0,0,
        0,1907,1910,1,0,0,0,1908,1906,1,0,0,0,1908,1909,1,0,0,0,1909,1911,
        1,0,0,0,1910,1908,1,0,0,0,1911,1912,3,258,129,0,1912,337,1,0,0,0,
        1913,1915,3,336,168,0,1914,1913,1,0,0,0,1915,1918,1,0,0,0,1916,1914,
        1,0,0,0,1916,1917,1,0,0,0,1917,339,1,0,0,0,1918,1916,1,0,0,0,1919,
        1920,3,166,83,0,1920,1921,5,18,0,0,1921,1922,3,110,55,0,1922,341,
        1,0,0,0,1923,1928,3,340,170,0,1924,1925,5,5,0,0,1925,1927,3,340,
        170,0,1926,1924,1,0,0,0,1927,1930,1,0,0,0,1928,1926,1,0,0,0,1928,
        1929,1,0,0,0,1929,343,1,0,0,0,1930,1928,1,0,0,0,1931,1934,3,240,
        120,0,1932,1934,3,332,166,0,1933,1931,1,0,0,0,1933,1932,1,0,0,0,
        1934,1935,1,0,0,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,345,1,
        0,0,0,1937,1938,5,73,0,0,1938,1940,3,384,192,0,1939,1941,3,238,119,
        0,1940,1939,1,0,0,0,1940,1941,1,0,0,0,1941,1944,1,0,0,0,1942,1944,
        3,238,119,0,1943,1937,1,0,0,0,1943,1942,1,0,0,0,1944,347,1,0,0,0,
        1945,1947,3,198,99,0,1946,1945,1,0,0,0,1947,1950,1,0,0,0,1948,1946,
        1,0,0,0,1948,1949,1,0,0,0,1949,1951,1,0,0,0,1950,1948,1,0,0,0,1951,
        1952,5,60,0,0,1952,1953,3,110,55,0,1953,1954,5,10,0,0,1954,1955,
        3,338,169,0,1955,349,1,0,0,0,1956,1957,5,109,0,0,1957,1958,5,31,
        0,0,1958,1959,3,110,55,0,1959,1960,5,11,0,0,1960,1964,5,30,0,0,1961,
        1963,3,348,174,0,1962,1961,1,0,0,0,1963,1966,1,0,0,0,1964,1962,1,
        0,0,0,1964,1965,1,0,0,0,1965,1968,1,0,0,0,1966,1964,1,0,0,0,1967,
        1969,3,88,44,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,1970,1,0,
        0,0,1970,1971,5,7,0,0,1971,351,1,0,0,0,1972,1983,5,38,0,0,1973,1978,
        3,166,83,0,1974,1975,5,12,0,0,1975,1977,3,166,83,0,1976,1974,1,0,
        0,0,1977,1980,1,0,0,0,1978,1976,1,0,0,0,1978,1979,1,0,0,0,1979,1984,
        1,0,0,0,1980,1978,1,0,0,0,1981,1984,3,276,138,0,1982,1984,5,117,
        0,0,1983,1973,1,0,0,0,1983,1981,1,0,0,0,1983,1982,1,0,0,0,1984,353,
        1,0,0,0,1985,1986,5,111,0,0,1986,355,1,0,0,0,1987,1988,5,112,0,0,
        1988,1989,3,110,55,0,1989,357,1,0,0,0,1990,1991,5,112,0,0,1991,1992,
        3,118,59,0,1992,359,1,0,0,0,1993,1994,5,51,0,0,1994,361,1,0,0,0,
        1995,2044,3,54,27,0,1996,2044,3,236,118,0,1997,2044,3,120,60,0,1998,
        2044,3,104,52,0,1999,2044,3,368,184,0,2000,2001,5,75,0,0,2001,2002,
        3,154,77,0,2002,2003,5,46,0,0,2003,2044,1,0,0,0,2004,2005,5,75,0,
        0,2005,2006,3,164,82,0,2006,2007,5,46,0,0,2007,2044,1,0,0,0,2008,
        2009,5,75,0,0,2009,2010,3,324,162,0,2010,2011,5,46,0,0,2011,2044,
        1,0,0,0,2012,2013,3,154,77,0,2013,2014,3,144,72,0,2014,2044,1,0,
        0,0,2015,2016,3,164,82,0,2016,2017,3,144,72,0,2017,2044,1,0,0,0,
        2018,2019,3,324,162,0,2019,2020,3,144,72,0,2020,2044,1,0,0,0,2021,
        2023,7,12,0,0,2022,2024,3,366,183,0,2023,2022,1,0,0,0,2023,2024,
        1,0,0,0,2024,2025,1,0,0,0,2025,2026,3,342,171,0,2026,2027,5,46,0,
        0,2027,2044,1,0,0,0,2028,2029,5,91,0,0,2029,2031,5,78,0,0,2030,2032,
        3,366,183,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,
        0,2033,2034,3,184,92,0,2034,2035,5,46,0,0,2035,2044,1,0,0,0,2036,
        2038,5,91,0,0,2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,2039,1,0,
        0,0,2039,2040,3,406,203,0,2040,2041,3,184,92,0,2041,2042,5,46,0,
        0,2042,2044,1,0,0,0,2043,1995,1,0,0,0,2043,1996,1,0,0,0,2043,1997,
        1,0,0,0,2043,1998,1,0,0,0,2043,1999,1,0,0,0,2043,2000,1,0,0,0,2043,
        2004,1,0,0,0,2043,2008,1,0,0,0,2043,2012,1,0,0,0,2043,2015,1,0,0,
        0,2043,2018,1,0,0,0,2043,2021,1,0,0,0,2043,2028,1,0,0,0,2043,2037,
        1,0,0,0,2044,363,1,0,0,0,2045,2046,5,114,0,0,2046,2056,3,36,18,0,
        2047,2049,3,274,137,0,2048,2047,1,0,0,0,2049,2050,1,0,0,0,2050,2048,
        1,0,0,0,2050,2051,1,0,0,0,2051,2053,1,0,0,0,2052,2054,3,130,65,0,
        2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2057,1,0,0,0,2055,2057,
        3,130,65,0,2056,2048,1,0,0,0,2056,2055,1,0,0,0,2057,365,1,0,0,0,
        2058,2060,3,156,78,0,2059,2061,5,41,0,0,2060,2059,1,0,0,0,2060,2061,
        1,0,0,0,2061,2064,1,0,0,0,2062,2064,3,382,191,0,2063,2058,1,0,0,
        0,2063,2062,1,0,0,0,2064,367,1,0,0,0,2065,2066,5,115,0,0,2066,2068,
        3,376,188,0,2067,2069,3,394,197,0,2068,2067,1,0,0,0,2068,2069,1,
        0,0,0,2069,2070,1,0,0,0,2070,2071,5,18,0,0,2071,2072,3,366,183,0,
        2072,2073,5,46,0,0,2073,2077,1,0,0,0,2074,2075,5,115,0,0,2075,2077,
        3,158,79,0,2076,2065,1,0,0,0,2076,2074,1,0,0,0,2077,369,1,0,0,0,
        2078,2079,5,20,0,0,2079,2080,3,378,189,0,2080,2081,5,19,0,0,2081,
        371,1,0,0,0,2082,2083,3,10,5,0,2083,2084,3,384,192,0,2084,373,1,
        0,0,0,2085,2086,3,366,183,0,2086,2087,3,166,83,0,2087,375,1,0,0,
        0,2088,2089,7,13,0,0,2089,377,1,0,0,0,2090,2095,3,366,183,0,2091,
        2092,5,5,0,0,2092,2094,3,366,183,0,2093,2091,1,0,0,0,2094,2097,1,
        0,0,0,2095,2093,1,0,0,0,2095,2096,1,0,0,0,2096,379,1,0,0,0,2097,
        2095,1,0,0,0,2098,2101,3,376,188,0,2099,2100,5,12,0,0,2100,2102,
        3,376,188,0,2101,2099,1,0,0,0,2101,2102,1,0,0,0,2102,381,1,0,0,0,
        2103,2106,5,117,0,0,2104,2106,3,388,194,0,2105,2103,1,0,0,0,2105,
        2104,1,0,0,0,2106,383,1,0,0,0,2107,2109,3,156,78,0,2108,2110,5,41,
        0,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,2113,1,0,0,0,2111,2113,
        3,388,194,0,2112,2107,1,0,0,0,2112,2111,1,0,0,0,2113,385,1,0,0,0,
        2114,2119,3,384,192,0,2115,2116,5,5,0,0,2116,2118,3,384,192,0,2117,
        2115,1,0,0,0,2118,2121,1,0,0,0,2119,2117,1,0,0,0,2119,2120,1,0,0,
        0,2120,387,1,0,0,0,2121,2119,1,0,0,0,2122,2124,3,380,190,0,2123,
        2125,3,370,185,0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,2125,2127,1,
        0,0,0,2126,2128,5,41,0,0,2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,
        2134,1,0,0,0,2129,2131,5,81,0,0,2130,2132,5,41,0,0,2131,2130,1,0,
        0,0,2131,2132,1,0,0,0,2132,2134,1,0,0,0,2133,2122,1,0,0,0,2133,2129,
        1,0,0,0,2134,389,1,0,0,0,2135,2140,3,388,194,0,2136,2137,5,5,0,0,
        2137,2139,3,388,194,0,2138,2136,1,0,0,0,2139,2142,1,0,0,0,2140,2138,
        1,0,0,0,2140,2141,1,0,0,0,2141,391,1,0,0,0,2142,2140,1,0,0,0,2143,
        2144,3,224,112,0,2144,2147,3,166,83,0,2145,2146,5,73,0,0,2146,2148,
        3,384,192,0,2147,2145,1,0,0,0,2147,2148,1,0,0,0,2148,393,1,0,0,0,
        2149,2150,5,20,0,0,2150,2155,3,392,196,0,2151,2152,5,5,0,0,2152,
        2154,3,392,196,0,2153,2151,1,0,0,0,2154,2157,1,0,0,0,2155,2153,1,
        0,0,0,2155,2156,1,0,0,0,2156,2158,1,0,0,0,2157,2155,1,0,0,0,2158,
        2159,5,19,0,0,2159,395,1,0,0,0,2160,2161,3,196,98,0,2161,2162,3,
        384,192,0,2162,397,1,0,0,0,2163,2164,3,300,150,0,2164,2165,3,398,
        199,0,2165,2178,1,0,0,0,2166,2178,3,24,12,0,2167,2178,3,296,148,
        0,2168,2171,3,230,115,0,2169,2171,3,360,180,0,2170,2168,1,0,0,0,
        2170,2169,1,0,0,0,2171,2172,1,0,0,0,2172,2173,5,108,0,0,2173,2178,
        1,0,0,0,2174,2175,3,180,90,0,2175,2176,3,16,8,0,2176,2178,1,0,0,
        0,2177,2163,1,0,0,0,2177,2166,1,0,0,0,2177,2167,1,0,0,0,2177,2170,
        1,0,0,0,2177,2174,1,0,0,0,2178,399,1,0,0,0,2179,2180,5,29,0,0,2180,
        2181,3,110,55,0,2181,2182,5,6,0,0,2182,2186,1,0,0,0,2183,2184,5,
        12,0,0,2184,2186,3,166,83,0,2185,2179,1,0,0,0,2185,2183,1,0,0,0,
        2186,401,1,0,0,0,2187,2188,3,344,172,0,2188,403,1,0,0,0,2189,2192,
        3,96,48,0,2190,2191,5,16,0,0,2191,2193,3,344,172,0,2192,2190,1,0,
        0,0,2192,2193,1,0,0,0,2193,405,1,0,0,0,2194,2197,5,116,0,0,2195,
        2197,3,366,183,0,2196,2194,1,0,0,0,2196,2195,1,0,0,0,2197,407,1,
        0,0,0,2198,2199,5,118,0,0,2199,2200,5,31,0,0,2200,2201,3,110,55,
        0,2201,2202,5,11,0,0,2202,2203,3,336,168,0,2203,409,1,0,0,0,2204,
        2205,5,120,0,0,2205,2206,5,52,0,0,2206,2207,3,110,55,0,2207,2208,
        5,46,0,0,2208,411,1,0,0,0,2209,2210,5,120,0,0,2210,2211,3,110,55,
        0,2211,2212,5,46,0,0,2212,413,1,0,0,0,257,420,429,431,440,448,451,
        454,461,463,474,477,490,500,505,512,523,530,538,540,549,557,559,
        566,574,576,586,600,613,619,621,628,635,640,645,648,651,659,665,
        669,677,683,689,711,719,725,748,750,761,768,773,783,785,790,792,
        797,799,803,809,815,822,827,836,841,847,851,855,864,869,871,874,
        882,892,896,901,916,924,931,935,948,952,960,966,977,986,990,1000,
        1004,1007,1017,1023,1030,1037,1039,1043,1050,1054,1058,1061,1064,
        1070,1080,1083,1087,1091,1102,1109,1123,1126,1131,1141,1145,1153,
        1157,1160,1166,1172,1176,1179,1182,1185,1190,1193,1198,1207,1215,
        1221,1226,1229,1241,1251,1258,1268,1272,1277,1281,1286,1296,1303,
        1309,1315,1320,1331,1339,1347,1358,1363,1369,1377,1386,1400,1403,
        1407,1418,1433,1441,1452,1460,1464,1468,1472,1476,1480,1487,1491,
        1500,1504,1507,1515,1531,1540,1542,1555,1559,1565,1575,1579,1606,
        1614,1621,1630,1637,1650,1654,1663,1666,1674,1678,1686,1690,1697,
        1712,1720,1728,1741,1752,1755,1762,1779,1791,1794,1806,1816,1822,
        1829,1838,1845,1848,1851,1855,1860,1872,1881,1883,1891,1895,1898,
        1908,1916,1928,1933,1935,1940,1943,1948,1964,1968,1978,1983,2023,
        2031,2037,2043,2050,2053,2056,2060,2063,2068,2076,2095,2101,2105,
        2109,2112,2119,2124,2127,2131,2133,2140,2147,2155,2170,2177,2185,
        2192,2196
    ]

class Dart2Parser ( Parser ):

    grammarFileName = "Dart2Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'&'", "'&&'", "'&='", "'@'", "','", "']'", 
                     "'}'", "'^'", "'^='", "':'", "')'", "'.'", "'..'", 
                     "'...'", "'...?'", "'=='", "'=>'", "'='", "'>'", "'<'", 
                     "'<='", "'<<'", "'<<='", "'-='", "'-'", "'--'", "'!='", 
                     "'!'", "'['", "'{'", "'('", "'|'", "'%'", "'%='", "'+'", 
                     "'+='", "'++'", "'#'", "'|='", "'||'", "'?'", "'?.'", 
                     "'?..'", "'??'", "'??='", "';'", "'/='", "'/'", "'~/'", 
                     "'~/='", "'~'", "'*'", "'*='", "'abstract'", "'as'", 
                     "'assert'", "'async'", "'await'", "'break'", "'case'", 
                     "'catch'", "'class'", "'const'", "'continue'", "'covariant'", 
                     "'default'", "'deferred'", "'do'", "'dynamic'", "'else'", 
                     "'enum'", "'export'", "'extends'", "'extension'", "'external'", 
                     "'factory'", "'false'", "'final'", "'finally'", "'for'", 
                     "'Function'", "'get'", "'gtilde'", "'hide'", "'if'", 
                     "'implements'", "'import'", "'in'", "'interface'", 
                     "'is'", "'late'", "'let'", "'library'", "'mixin'", 
                     "'native'", "'new'", "'null'", "'of'", "'on'", "'operator'", 
                     "'part'", "'required'", "'rethrow'", "'return'", "'set'", 
                     "'show'", "'static'", "'super'", "'switch'", "'sync'", 
                     "'this'", "'throw'", "'true'", "'try'", "'typedef'", 
                     "'var'", "'void'", "'while'", "'with'", "'yield'" ]

    symbolicNames = [ "<INVALID>", "A", "AA", "AE", "AT", "C", "CB", "CBC", 
                      "CIR", "CIRE", "CO", "CP", "D", "DD", "DDD", "DDDQ", 
                      "EE", "EG", "EQ", "GT", "LT", "LTE", "LTLT", "LTLTE", 
                      "ME", "MINUS", "MM", "NE", "NOT", "OB", "OBC", "OP", 
                      "P", "PC", "PE", "PL", "PLE", "PLPL", "PO", "POE", 
                      "PP", "QU", "QUD", "QUDD", "QUQU", "QUQUEQ", "SC", 
                      "SE", "SL", "SQS", "SQSE", "SQUIG", "ST", "STE", "ABSTRACT_", 
                      "AS_", "ASSERT_", "ASYNC_", "AWAIT_", "BREAK_", "CASE_", 
                      "CATCH_", "CLASS_", "CONST_", "CONTINUE_", "COVARIANT_", 
                      "DEFAULT_", "DEFERRED_", "DO_", "DYNAMIC_", "ELSE_", 
                      "ENUM_", "EXPORT_", "EXTENDS_", "EXTENSION_", "EXTERNAL_", 
                      "FACTORY_", "FALSE_", "FINAL_", "FINALLY_", "FOR_", 
                      "FUNCTION_", "GET_", "GTILDE_", "HIDE_", "IF_", "IMPLEMENTS_", 
                      "IMPORT_", "IN_", "INTERFACE_", "IS_", "LATE_", "LET_", 
                      "LIBRARY_", "MIXIN_", "NATIVE_", "NEW_", "NULL_", 
                      "OF_", "ON_", "OPERATOR_", "PART_", "REQUIRED_", "RETHROW_", 
                      "RETURN_", "SET_", "SHOW_", "STATIC_", "SUPER_", "SWITCH_", 
                      "SYNC_", "THIS_", "THROW_", "TRUE_", "TRY_", "TYPEDEF_", 
                      "VAR_", "VOID_", "WHILE_", "WITH_", "YIELD_", "NUMBER", 
                      "HEX_NUMBER", "SingleLineString", "MultiLineString", 
                      "IDENTIFIER", "WHITESPACE", "SINGLE_LINE_COMMENT", 
                      "MULTI_LINE_COMMENT" ]

    RULE_additiveExpression = 0
    RULE_additiveOperator = 1
    RULE_argumentList = 2
    RULE_argumentPart = 3
    RULE_arguments = 4
    RULE_asOperator = 5
    RULE_assertion = 6
    RULE_assertStatement = 7
    RULE_assignableExpression = 8
    RULE_assignableSelector = 9
    RULE_assignableSelectorPart = 10
    RULE_assignmentOperator = 11
    RULE_awaitExpression = 12
    RULE_binaryOperator = 13
    RULE_bitwiseAndExpression = 14
    RULE_bitwiseOperator = 15
    RULE_bitwiseOrExpression = 16
    RULE_bitwiseXorExpression = 17
    RULE_block = 18
    RULE_booleanLiteral = 19
    RULE_breakStatement = 20
    RULE_cascade = 21
    RULE_cascadeAssignment = 22
    RULE_cascadeSection = 23
    RULE_cascadeSectionTail = 24
    RULE_cascadeSelector = 25
    RULE_catchPart = 26
    RULE_classDeclaration = 27
    RULE_classMemberDeclaration = 28
    RULE_combinator = 29
    RULE_compilationUnit = 30
    RULE_compoundAssignmentOperator = 31
    RULE_conditionalExpression = 32
    RULE_configurableUri = 33
    RULE_configurationUri = 34
    RULE_constantConstructorSignature = 35
    RULE_constObjectExpression = 36
    RULE_constructorDesignation = 37
    RULE_constructorInvocation = 38
    RULE_constructorName = 39
    RULE_constructorSignature = 40
    RULE_continueStatement = 41
    RULE_declaration = 42
    RULE_declaredIdentifier = 43
    RULE_defaultCase = 44
    RULE_defaultFormalParameter = 45
    RULE_defaultNamedParameter = 46
    RULE_doStatement = 47
    RULE_dottedIdentifierList = 48
    RULE_element = 49
    RULE_elements = 50
    RULE_enumEntry = 51
    RULE_enumType = 52
    RULE_equalityExpression = 53
    RULE_equalityOperator = 54
    RULE_expr = 55
    RULE_expressionElement = 56
    RULE_expressionList = 57
    RULE_expressionStatement = 58
    RULE_expressionWithoutCascade = 59
    RULE_extensionDeclaration = 60
    RULE_factoryConstructorSignature = 61
    RULE_fieldFormalParameter = 62
    RULE_fieldInitializer = 63
    RULE_finalConstVarOrType = 64
    RULE_finallyPart = 65
    RULE_forElement = 66
    RULE_forInitializerStatement = 67
    RULE_forLoopParts = 68
    RULE_formalParameterList = 69
    RULE_formalParameterPart = 70
    RULE_forStatement = 71
    RULE_functionBody = 72
    RULE_functionExpression = 73
    RULE_functionExpressionBody = 74
    RULE_functionFormalParameter = 75
    RULE_functionPrefix = 76
    RULE_functionSignature = 77
    RULE_functionType = 78
    RULE_functionTypeAlias = 79
    RULE_functionTypeTail = 80
    RULE_functionTypeTails = 81
    RULE_getterSignature = 82
    RULE_identifier = 83
    RULE_identifierList = 84
    RULE_ifElement = 85
    RULE_ifNullExpression = 86
    RULE_ifStatement = 87
    RULE_importOrExport = 88
    RULE_importSpecification = 89
    RULE_incrementOperator = 90
    RULE_initializedIdentifier = 91
    RULE_initializedIdentifierList = 92
    RULE_initializedVariableDeclaration = 93
    RULE_initializerExpression = 94
    RULE_initializerListEntry = 95
    RULE_initializers = 96
    RULE_interfaces = 97
    RULE_isOperator = 98
    RULE_label = 99
    RULE_letExpression = 100
    RULE_libraryDeclaration = 101
    RULE_libraryExport = 102
    RULE_libraryImport = 103
    RULE_libraryName = 104
    RULE_listLiteral = 105
    RULE_literal = 106
    RULE_localFunctionDeclaration = 107
    RULE_localVariableDeclaration = 108
    RULE_logicalAndExpression = 109
    RULE_logicalOrExpression = 110
    RULE_mapElement = 111
    RULE_metadata = 112
    RULE_metadatum = 113
    RULE_methodSignature = 114
    RULE_minusOperator = 115
    RULE_mixinApplication = 116
    RULE_mixinApplicationClass = 117
    RULE_mixinDeclaration = 118
    RULE_mixins = 119
    RULE_multilineString = 120
    RULE_multiplicativeExpression = 121
    RULE_multiplicativeOperator = 122
    RULE_namedArgument = 123
    RULE_namedFormalParameters = 124
    RULE_namedParameterType = 125
    RULE_namedParameterTypes = 126
    RULE_negationOperator = 127
    RULE_newExpression = 128
    RULE_nonLabelledStatement = 129
    RULE_normalFormalParameter = 130
    RULE_normalFormalParameterNoMetadata = 131
    RULE_normalFormalParameters = 132
    RULE_normalParameterType = 133
    RULE_normalParameterTypes = 134
    RULE_nullLiteral = 135
    RULE_numericLiteral = 136
    RULE_onPart = 137
    RULE_operator = 138
    RULE_operatorSignature = 139
    RULE_optionalOrNamedFormalParameters = 140
    RULE_optionalParameterTypes = 141
    RULE_optionalPositionalFormalParameters = 142
    RULE_optionalPositionalParameterTypes = 143
    RULE_parameterTypeList = 144
    RULE_partDeclaration = 145
    RULE_partDirective = 146
    RULE_partHeader = 147
    RULE_postfixExpression = 148
    RULE_postfixOperator = 149
    RULE_prefixOperator = 150
    RULE_primary = 151
    RULE_qualifiedName = 152
    RULE_redirectingFactoryConstructorSignature = 153
    RULE_redirection = 154
    RULE_relationalExpression = 155
    RULE_relationalOperator = 156
    RULE_reserved_word = 157
    RULE_rethrowStatement = 158
    RULE_returnStatement = 159
    RULE_selector = 160
    RULE_setOrMapLiteral = 161
    RULE_setterSignature = 162
    RULE_shiftExpression = 163
    RULE_shiftOperator = 164
    RULE_simpleFormalParameter = 165
    RULE_singleLineString = 166
    RULE_spreadElement = 167
    RULE_statement = 168
    RULE_statements = 169
    RULE_staticFinalDeclaration = 170
    RULE_staticFinalDeclarationList = 171
    RULE_stringLiteral = 172
    RULE_superclass = 173
    RULE_switchCase = 174
    RULE_switchStatement = 175
    RULE_symbolLiteral = 176
    RULE_thisExpression = 177
    RULE_throwExpression = 178
    RULE_throwExpressionWithoutCascade = 179
    RULE_tildeOperator = 180
    RULE_topLevelDeclaration = 181
    RULE_tryStatement = 182
    RULE_type = 183
    RULE_typeAlias = 184
    RULE_typeArguments = 185
    RULE_typeCast = 186
    RULE_typedIdentifier = 187
    RULE_typeIdentifier = 188
    RULE_typeList = 189
    RULE_typeName = 190
    RULE_typeNotFunction = 191
    RULE_typeNotVoid = 192
    RULE_typeNotVoidList = 193
    RULE_typeNotVoidNotFunction = 194
    RULE_typeNotVoidNotFunctionList = 195
    RULE_typeParameter = 196
    RULE_typeParameters = 197
    RULE_typeTest = 198
    RULE_unaryExpression = 199
    RULE_unconditionalAssignableSelector = 200
    RULE_uri = 201
    RULE_uriTest = 202
    RULE_varOrType = 203
    RULE_whileStatement = 204
    RULE_yieldEachStatement = 205
    RULE_yieldStatement = 206

    ruleNames =  [ "additiveExpression", "additiveOperator", "argumentList", 
                   "argumentPart", "arguments", "asOperator", "assertion", 
                   "assertStatement", "assignableExpression", "assignableSelector", 
                   "assignableSelectorPart", "assignmentOperator", "awaitExpression", 
                   "binaryOperator", "bitwiseAndExpression", "bitwiseOperator", 
                   "bitwiseOrExpression", "bitwiseXorExpression", "block", 
                   "booleanLiteral", "breakStatement", "cascade", "cascadeAssignment", 
                   "cascadeSection", "cascadeSectionTail", "cascadeSelector", 
                   "catchPart", "classDeclaration", "classMemberDeclaration", 
                   "combinator", "compilationUnit", "compoundAssignmentOperator", 
                   "conditionalExpression", "configurableUri", "configurationUri", 
                   "constantConstructorSignature", "constObjectExpression", 
                   "constructorDesignation", "constructorInvocation", "constructorName", 
                   "constructorSignature", "continueStatement", "declaration", 
                   "declaredIdentifier", "defaultCase", "defaultFormalParameter", 
                   "defaultNamedParameter", "doStatement", "dottedIdentifierList", 
                   "element", "elements", "enumEntry", "enumType", "equalityExpression", 
                   "equalityOperator", "expr", "expressionElement", "expressionList", 
                   "expressionStatement", "expressionWithoutCascade", "extensionDeclaration", 
                   "factoryConstructorSignature", "fieldFormalParameter", 
                   "fieldInitializer", "finalConstVarOrType", "finallyPart", 
                   "forElement", "forInitializerStatement", "forLoopParts", 
                   "formalParameterList", "formalParameterPart", "forStatement", 
                   "functionBody", "functionExpression", "functionExpressionBody", 
                   "functionFormalParameter", "functionPrefix", "functionSignature", 
                   "functionType", "functionTypeAlias", "functionTypeTail", 
                   "functionTypeTails", "getterSignature", "identifier", 
                   "identifierList", "ifElement", "ifNullExpression", "ifStatement", 
                   "importOrExport", "importSpecification", "incrementOperator", 
                   "initializedIdentifier", "initializedIdentifierList", 
                   "initializedVariableDeclaration", "initializerExpression", 
                   "initializerListEntry", "initializers", "interfaces", 
                   "isOperator", "label", "letExpression", "libraryDeclaration", 
                   "libraryExport", "libraryImport", "libraryName", "listLiteral", 
                   "literal", "localFunctionDeclaration", "localVariableDeclaration", 
                   "logicalAndExpression", "logicalOrExpression", "mapElement", 
                   "metadata", "metadatum", "methodSignature", "minusOperator", 
                   "mixinApplication", "mixinApplicationClass", "mixinDeclaration", 
                   "mixins", "multilineString", "multiplicativeExpression", 
                   "multiplicativeOperator", "namedArgument", "namedFormalParameters", 
                   "namedParameterType", "namedParameterTypes", "negationOperator", 
                   "newExpression", "nonLabelledStatement", "normalFormalParameter", 
                   "normalFormalParameterNoMetadata", "normalFormalParameters", 
                   "normalParameterType", "normalParameterTypes", "nullLiteral", 
                   "numericLiteral", "onPart", "operator", "operatorSignature", 
                   "optionalOrNamedFormalParameters", "optionalParameterTypes", 
                   "optionalPositionalFormalParameters", "optionalPositionalParameterTypes", 
                   "parameterTypeList", "partDeclaration", "partDirective", 
                   "partHeader", "postfixExpression", "postfixOperator", 
                   "prefixOperator", "primary", "qualifiedName", "redirectingFactoryConstructorSignature", 
                   "redirection", "relationalExpression", "relationalOperator", 
                   "reserved_word", "rethrowStatement", "returnStatement", 
                   "selector", "setOrMapLiteral", "setterSignature", "shiftExpression", 
                   "shiftOperator", "simpleFormalParameter", "singleLineString", 
                   "spreadElement", "statement", "statements", "staticFinalDeclaration", 
                   "staticFinalDeclarationList", "stringLiteral", "superclass", 
                   "switchCase", "switchStatement", "symbolLiteral", "thisExpression", 
                   "throwExpression", "throwExpressionWithoutCascade", "tildeOperator", 
                   "topLevelDeclaration", "tryStatement", "type", "typeAlias", 
                   "typeArguments", "typeCast", "typedIdentifier", "typeIdentifier", 
                   "typeList", "typeName", "typeNotFunction", "typeNotVoid", 
                   "typeNotVoidList", "typeNotVoidNotFunction", "typeNotVoidNotFunctionList", 
                   "typeParameter", "typeParameters", "typeTest", "unaryExpression", 
                   "unconditionalAssignableSelector", "uri", "uriTest", 
                   "varOrType", "whileStatement", "yieldEachStatement", 
                   "yieldStatement" ]

    EOF = Token.EOF
    A=1
    AA=2
    AE=3
    AT=4
    C=5
    CB=6
    CBC=7
    CIR=8
    CIRE=9
    CO=10
    CP=11
    D=12
    DD=13
    DDD=14
    DDDQ=15
    EE=16
    EG=17
    EQ=18
    GT=19
    LT=20
    LTE=21
    LTLT=22
    LTLTE=23
    ME=24
    MINUS=25
    MM=26
    NE=27
    NOT=28
    OB=29
    OBC=30
    OP=31
    P=32
    PC=33
    PE=34
    PL=35
    PLE=36
    PLPL=37
    PO=38
    POE=39
    PP=40
    QU=41
    QUD=42
    QUDD=43
    QUQU=44
    QUQUEQ=45
    SC=46
    SE=47
    SL=48
    SQS=49
    SQSE=50
    SQUIG=51
    ST=52
    STE=53
    ABSTRACT_=54
    AS_=55
    ASSERT_=56
    ASYNC_=57
    AWAIT_=58
    BREAK_=59
    CASE_=60
    CATCH_=61
    CLASS_=62
    CONST_=63
    CONTINUE_=64
    COVARIANT_=65
    DEFAULT_=66
    DEFERRED_=67
    DO_=68
    DYNAMIC_=69
    ELSE_=70
    ENUM_=71
    EXPORT_=72
    EXTENDS_=73
    EXTENSION_=74
    EXTERNAL_=75
    FACTORY_=76
    FALSE_=77
    FINAL_=78
    FINALLY_=79
    FOR_=80
    FUNCTION_=81
    GET_=82
    GTILDE_=83
    HIDE_=84
    IF_=85
    IMPLEMENTS_=86
    IMPORT_=87
    IN_=88
    INTERFACE_=89
    IS_=90
    LATE_=91
    LET_=92
    LIBRARY_=93
    MIXIN_=94
    NATIVE_=95
    NEW_=96
    NULL_=97
    OF_=98
    ON_=99
    OPERATOR_=100
    PART_=101
    REQUIRED_=102
    RETHROW_=103
    RETURN_=104
    SET_=105
    SHOW_=106
    STATIC_=107
    SUPER_=108
    SWITCH_=109
    SYNC_=110
    THIS_=111
    THROW_=112
    TRUE_=113
    TRY_=114
    TYPEDEF_=115
    VAR_=116
    VOID_=117
    WHILE_=118
    WITH_=119
    YIELD_=120
    NUMBER=121
    HEX_NUMBER=122
    SingleLineString=123
    MultiLineString=124
    IDENTIFIER=125
    WHITESPACE=126
    SINGLE_LINE_COMMENT=127
    MULTI_LINE_COMMENT=128

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MultiplicativeExpressionContext,i)


        def additiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.AdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.AdditiveOperatorContext,i)


        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = Dart2Parser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_additiveExpression)
        try:
            self.state = 431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                self.multiplicativeExpression()
                self.state = 420
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 415
                        self.additiveOperator()
                        self.state = 416
                        self.multiplicativeExpression() 
                    self.state = 422
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                self.match(Dart2Parser.SUPER_)
                self.state = 427 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 424
                        self.additiveOperator()
                        self.state = 425
                        self.multiplicativeExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 429 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PL(self):
            return self.getToken(Dart2Parser.PL, 0)

        def MINUS(self):
            return self.getToken(Dart2Parser.MINUS, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_additiveOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperator" ):
                listener.enterAdditiveOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperator" ):
                listener.exitAdditiveOperator(self)




    def additiveOperator(self):

        localctx = Dart2Parser.AdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_additiveOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            _la = self._input.LA(1)
            if not(_la==25 or _la==35):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.NamedArgumentContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.NamedArgumentContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def expressionList(self):
            return self.getTypedRuleContext(Dart2Parser.ExpressionListContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)




    def argumentList(self):

        localctx = Dart2Parser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_argumentList)
        try:
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 435
                self.namedArgument()
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 436
                        self.match(Dart2Parser.C)
                        self.state = 437
                        self.namedArgument() 
                    self.state = 442
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.expressionList()
                self.state = 448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 444
                        self.match(Dart2Parser.C)
                        self.state = 445
                        self.namedArgument() 
                    self.state = 450
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentsContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(Dart2Parser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_argumentPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentPart" ):
                listener.enterArgumentPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentPart" ):
                listener.exitArgumentPart(self)




    def argumentPart(self):

        localctx = Dart2Parser.ArgumentPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_argumentPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 453
                self.typeArguments()


            self.state = 456
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def argumentList(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentListContext,0)


        def C(self):
            return self.getToken(Dart2Parser.C, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = Dart2Parser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(Dart2Parser.OP)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8734731060839972864) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2271484645057699477) != 0):
                self.state = 459
                self.argumentList()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 460
                    self.match(Dart2Parser.C)




            self.state = 465
            self.match(Dart2Parser.CP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS_(self):
            return self.getToken(Dart2Parser.AS_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_asOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsOperator" ):
                listener.enterAsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsOperator" ):
                listener.exitAsOperator(self)




    def asOperator(self):

        localctx = Dart2Parser.AsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_asOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(Dart2Parser.AS_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT_(self):
            return self.getToken(Dart2Parser.ASSERT_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ExprContext,i)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_assertion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertion" ):
                listener.enterAssertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertion" ):
                listener.exitAssertion(self)




    def assertion(self):

        localctx = Dart2Parser.AssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_assertion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(Dart2Parser.ASSERT_)
            self.state = 470
            self.match(Dart2Parser.OP)
            self.state = 471
            self.expr()
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 472
                self.match(Dart2Parser.C)
                self.state = 473
                self.expr()


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 476
                self.match(Dart2Parser.C)


            self.state = 479
            self.match(Dart2Parser.CP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assertion(self):
            return self.getTypedRuleContext(Dart2Parser.AssertionContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_assertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStatement" ):
                listener.enterAssertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStatement" ):
                listener.exitAssertStatement(self)




    def assertStatement(self):

        localctx = Dart2Parser.AssertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_assertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.assertion()
            self.state = 482
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(Dart2Parser.PrimaryContext,0)


        def assignableSelectorPart(self):
            return self.getTypedRuleContext(Dart2Parser.AssignableSelectorPartContext,0)


        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def unconditionalAssignableSelector(self):
            return self.getTypedRuleContext(Dart2Parser.UnconditionalAssignableSelectorContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_assignableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableExpression" ):
                listener.enterAssignableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableExpression" ):
                listener.exitAssignableExpression(self)




    def assignableExpression(self):

        localctx = Dart2Parser.AssignableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_assignableExpression)
        try:
            self.state = 490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 484
                self.primary()
                self.state = 485
                self.assignableSelectorPart()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.match(Dart2Parser.SUPER_)
                self.state = 488
                self.unconditionalAssignableSelector()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unconditionalAssignableSelector(self):
            return self.getTypedRuleContext(Dart2Parser.UnconditionalAssignableSelectorContext,0)


        def QUD(self):
            return self.getToken(Dart2Parser.QUD, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def QU(self):
            return self.getToken(Dart2Parser.QU, 0)

        def OB(self):
            return self.getToken(Dart2Parser.OB, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CB(self):
            return self.getToken(Dart2Parser.CB, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_assignableSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableSelector" ):
                listener.enterAssignableSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableSelector" ):
                listener.exitAssignableSelector(self)




    def assignableSelector(self):

        localctx = Dart2Parser.AssignableSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_assignableSelector)
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 492
                self.unconditionalAssignableSelector()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.match(Dart2Parser.QUD)
                self.state = 494
                self.identifier()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 495
                self.match(Dart2Parser.QU)
                self.state = 496
                self.match(Dart2Parser.OB)
                self.state = 497
                self.expr()
                self.state = 498
                self.match(Dart2Parser.CB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignableSelectorPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignableSelector(self):
            return self.getTypedRuleContext(Dart2Parser.AssignableSelectorContext,0)


        def selector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.SelectorContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.SelectorContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_assignableSelectorPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignableSelectorPart" ):
                listener.enterAssignableSelectorPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignableSelectorPart" ):
                listener.exitAssignableSelectorPart(self)




    def assignableSelectorPart(self):

        localctx = Dart2Parser.AssignableSelectorPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_assignableSelectorPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 502
                    self.selector() 
                self.state = 507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 508
            self.assignableSelector()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def compoundAssignmentOperator(self):
            return self.getTypedRuleContext(Dart2Parser.CompoundAssignmentOperatorContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = Dart2Parser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignmentOperator)
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.match(Dart2Parser.EQ)
                pass
            elif token in [3, 9, 19, 23, 24, 34, 36, 39, 45, 47, 50, 53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.compoundAssignmentOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AwaitExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT_(self):
            return self.getToken(Dart2Parser.AWAIT_, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Dart2Parser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_awaitExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAwaitExpression" ):
                listener.enterAwaitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAwaitExpression" ):
                listener.exitAwaitExpression(self)




    def awaitExpression(self):

        localctx = Dart2Parser.AwaitExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_awaitExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(Dart2Parser.AWAIT_)
            self.state = 515
            self.unaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeOperator(self):
            return self.getTypedRuleContext(Dart2Parser.MultiplicativeOperatorContext,0)


        def additiveOperator(self):
            return self.getTypedRuleContext(Dart2Parser.AdditiveOperatorContext,0)


        def shiftOperator(self):
            return self.getTypedRuleContext(Dart2Parser.ShiftOperatorContext,0)


        def relationalOperator(self):
            return self.getTypedRuleContext(Dart2Parser.RelationalOperatorContext,0)


        def EE(self):
            return self.getToken(Dart2Parser.EE, 0)

        def bitwiseOperator(self):
            return self.getTypedRuleContext(Dart2Parser.BitwiseOperatorContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_binaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOperator" ):
                listener.enterBinaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOperator" ):
                listener.exitBinaryOperator(self)




    def binaryOperator(self):

        localctx = Dart2Parser.BinaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_binaryOperator)
        try:
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.multiplicativeOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.additiveOperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 519
                self.shiftOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 520
                self.relationalOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 521
                self.match(Dart2Parser.EE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 522
                self.bitwiseOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ShiftExpressionContext,i)


        def A(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.A)
            else:
                return self.getToken(Dart2Parser.A, i)

        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_bitwiseAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseAndExpression" ):
                listener.enterBitwiseAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseAndExpression" ):
                listener.exitBitwiseAndExpression(self)




    def bitwiseAndExpression(self):

        localctx = Dart2Parser.BitwiseAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_bitwiseAndExpression)
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.shiftExpression()
                self.state = 530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 526
                        self.match(Dart2Parser.A)
                        self.state = 527
                        self.shiftExpression() 
                    self.state = 532
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.match(Dart2Parser.SUPER_)
                self.state = 536 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 534
                        self.match(Dart2Parser.A)
                        self.state = 535
                        self.shiftExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 538 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def A(self):
            return self.getToken(Dart2Parser.A, 0)

        def CIR(self):
            return self.getToken(Dart2Parser.CIR, 0)

        def P(self):
            return self.getToken(Dart2Parser.P, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_bitwiseOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseOperator" ):
                listener.enterBitwiseOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseOperator" ):
                listener.exitBitwiseOperator(self)




    def bitwiseOperator(self):

        localctx = Dart2Parser.BitwiseOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_bitwiseOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4294967554) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseXorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.BitwiseXorExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.BitwiseXorExpressionContext,i)


        def P(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.P)
            else:
                return self.getToken(Dart2Parser.P, i)

        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_bitwiseOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseOrExpression" ):
                listener.enterBitwiseOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseOrExpression" ):
                listener.exitBitwiseOrExpression(self)




    def bitwiseOrExpression(self):

        localctx = Dart2Parser.BitwiseOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_bitwiseOrExpression)
        try:
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.bitwiseXorExpression()
                self.state = 549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 545
                        self.match(Dart2Parser.P)
                        self.state = 546
                        self.bitwiseXorExpression() 
                    self.state = 551
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self.match(Dart2Parser.SUPER_)
                self.state = 555 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 553
                        self.match(Dart2Parser.P)
                        self.state = 554
                        self.bitwiseXorExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 557 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseXorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.BitwiseAndExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.BitwiseAndExpressionContext,i)


        def CIR(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.CIR)
            else:
                return self.getToken(Dart2Parser.CIR, i)

        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_bitwiseXorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseXorExpression" ):
                listener.enterBitwiseXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseXorExpression" ):
                listener.exitBitwiseXorExpression(self)




    def bitwiseXorExpression(self):

        localctx = Dart2Parser.BitwiseXorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_bitwiseXorExpression)
        try:
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 561
                self.bitwiseAndExpression()
                self.state = 566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 562
                        self.match(Dart2Parser.CIR)
                        self.state = 563
                        self.bitwiseAndExpression() 
                    self.state = 568
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.match(Dart2Parser.SUPER_)
                self.state = 572 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 570
                        self.match(Dart2Parser.CIR)
                        self.state = 571
                        self.bitwiseAndExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 574 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def statements(self):
            return self.getTypedRuleContext(Dart2Parser.StatementsContext,0)


        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = Dart2Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(Dart2Parser.OBC)
            self.state = 579
            self.statements()
            self.state = 580
            self.match(Dart2Parser.CBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_(self):
            return self.getToken(Dart2Parser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(Dart2Parser.FALSE_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = Dart2Parser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            _la = self._input.LA(1)
            if not(_la==77 or _la==113):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK_(self):
            return self.getToken(Dart2Parser.BREAK_, 0)

        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = Dart2Parser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_breakStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(Dart2Parser.BREAK_)
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 486388759756013568) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1190119350744059541) != 0):
                self.state = 585
                self.identifier()


            self.state = 588
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CascadeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(Dart2Parser.ConditionalExpressionContext,0)


        def cascadeSection(self):
            return self.getTypedRuleContext(Dart2Parser.CascadeSectionContext,0)


        def QUDD(self):
            return self.getToken(Dart2Parser.QUDD, 0)

        def DD(self):
            return self.getToken(Dart2Parser.DD, 0)

        def cascade(self):
            return self.getTypedRuleContext(Dart2Parser.CascadeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_cascade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCascade" ):
                listener.enterCascade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCascade" ):
                listener.exitCascade(self)



    def cascade(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Dart2Parser.CascadeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_cascade, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.conditionalExpression()
            self.state = 592
            _la = self._input.LA(1)
            if not(_la==13 or _la==43):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 593
            self.cascadeSection()
            self._ctx.stop = self._input.LT(-1)
            self.state = 600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Dart2Parser.CascadeContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_cascade)
                    self.state = 595
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 596
                    self.match(Dart2Parser.DD)
                    self.state = 597
                    self.cascadeSection() 
                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CascadeAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentOperator(self):
            return self.getTypedRuleContext(Dart2Parser.AssignmentOperatorContext,0)


        def expressionWithoutCascade(self):
            return self.getTypedRuleContext(Dart2Parser.ExpressionWithoutCascadeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_cascadeAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCascadeAssignment" ):
                listener.enterCascadeAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCascadeAssignment" ):
                listener.exitCascadeAssignment(self)




    def cascadeAssignment(self):

        localctx = Dart2Parser.CascadeAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_cascadeAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.assignmentOperator()
            self.state = 604
            self.expressionWithoutCascade()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CascadeSectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cascadeSelector(self):
            return self.getTypedRuleContext(Dart2Parser.CascadeSelectorContext,0)


        def cascadeSectionTail(self):
            return self.getTypedRuleContext(Dart2Parser.CascadeSectionTailContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_cascadeSection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCascadeSection" ):
                listener.enterCascadeSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCascadeSection" ):
                listener.exitCascadeSection(self)




    def cascadeSection(self):

        localctx = Dart2Parser.CascadeSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_cascadeSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.cascadeSelector()
            self.state = 607
            self.cascadeSectionTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CascadeSectionTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cascadeAssignment(self):
            return self.getTypedRuleContext(Dart2Parser.CascadeAssignmentContext,0)


        def selector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.SelectorContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.SelectorContext,i)


        def assignableSelector(self):
            return self.getTypedRuleContext(Dart2Parser.AssignableSelectorContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_cascadeSectionTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCascadeSectionTail" ):
                listener.enterCascadeSectionTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCascadeSectionTail" ):
                listener.exitCascadeSectionTail(self)




    def cascadeSectionTail(self):

        localctx = Dart2Parser.CascadeSectionTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_cascadeSectionTail)
        try:
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.cascadeAssignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 610
                        self.selector() 
                    self.state = 615
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 616
                    self.assignableSelector()
                    self.state = 617
                    self.cascadeAssignment()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CascadeSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OB(self):
            return self.getToken(Dart2Parser.OB, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CB(self):
            return self.getToken(Dart2Parser.CB, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_cascadeSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCascadeSelector" ):
                listener.enterCascadeSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCascadeSelector" ):
                listener.exitCascadeSelector(self)




    def cascadeSelector(self):

        localctx = Dart2Parser.CascadeSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cascadeSelector)
        try:
            self.state = 628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 623
                self.match(Dart2Parser.OB)
                self.state = 624
                self.expr()
                self.state = 625
                self.match(Dart2Parser.CB)
                pass
            elif token in [54, 55, 57, 58, 65, 67, 69, 72, 74, 75, 76, 81, 82, 84, 86, 87, 89, 91, 93, 94, 95, 98, 99, 100, 101, 102, 105, 106, 107, 110, 115, 120, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH_(self):
            return self.getToken(Dart2Parser.CATCH_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.IdentifierContext,i)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def C(self):
            return self.getToken(Dart2Parser.C, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_catchPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchPart" ):
                listener.enterCatchPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchPart" ):
                listener.exitCatchPart(self)




    def catchPart(self):

        localctx = Dart2Parser.CatchPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_catchPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(Dart2Parser.CATCH_)
            self.state = 631
            self.match(Dart2Parser.OP)
            self.state = 632
            self.identifier()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 633
                self.match(Dart2Parser.C)
                self.state = 634
                self.identifier()


            self.state = 637
            self.match(Dart2Parser.CP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_(self):
            return self.getToken(Dart2Parser.CLASS_, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.TypeIdentifierContext,0)


        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def ABSTRACT_(self):
            return self.getToken(Dart2Parser.ABSTRACT_, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(Dart2Parser.TypeParametersContext,0)


        def superclass(self):
            return self.getTypedRuleContext(Dart2Parser.SuperclassContext,0)


        def interfaces(self):
            return self.getTypedRuleContext(Dart2Parser.InterfacesContext,0)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MetadataContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MetadataContext,i)


        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ClassMemberDeclarationContext,i)


        def mixinApplicationClass(self):
            return self.getTypedRuleContext(Dart2Parser.MixinApplicationClassContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = Dart2Parser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 639
                    self.match(Dart2Parser.ABSTRACT_)


                self.state = 642
                self.match(Dart2Parser.CLASS_)
                self.state = 643
                self.typeIdentifier()
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 644
                    self.typeParameters()


                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73 or _la==119:
                    self.state = 647
                    self.superclass()


                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 650
                    self.interfaces()


                self.state = 653
                self.match(Dart2Parser.OBC)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8736983277098762224) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1196874750185123477) != 0):
                    self.state = 654
                    self.metadata()
                    self.state = 655
                    self.classMemberDeclaration()
                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 662
                self.match(Dart2Parser.CBC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 664
                    self.match(Dart2Parser.ABSTRACT_)


                self.state = 667
                self.match(Dart2Parser.CLASS_)
                self.state = 668
                self.mixinApplicationClass()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(Dart2Parser.DeclarationContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def methodSignature(self):
            return self.getTypedRuleContext(Dart2Parser.MethodSignatureContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)




    def classMemberDeclaration(self):

        localctx = Dart2Parser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_classMemberDeclaration)
        try:
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.declaration()
                self.state = 672
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.methodSignature()
                self.state = 675
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CombinatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_(self):
            return self.getToken(Dart2Parser.SHOW_, 0)

        def identifierList(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierListContext,0)


        def HIDE_(self):
            return self.getToken(Dart2Parser.HIDE_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_combinator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCombinator" ):
                listener.enterCombinator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCombinator" ):
                listener.exitCombinator(self)




    def combinator(self):

        localctx = Dart2Parser.CombinatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_combinator)
        try:
            self.state = 683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.match(Dart2Parser.SHOW_)
                self.state = 680
                self.identifierList()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.match(Dart2Parser.HIDE_)
                self.state = 682
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Dart2Parser.EOF, 0)

        def libraryDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.LibraryDeclarationContext,0)


        def partDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.PartDeclarationContext,0)


        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def statement(self):
            return self.getTypedRuleContext(Dart2Parser.StatementContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = Dart2Parser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_compilationUnit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 685
                self.libraryDeclaration()
                pass

            elif la_ == 2:
                self.state = 686
                self.partDeclaration()
                pass

            elif la_ == 3:
                self.state = 687
                self.expr()
                pass

            elif la_ == 4:
                self.state = 688
                self.statement()
                pass


            self.state = 691
            self.match(Dart2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STE(self):
            return self.getToken(Dart2Parser.STE, 0)

        def SE(self):
            return self.getToken(Dart2Parser.SE, 0)

        def SQSE(self):
            return self.getToken(Dart2Parser.SQSE, 0)

        def PE(self):
            return self.getToken(Dart2Parser.PE, 0)

        def PLE(self):
            return self.getToken(Dart2Parser.PLE, 0)

        def ME(self):
            return self.getToken(Dart2Parser.ME, 0)

        def LTLTE(self):
            return self.getToken(Dart2Parser.LTLTE, 0)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.GT)
            else:
                return self.getToken(Dart2Parser.GT, i)

        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def AE(self):
            return self.getToken(Dart2Parser.AE, 0)

        def CIRE(self):
            return self.getToken(Dart2Parser.CIRE, 0)

        def POE(self):
            return self.getToken(Dart2Parser.POE, 0)

        def QUQUEQ(self):
            return self.getToken(Dart2Parser.QUQUEQ, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_compoundAssignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignmentOperator" ):
                listener.enterCompoundAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignmentOperator" ):
                listener.exitCompoundAssignmentOperator(self)




    def compoundAssignmentOperator(self):

        localctx = Dart2Parser.CompoundAssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_compoundAssignmentOperator)
        try:
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.match(Dart2Parser.STE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.match(Dart2Parser.SE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 695
                self.match(Dart2Parser.SQSE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 696
                self.match(Dart2Parser.PE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 697
                self.match(Dart2Parser.PLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 698
                self.match(Dart2Parser.ME)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 699
                self.match(Dart2Parser.LTLTE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 700
                self.match(Dart2Parser.GT)
                self.state = 701
                self.match(Dart2Parser.GT)
                self.state = 702
                self.match(Dart2Parser.GT)
                self.state = 703
                self.match(Dart2Parser.EQ)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 704
                self.match(Dart2Parser.GT)
                self.state = 705
                self.match(Dart2Parser.GT)
                self.state = 706
                self.match(Dart2Parser.EQ)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 707
                self.match(Dart2Parser.AE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 708
                self.match(Dart2Parser.CIRE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 709
                self.match(Dart2Parser.POE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 710
                self.match(Dart2Parser.QUQUEQ)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifNullExpression(self):
            return self.getTypedRuleContext(Dart2Parser.IfNullExpressionContext,0)


        def QU(self):
            return self.getToken(Dart2Parser.QU, 0)

        def expressionWithoutCascade(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ExpressionWithoutCascadeContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ExpressionWithoutCascadeContext,i)


        def CO(self):
            return self.getToken(Dart2Parser.CO, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = Dart2Parser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.ifNullExpression()
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 714
                self.match(Dart2Parser.QU)
                self.state = 715
                self.expressionWithoutCascade()
                self.state = 716
                self.match(Dart2Parser.CO)
                self.state = 717
                self.expressionWithoutCascade()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigurableUriContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uri(self):
            return self.getTypedRuleContext(Dart2Parser.UriContext,0)


        def configurationUri(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ConfigurationUriContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ConfigurationUriContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_configurableUri

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigurableUri" ):
                listener.enterConfigurableUri(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigurableUri" ):
                listener.exitConfigurableUri(self)




    def configurableUri(self):

        localctx = Dart2Parser.ConfigurableUriContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_configurableUri)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.uri()
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 722
                self.configurationUri()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigurationUriContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_(self):
            return self.getToken(Dart2Parser.IF_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def uriTest(self):
            return self.getTypedRuleContext(Dart2Parser.UriTestContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def uri(self):
            return self.getTypedRuleContext(Dart2Parser.UriContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_configurationUri

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigurationUri" ):
                listener.enterConfigurationUri(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigurationUri" ):
                listener.exitConfigurationUri(self)




    def configurationUri(self):

        localctx = Dart2Parser.ConfigurationUriContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_configurationUri)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(Dart2Parser.IF_)
            self.state = 729
            self.match(Dart2Parser.OP)
            self.state = 730
            self.uriTest()
            self.state = 731
            self.match(Dart2Parser.CP)
            self.state = 732
            self.uri()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantConstructorSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def constructorName(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorNameContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_constantConstructorSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantConstructorSignature" ):
                listener.enterConstantConstructorSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantConstructorSignature" ):
                listener.exitConstantConstructorSignature(self)




    def constantConstructorSignature(self):

        localctx = Dart2Parser.ConstantConstructorSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_constantConstructorSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(Dart2Parser.CONST_)
            self.state = 735
            self.constructorName()
            self.state = 736
            self.formalParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstObjectExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def constructorDesignation(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorDesignationContext,0)


        def arguments(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentsContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_constObjectExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstObjectExpression" ):
                listener.enterConstObjectExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstObjectExpression" ):
                listener.exitConstObjectExpression(self)




    def constObjectExpression(self):

        localctx = Dart2Parser.ConstObjectExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_constObjectExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(Dart2Parser.CONST_)
            self.state = 739
            self.constructorDesignation()
            self.state = 740
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.TypeIdentifierContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(Dart2Parser.QualifiedNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNameContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(Dart2Parser.TypeArgumentsContext,0)


        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_constructorDesignation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDesignation" ):
                listener.enterConstructorDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDesignation" ):
                listener.exitConstructorDesignation(self)




    def constructorDesignation(self):

        localctx = Dart2Parser.ConstructorDesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_constructorDesignation)
        self._la = 0 # Token type
        try:
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.typeIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.qualifiedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.typeName()
                self.state = 745
                self.typeArguments()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 746
                    self.match(Dart2Parser.D)
                    self.state = 747
                    self.identifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNameContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(Dart2Parser.TypeArgumentsContext,0)


        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentsContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_constructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInvocation" ):
                listener.enterConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInvocation" ):
                listener.exitConstructorInvocation(self)




    def constructorInvocation(self):

        localctx = Dart2Parser.ConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_constructorInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.typeName()
            self.state = 753
            self.typeArguments()
            self.state = 754
            self.match(Dart2Parser.D)
            self.state = 755
            self.identifier()
            self.state = 756
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.TypeIdentifierContext,0)


        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_constructorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorName" ):
                listener.enterConstructorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorName" ):
                listener.exitConstructorName(self)




    def constructorName(self):

        localctx = Dart2Parser.ConstructorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_constructorName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.typeIdentifier()
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 759
                self.match(Dart2Parser.D)
                self.state = 760
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorName(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorNameContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_constructorSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorSignature" ):
                listener.enterConstructorSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorSignature" ):
                listener.exitConstructorSignature(self)




    def constructorSignature(self):

        localctx = Dart2Parser.ConstructorSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_constructorSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.constructorName()
            self.state = 764
            self.formalParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE_(self):
            return self.getToken(Dart2Parser.CONTINUE_, 0)

        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = Dart2Parser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_continueStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(Dart2Parser.CONTINUE_)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 486388759756013568) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1190119350744059541) != 0):
                self.state = 767
                self.identifier()


            self.state = 770
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL_(self):
            return self.getToken(Dart2Parser.EXTERNAL_, 0)

        def factoryConstructorSignature(self):
            return self.getTypedRuleContext(Dart2Parser.FactoryConstructorSignatureContext,0)


        def constantConstructorSignature(self):
            return self.getTypedRuleContext(Dart2Parser.ConstantConstructorSignatureContext,0)


        def constructorSignature(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorSignatureContext,0)


        def getterSignature(self):
            return self.getTypedRuleContext(Dart2Parser.GetterSignatureContext,0)


        def setterSignature(self):
            return self.getTypedRuleContext(Dart2Parser.SetterSignatureContext,0)


        def functionSignature(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionSignatureContext,0)


        def operatorSignature(self):
            return self.getTypedRuleContext(Dart2Parser.OperatorSignatureContext,0)


        def STATIC_(self):
            return self.getToken(Dart2Parser.STATIC_, 0)

        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def staticFinalDeclarationList(self):
            return self.getTypedRuleContext(Dart2Parser.StaticFinalDeclarationListContext,0)


        def FINAL_(self):
            return self.getToken(Dart2Parser.FINAL_, 0)

        def LATE_(self):
            return self.getToken(Dart2Parser.LATE_, 0)

        def initializedIdentifierList(self):
            return self.getTypedRuleContext(Dart2Parser.InitializedIdentifierListContext,0)


        def varOrType(self):
            return self.getTypedRuleContext(Dart2Parser.VarOrTypeContext,0)


        def COVARIANT_(self):
            return self.getToken(Dart2Parser.COVARIANT_, 0)

        def identifierList(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierListContext,0)


        def redirectingFactoryConstructorSignature(self):
            return self.getTypedRuleContext(Dart2Parser.RedirectingFactoryConstructorSignatureContext,0)


        def ABSTRACT_(self):
            return self.getToken(Dart2Parser.ABSTRACT_, 0)

        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def redirection(self):
            return self.getTypedRuleContext(Dart2Parser.RedirectionContext,0)


        def initializers(self):
            return self.getTypedRuleContext(Dart2Parser.InitializersContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = Dart2Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 772
                self.match(Dart2Parser.ABSTRACT_)


            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 775
                self.match(Dart2Parser.EXTERNAL_)
                self.state = 776
                self.factoryConstructorSignature()
                pass

            elif la_ == 2:
                self.state = 777
                self.match(Dart2Parser.EXTERNAL_)
                self.state = 778
                self.constantConstructorSignature()
                pass

            elif la_ == 3:
                self.state = 779
                self.match(Dart2Parser.EXTERNAL_)
                self.state = 780
                self.constructorSignature()
                pass

            elif la_ == 4:
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 781
                    self.match(Dart2Parser.EXTERNAL_)
                    self.state = 783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==107:
                        self.state = 782
                        self.match(Dart2Parser.STATIC_)




                self.state = 787
                self.getterSignature()
                pass

            elif la_ == 5:
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 788
                    self.match(Dart2Parser.EXTERNAL_)
                    self.state = 790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==107:
                        self.state = 789
                        self.match(Dart2Parser.STATIC_)




                self.state = 794
                self.setterSignature()
                pass

            elif la_ == 6:
                self.state = 799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 795
                    self.match(Dart2Parser.EXTERNAL_)
                    self.state = 797
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                    if la_ == 1:
                        self.state = 796
                        self.match(Dart2Parser.STATIC_)




                self.state = 801
                self.functionSignature()
                pass

            elif la_ == 7:
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 802
                    self.match(Dart2Parser.EXTERNAL_)


                self.state = 805
                self.operatorSignature()
                pass

            elif la_ == 8:
                self.state = 806
                self.match(Dart2Parser.STATIC_)
                self.state = 807
                self.match(Dart2Parser.CONST_)
                self.state = 809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 808
                    self.type_()


                self.state = 811
                self.staticFinalDeclarationList()
                pass

            elif la_ == 9:
                self.state = 812
                self.match(Dart2Parser.STATIC_)
                self.state = 813
                self.match(Dart2Parser.FINAL_)
                self.state = 815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 814
                    self.type_()


                self.state = 817
                self.staticFinalDeclarationList()
                pass

            elif la_ == 10:
                self.state = 818
                self.match(Dart2Parser.STATIC_)
                self.state = 819
                self.match(Dart2Parser.LATE_)
                self.state = 820
                self.match(Dart2Parser.FINAL_)
                self.state = 822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 821
                    self.type_()


                self.state = 824
                self.initializedIdentifierList()
                pass

            elif la_ == 11:
                self.state = 825
                self.match(Dart2Parser.STATIC_)
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 826
                    self.match(Dart2Parser.LATE_)


                self.state = 829
                self.varOrType()
                self.state = 830
                self.initializedIdentifierList()
                pass

            elif la_ == 12:
                self.state = 832
                self.match(Dart2Parser.COVARIANT_)
                self.state = 833
                self.match(Dart2Parser.LATE_)
                self.state = 834
                self.match(Dart2Parser.FINAL_)
                self.state = 836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 835
                    self.type_()


                self.state = 838
                self.identifierList()
                pass

            elif la_ == 13:
                self.state = 839
                self.match(Dart2Parser.COVARIANT_)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 840
                    self.match(Dart2Parser.LATE_)


                self.state = 843
                self.varOrType()
                self.state = 844
                self.initializedIdentifierList()
                pass

            elif la_ == 14:
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 846
                    self.match(Dart2Parser.LATE_)


                self.state = 849
                self.match(Dart2Parser.FINAL_)
                self.state = 851
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 850
                    self.type_()


                self.state = 853
                self.initializedIdentifierList()
                pass

            elif la_ == 15:
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 854
                    self.match(Dart2Parser.LATE_)


                self.state = 857
                self.varOrType()
                self.state = 858
                self.initializedIdentifierList()
                pass

            elif la_ == 16:
                self.state = 860
                self.redirectingFactoryConstructorSignature()
                pass

            elif la_ == 17:
                self.state = 861
                self.constantConstructorSignature()
                self.state = 864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 862
                    self.redirection()

                elif la_ == 2:
                    self.state = 863
                    self.initializers()


                pass

            elif la_ == 18:
                self.state = 866
                self.constructorSignature()
                self.state = 869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 867
                    self.redirection()

                elif la_ == 2:
                    self.state = 868
                    self.initializers()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaredIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def finalConstVarOrType(self):
            return self.getTypedRuleContext(Dart2Parser.FinalConstVarOrTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def COVARIANT_(self):
            return self.getToken(Dart2Parser.COVARIANT_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_declaredIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaredIdentifier" ):
                listener.enterDeclaredIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaredIdentifier" ):
                listener.exitDeclaredIdentifier(self)




    def declaredIdentifier(self):

        localctx = Dart2Parser.DeclaredIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_declaredIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 873
                self.match(Dart2Parser.COVARIANT_)


            self.state = 876
            self.finalConstVarOrType()
            self.state = 877
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_(self):
            return self.getToken(Dart2Parser.DEFAULT_, 0)

        def CO(self):
            return self.getToken(Dart2Parser.CO, 0)

        def statements(self):
            return self.getTypedRuleContext(Dart2Parser.StatementsContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.LabelContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.LabelContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_defaultCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultCase" ):
                listener.enterDefaultCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultCase" ):
                listener.exitDefaultCase(self)




    def defaultCase(self):

        localctx = Dart2Parser.DefaultCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_defaultCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 486388759756013568) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1190119350744059541) != 0):
                self.state = 879
                self.label()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 885
            self.match(Dart2Parser.DEFAULT_)
            self.state = 886
            self.match(Dart2Parser.CO)
            self.state = 887
            self.statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalFormalParameter(self):
            return self.getTypedRuleContext(Dart2Parser.NormalFormalParameterContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_defaultFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultFormalParameter" ):
                listener.enterDefaultFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultFormalParameter" ):
                listener.exitDefaultFormalParameter(self)




    def defaultFormalParameter(self):

        localctx = Dart2Parser.DefaultFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_defaultFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.normalFormalParameter()
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 890
                self.match(Dart2Parser.EQ)
                self.state = 891
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultNamedParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def normalFormalParameterNoMetadata(self):
            return self.getTypedRuleContext(Dart2Parser.NormalFormalParameterNoMetadataContext,0)


        def REQUIRED_(self):
            return self.getToken(Dart2Parser.REQUIRED_, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def CO(self):
            return self.getToken(Dart2Parser.CO, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_defaultNamedParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultNamedParameter" ):
                listener.enterDefaultNamedParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultNamedParameter" ):
                listener.exitDefaultNamedParameter(self)




    def defaultNamedParameter(self):

        localctx = Dart2Parser.DefaultNamedParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_defaultNamedParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.metadata()
            self.state = 896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 895
                self.match(Dart2Parser.REQUIRED_)


            self.state = 898
            self.normalFormalParameterNoMetadata()
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10 or _la==18:
                self.state = 899
                _la = self._input.LA(1)
                if not(_la==10 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 900
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO_(self):
            return self.getToken(Dart2Parser.DO_, 0)

        def statement(self):
            return self.getTypedRuleContext(Dart2Parser.StatementContext,0)


        def WHILE_(self):
            return self.getToken(Dart2Parser.WHILE_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = Dart2Parser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(Dart2Parser.DO_)
            self.state = 904
            self.statement()
            self.state = 905
            self.match(Dart2Parser.WHILE_)
            self.state = 906
            self.match(Dart2Parser.OP)
            self.state = 907
            self.expr()
            self.state = 908
            self.match(Dart2Parser.CP)
            self.state = 909
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.IdentifierContext,i)


        def D(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.D)
            else:
                return self.getToken(Dart2Parser.D, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_dottedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifierList" ):
                listener.enterDottedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifierList" ):
                listener.exitDottedIdentifierList(self)




    def dottedIdentifierList(self):

        localctx = Dart2Parser.DottedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_dottedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.identifier()
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12:
                self.state = 912
                self.match(Dart2Parser.D)
                self.state = 913
                self.identifier()
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionElement(self):
            return self.getTypedRuleContext(Dart2Parser.ExpressionElementContext,0)


        def mapElement(self):
            return self.getTypedRuleContext(Dart2Parser.MapElementContext,0)


        def spreadElement(self):
            return self.getTypedRuleContext(Dart2Parser.SpreadElementContext,0)


        def ifElement(self):
            return self.getTypedRuleContext(Dart2Parser.IfElementContext,0)


        def forElement(self):
            return self.getTypedRuleContext(Dart2Parser.ForElementContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = Dart2Parser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_element)
        try:
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.expressionElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.mapElement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 921
                self.spreadElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 922
                self.ifElement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 923
                self.forElement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ElementContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ElementContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElements" ):
                listener.enterElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElements" ):
                listener.exitElements(self)




    def elements(self):

        localctx = Dart2Parser.ElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.element()
            self.state = 931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 927
                    self.match(Dart2Parser.C)
                    self.state = 928
                    self.element() 
                self.state = 933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 934
                self.match(Dart2Parser.C)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_enumEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntry" ):
                listener.enterEnumEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntry" ):
                listener.exitEnumEntry(self)




    def enumEntry(self):

        localctx = Dart2Parser.EnumEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_enumEntry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.metadata()
            self.state = 938
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM_(self):
            return self.getToken(Dart2Parser.ENUM_, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def enumEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.EnumEntryContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.EnumEntryContext,i)


        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_enumType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumType" ):
                listener.enterEnumType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumType" ):
                listener.exitEnumType(self)




    def enumType(self):

        localctx = Dart2Parser.EnumTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_enumType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(Dart2Parser.ENUM_)
            self.state = 941
            self.identifier()
            self.state = 942
            self.match(Dart2Parser.OBC)
            self.state = 943
            self.enumEntry()
            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 944
                    self.match(Dart2Parser.C)
                    self.state = 945
                    self.enumEntry() 
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 951
                self.match(Dart2Parser.C)


            self.state = 954
            self.match(Dart2Parser.CBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.RelationalExpressionContext,i)


        def equalityOperator(self):
            return self.getTypedRuleContext(Dart2Parser.EqualityOperatorContext,0)


        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = Dart2Parser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_equalityExpression)
        try:
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.relationalExpression()
                self.state = 960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 957
                    self.equalityOperator()
                    self.state = 958
                    self.relationalExpression()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.match(Dart2Parser.SUPER_)
                self.state = 963
                self.equalityOperator()
                self.state = 964
                self.relationalExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EE(self):
            return self.getToken(Dart2Parser.EE, 0)

        def NE(self):
            return self.getToken(Dart2Parser.NE, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_equalityOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperator" ):
                listener.enterEqualityOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperator" ):
                listener.exitEqualityOperator(self)




    def equalityOperator(self):

        localctx = Dart2Parser.EqualityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_equalityOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            _la = self._input.LA(1)
            if not(_la==16 or _la==27):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignableExpression(self):
            return self.getTypedRuleContext(Dart2Parser.AssignableExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(Dart2Parser.AssignmentOperatorContext,0)


        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(Dart2Parser.ConditionalExpressionContext,0)


        def cascade(self):
            return self.getTypedRuleContext(Dart2Parser.CascadeContext,0)


        def throwExpression(self):
            return self.getTypedRuleContext(Dart2Parser.ThrowExpressionContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = Dart2Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_expr)
        try:
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.assignableExpression()
                self.state = 971
                self.assignmentOperator()
                self.state = 972
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.conditionalExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 975
                self.cascade(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 976
                self.throwExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_expressionElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionElement" ):
                listener.enterExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionElement" ):
                listener.exitExpressionElement(self)




    def expressionElement(self):

        localctx = Dart2Parser.ExpressionElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expressionElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ExprContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = Dart2Parser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.expr()
            self.state = 986
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 982
                    self.match(Dart2Parser.C)
                    self.state = 983
                    self.expr() 
                self.state = 988
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = Dart2Parser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8734731060839972864) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2271484645057699477) != 0):
                self.state = 989
                self.expr()


            self.state = 992
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionWithoutCascadeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignableExpression(self):
            return self.getTypedRuleContext(Dart2Parser.AssignableExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(Dart2Parser.AssignmentOperatorContext,0)


        def expressionWithoutCascade(self):
            return self.getTypedRuleContext(Dart2Parser.ExpressionWithoutCascadeContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(Dart2Parser.ConditionalExpressionContext,0)


        def throwExpressionWithoutCascade(self):
            return self.getTypedRuleContext(Dart2Parser.ThrowExpressionWithoutCascadeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_expressionWithoutCascade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionWithoutCascade" ):
                listener.enterExpressionWithoutCascade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionWithoutCascade" ):
                listener.exitExpressionWithoutCascade(self)




    def expressionWithoutCascade(self):

        localctx = Dart2Parser.ExpressionWithoutCascadeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expressionWithoutCascade)
        try:
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                self.assignableExpression()
                self.state = 995
                self.assignmentOperator()
                self.state = 996
                self.expressionWithoutCascade()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 998
                self.conditionalExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 999
                self.throwExpressionWithoutCascade()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENSION_(self):
            return self.getToken(Dart2Parser.EXTENSION_, 0)

        def ON_(self):
            return self.getToken(Dart2Parser.ON_, 0)

        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(Dart2Parser.TypeParametersContext,0)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MetadataContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MetadataContext,i)


        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_extensionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionDeclaration" ):
                listener.enterExtensionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionDeclaration" ):
                listener.exitExtensionDeclaration(self)




    def extensionDeclaration(self):

        localctx = Dart2Parser.ExtensionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_extensionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(Dart2Parser.EXTENSION_)
            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 1003
                self.identifier()


            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1006
                self.typeParameters()


            self.state = 1009
            self.match(Dart2Parser.ON_)
            self.state = 1010
            self.type_()
            self.state = 1011
            self.match(Dart2Parser.OBC)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8736983277098762224) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1196874750185123477) != 0):
                self.state = 1012
                self.metadata()
                self.state = 1013
                self.classMemberDeclaration()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1020
            self.match(Dart2Parser.CBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactoryConstructorSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FACTORY_(self):
            return self.getToken(Dart2Parser.FACTORY_, 0)

        def constructorName(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorNameContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterListContext,0)


        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_factoryConstructorSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactoryConstructorSignature" ):
                listener.enterFactoryConstructorSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactoryConstructorSignature" ):
                listener.exitFactoryConstructorSignature(self)




    def factoryConstructorSignature(self):

        localctx = Dart2Parser.FactoryConstructorSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_factoryConstructorSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1022
                self.match(Dart2Parser.CONST_)


            self.state = 1025
            self.match(Dart2Parser.FACTORY_)
            self.state = 1026
            self.constructorName()
            self.state = 1027
            self.formalParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS_(self):
            return self.getToken(Dart2Parser.THIS_, 0)

        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def finalConstVarOrType(self):
            return self.getTypedRuleContext(Dart2Parser.FinalConstVarOrTypeContext,0)


        def formalParameterPart(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterPartContext,0)


        def QU(self):
            return self.getToken(Dart2Parser.QU, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_fieldFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldFormalParameter" ):
                listener.enterFieldFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldFormalParameter" ):
                listener.exitFieldFormalParameter(self)




    def fieldFormalParameter(self):

        localctx = Dart2Parser.FieldFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_fieldFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8791026472627208192) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 74733944460841473) != 0):
                self.state = 1029
                self.finalConstVarOrType()


            self.state = 1032
            self.match(Dart2Parser.THIS_)
            self.state = 1033
            self.match(Dart2Parser.D)
            self.state = 1034
            self.identifier()
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==31:
                self.state = 1035
                self.formalParameterPart()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 1036
                    self.match(Dart2Parser.QU)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def initializerExpression(self):
            return self.getTypedRuleContext(Dart2Parser.InitializerExpressionContext,0)


        def THIS_(self):
            return self.getToken(Dart2Parser.THIS_, 0)

        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_fieldInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldInitializer" ):
                listener.enterFieldInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldInitializer" ):
                listener.exitFieldInitializer(self)




    def fieldInitializer(self):

        localctx = Dart2Parser.FieldInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_fieldInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 1041
                self.match(Dart2Parser.THIS_)
                self.state = 1042
                self.match(Dart2Parser.D)


            self.state = 1045
            self.identifier()
            self.state = 1046
            self.match(Dart2Parser.EQ)
            self.state = 1047
            self.initializerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinalConstVarOrTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL_(self):
            return self.getToken(Dart2Parser.FINAL_, 0)

        def LATE_(self):
            return self.getToken(Dart2Parser.LATE_, 0)

        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def varOrType(self):
            return self.getTypedRuleContext(Dart2Parser.VarOrTypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_finalConstVarOrType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalConstVarOrType" ):
                listener.enterFinalConstVarOrType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalConstVarOrType" ):
                listener.exitFinalConstVarOrType(self)




    def finalConstVarOrType(self):

        localctx = Dart2Parser.FinalConstVarOrTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_finalConstVarOrType)
        self._la = 0 # Token type
        try:
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1049
                    self.match(Dart2Parser.LATE_)


                self.state = 1052
                self.match(Dart2Parser.FINAL_)
                self.state = 1054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1053
                    self.type_()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.match(Dart2Parser.CONST_)
                self.state = 1058
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 1057
                    self.type_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1060
                    self.match(Dart2Parser.LATE_)


                self.state = 1063
                self.varOrType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY_(self):
            return self.getToken(Dart2Parser.FINALLY_, 0)

        def block(self):
            return self.getTypedRuleContext(Dart2Parser.BlockContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_finallyPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyPart" ):
                listener.enterFinallyPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyPart" ):
                listener.exitFinallyPart(self)




    def finallyPart(self):

        localctx = Dart2Parser.FinallyPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_finallyPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(Dart2Parser.FINALLY_)
            self.state = 1067
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_(self):
            return self.getToken(Dart2Parser.FOR_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def forLoopParts(self):
            return self.getTypedRuleContext(Dart2Parser.ForLoopPartsContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def element(self):
            return self.getTypedRuleContext(Dart2Parser.ElementContext,0)


        def AWAIT_(self):
            return self.getToken(Dart2Parser.AWAIT_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_forElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForElement" ):
                listener.enterForElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForElement" ):
                listener.exitForElement(self)




    def forElement(self):

        localctx = Dart2Parser.ForElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_forElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1069
                self.match(Dart2Parser.AWAIT_)


            self.state = 1072
            self.match(Dart2Parser.FOR_)
            self.state = 1073
            self.match(Dart2Parser.OP)
            self.state = 1074
            self.forLoopParts()
            self.state = 1075
            self.match(Dart2Parser.CP)
            self.state = 1076
            self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitializerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.LocalVariableDeclarationContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_forInitializerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInitializerStatement" ):
                listener.enterForInitializerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInitializerStatement" ):
                listener.exitForInitializerStatement(self)




    def forInitializerStatement(self):

        localctx = Dart2Parser.ForInitializerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_forInitializerStatement)
        self._la = 0 # Token type
        try:
            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8734731060839972864) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2271484645057699477) != 0):
                    self.state = 1079
                    self.expr()


                self.state = 1082
                self.match(Dart2Parser.SC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForLoopPartsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forInitializerStatement(self):
            return self.getTypedRuleContext(Dart2Parser.ForInitializerStatementContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(Dart2Parser.ExpressionListContext,0)


        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def declaredIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.DeclaredIdentifierContext,0)


        def IN_(self):
            return self.getToken(Dart2Parser.IN_, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_forLoopParts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoopParts" ):
                listener.enterForLoopParts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoopParts" ):
                listener.exitForLoopParts(self)




    def forLoopParts(self):

        localctx = Dart2Parser.ForLoopPartsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_forLoopParts)
        self._la = 0 # Token type
        try:
            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1085
                self.forInitializerStatement()
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8734731060839972864) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2271484645057699477) != 0):
                    self.state = 1086
                    self.expr()


                self.state = 1089
                self.match(Dart2Parser.SC)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8734731060839972864) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2271484645057699477) != 0):
                    self.state = 1090
                    self.expressionList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.metadata()
                self.state = 1094
                self.declaredIdentifier()
                self.state = 1095
                self.match(Dart2Parser.IN_)
                self.state = 1096
                self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1098
                self.identifier()
                self.state = 1099
                self.match(Dart2Parser.IN_)
                self.state = 1100
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def normalFormalParameters(self):
            return self.getTypedRuleContext(Dart2Parser.NormalFormalParametersContext,0)


        def C(self):
            return self.getToken(Dart2Parser.C, 0)

        def optionalOrNamedFormalParameters(self):
            return self.getTypedRuleContext(Dart2Parser.OptionalOrNamedFormalParametersContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = Dart2Parser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.match(Dart2Parser.OP)
                self.state = 1105
                self.match(Dart2Parser.CP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.match(Dart2Parser.OP)
                self.state = 1107
                self.normalFormalParameters()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 1108
                    self.match(Dart2Parser.C)


                self.state = 1111
                self.match(Dart2Parser.CP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1113
                self.match(Dart2Parser.OP)
                self.state = 1114
                self.normalFormalParameters()
                self.state = 1115
                self.match(Dart2Parser.C)
                self.state = 1116
                self.optionalOrNamedFormalParameters()
                self.state = 1117
                self.match(Dart2Parser.CP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1119
                self.match(Dart2Parser.OP)
                self.state = 1120
                self.optionalOrNamedFormalParameters()
                self.state = 1121
                self.match(Dart2Parser.CP)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterList(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterListContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(Dart2Parser.TypeParametersContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_formalParameterPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterPart" ):
                listener.enterFormalParameterPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterPart" ):
                listener.exitFormalParameterPart(self)




    def formalParameterPart(self):

        localctx = Dart2Parser.FormalParameterPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_formalParameterPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1125
                self.typeParameters()


            self.state = 1128
            self.formalParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_(self):
            return self.getToken(Dart2Parser.FOR_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def forLoopParts(self):
            return self.getTypedRuleContext(Dart2Parser.ForLoopPartsContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def statement(self):
            return self.getTypedRuleContext(Dart2Parser.StatementContext,0)


        def AWAIT_(self):
            return self.getToken(Dart2Parser.AWAIT_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = Dart2Parser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1130
                self.match(Dart2Parser.AWAIT_)


            self.state = 1133
            self.match(Dart2Parser.FOR_)
            self.state = 1134
            self.match(Dart2Parser.OP)
            self.state = 1135
            self.forLoopParts()
            self.state = 1136
            self.match(Dart2Parser.CP)
            self.state = 1137
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NATIVE_(self):
            return self.getToken(Dart2Parser.NATIVE_, 0)

        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.StringLiteralContext,0)


        def EG(self):
            return self.getToken(Dart2Parser.EG, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def ASYNC_(self):
            return self.getToken(Dart2Parser.ASYNC_, 0)

        def block(self):
            return self.getTypedRuleContext(Dart2Parser.BlockContext,0)


        def SYNC_(self):
            return self.getToken(Dart2Parser.SYNC_, 0)

        def ST(self):
            return self.getToken(Dart2Parser.ST, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = Dart2Parser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_functionBody)
        self._la = 0 # Token type
        try:
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1139
                self.match(Dart2Parser.NATIVE_)
                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123 or _la==124:
                    self.state = 1140
                    self.stringLiteral()


                self.state = 1143
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 1144
                    self.match(Dart2Parser.ASYNC_)


                self.state = 1147
                self.match(Dart2Parser.EG)
                self.state = 1148
                self.expr()
                self.state = 1149
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1157
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [57]:
                    self.state = 1151
                    self.match(Dart2Parser.ASYNC_)
                    self.state = 1153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==52:
                        self.state = 1152
                        self.match(Dart2Parser.ST)


                    pass
                elif token in [110]:
                    self.state = 1155
                    self.match(Dart2Parser.SYNC_)
                    self.state = 1156
                    self.match(Dart2Parser.ST)
                    pass
                elif token in [30]:
                    pass
                else:
                    pass
                self.state = 1159
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterPart(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterPartContext,0)


        def functionExpressionBody(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionExpressionBodyContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_functionExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpression" ):
                listener.enterFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpression" ):
                listener.exitFunctionExpression(self)




    def functionExpression(self):

        localctx = Dart2Parser.FunctionExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_functionExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.formalParameterPart()
            self.state = 1163
            self.functionExpressionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionExpressionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EG(self):
            return self.getToken(Dart2Parser.EG, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def ASYNC_(self):
            return self.getToken(Dart2Parser.ASYNC_, 0)

        def block(self):
            return self.getTypedRuleContext(Dart2Parser.BlockContext,0)


        def SYNC_(self):
            return self.getToken(Dart2Parser.SYNC_, 0)

        def ST(self):
            return self.getToken(Dart2Parser.ST, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_functionExpressionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpressionBody" ):
                listener.enterFunctionExpressionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpressionBody" ):
                listener.exitFunctionExpressionBody(self)




    def functionExpressionBody(self):

        localctx = Dart2Parser.FunctionExpressionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionExpressionBody)
        self._la = 0 # Token type
        try:
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 1165
                    self.match(Dart2Parser.ASYNC_)


                self.state = 1168
                self.match(Dart2Parser.EG)
                self.state = 1169
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1176
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [57]:
                    self.state = 1170
                    self.match(Dart2Parser.ASYNC_)
                    self.state = 1172
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==52:
                        self.state = 1171
                        self.match(Dart2Parser.ST)


                    pass
                elif token in [110]:
                    self.state = 1174
                    self.match(Dart2Parser.SYNC_)
                    self.state = 1175
                    self.match(Dart2Parser.ST)
                    pass
                elif token in [30]:
                    pass
                else:
                    pass
                self.state = 1178
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def formalParameterPart(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterPartContext,0)


        def COVARIANT_(self):
            return self.getToken(Dart2Parser.COVARIANT_, 0)

        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def QU(self):
            return self.getToken(Dart2Parser.QU, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_functionFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionFormalParameter" ):
                listener.enterFunctionFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionFormalParameter" ):
                listener.exitFunctionFormalParameter(self)




    def functionFormalParameter(self):

        localctx = Dart2Parser.FunctionFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_functionFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1181
                self.match(Dart2Parser.COVARIANT_)


            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1184
                self.type_()


            self.state = 1187
            self.identifier()
            self.state = 1188
            self.formalParameterPart()
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 1189
                self.match(Dart2Parser.QU)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_functionPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionPrefix" ):
                listener.enterFunctionPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionPrefix" ):
                listener.exitFunctionPrefix(self)




    def functionPrefix(self):

        localctx = Dart2Parser.FunctionPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_functionPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1192
                self.type_()


            self.state = 1195
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def formalParameterPart(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterPartContext,0)


        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_functionSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSignature" ):
                listener.enterFunctionSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSignature" ):
                listener.exitFunctionSignature(self)




    def functionSignature(self):

        localctx = Dart2Parser.FunctionSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_functionSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1197
                self.type_()


            self.state = 1200
            self.identifier()
            self.state = 1201
            self.formalParameterPart()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeTails(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionTypeTailsContext,0)


        def typeNotFunction(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotFunctionContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)




    def functionType(self):

        localctx = Dart2Parser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_functionType)
        try:
            self.state = 1207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self.functionTypeTails()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1204
                self.typeNotFunction()
                self.state = 1205
                self.functionTypeTails()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionPrefix(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionPrefixContext,0)


        def formalParameterPart(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterPartContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_functionTypeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeAlias" ):
                listener.enterFunctionTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeAlias" ):
                listener.exitFunctionTypeAlias(self)




    def functionTypeAlias(self):

        localctx = Dart2Parser.FunctionTypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_functionTypeAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.functionPrefix()
            self.state = 1210
            self.formalParameterPart()
            self.state = 1211
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeTailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_(self):
            return self.getToken(Dart2Parser.FUNCTION_, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(Dart2Parser.ParameterTypeListContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(Dart2Parser.TypeParametersContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_functionTypeTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeTail" ):
                listener.enterFunctionTypeTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeTail" ):
                listener.exitFunctionTypeTail(self)




    def functionTypeTail(self):

        localctx = Dart2Parser.FunctionTypeTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_functionTypeTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(Dart2Parser.FUNCTION_)
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1214
                self.typeParameters()


            self.state = 1217
            self.parameterTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeTailsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeTail(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionTypeTailContext,0)


        def functionTypeTails(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionTypeTailsContext,0)


        def QU(self):
            return self.getToken(Dart2Parser.QU, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_functionTypeTails

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeTails" ):
                listener.enterFunctionTypeTails(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeTails" ):
                listener.exitFunctionTypeTails(self)




    def functionTypeTails(self):

        localctx = Dart2Parser.FunctionTypeTailsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_functionTypeTails)
        self._la = 0 # Token type
        try:
            self.state = 1226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1219
                self.functionTypeTail()
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 1220
                    self.match(Dart2Parser.QU)


                self.state = 1223
                self.functionTypeTails()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1225
                self.functionTypeTail()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_(self):
            return self.getToken(Dart2Parser.GET_, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_getterSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterSignature" ):
                listener.enterGetterSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterSignature" ):
                listener.exitGetterSignature(self)




    def getterSignature(self):

        localctx = Dart2Parser.GetterSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_getterSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57 or _la==58 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 74593206968291329) != 0):
                self.state = 1228
                self.type_()


            self.state = 1231
            self.match(Dart2Parser.GET_)
            self.state = 1232
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Dart2Parser.IDENTIFIER, 0)

        def ABSTRACT_(self):
            return self.getToken(Dart2Parser.ABSTRACT_, 0)

        def AS_(self):
            return self.getToken(Dart2Parser.AS_, 0)

        def COVARIANT_(self):
            return self.getToken(Dart2Parser.COVARIANT_, 0)

        def DEFERRED_(self):
            return self.getToken(Dart2Parser.DEFERRED_, 0)

        def DYNAMIC_(self):
            return self.getToken(Dart2Parser.DYNAMIC_, 0)

        def EXPORT_(self):
            return self.getToken(Dart2Parser.EXPORT_, 0)

        def EXTERNAL_(self):
            return self.getToken(Dart2Parser.EXTERNAL_, 0)

        def EXTENSION_(self):
            return self.getToken(Dart2Parser.EXTENSION_, 0)

        def FACTORY_(self):
            return self.getToken(Dart2Parser.FACTORY_, 0)

        def FUNCTION_(self):
            return self.getToken(Dart2Parser.FUNCTION_, 0)

        def GET_(self):
            return self.getToken(Dart2Parser.GET_, 0)

        def IMPLEMENTS_(self):
            return self.getToken(Dart2Parser.IMPLEMENTS_, 0)

        def IMPORT_(self):
            return self.getToken(Dart2Parser.IMPORT_, 0)

        def INTERFACE_(self):
            return self.getToken(Dart2Parser.INTERFACE_, 0)

        def LATE_(self):
            return self.getToken(Dart2Parser.LATE_, 0)

        def LIBRARY_(self):
            return self.getToken(Dart2Parser.LIBRARY_, 0)

        def MIXIN_(self):
            return self.getToken(Dart2Parser.MIXIN_, 0)

        def OPERATOR_(self):
            return self.getToken(Dart2Parser.OPERATOR_, 0)

        def PART_(self):
            return self.getToken(Dart2Parser.PART_, 0)

        def REQUIRED_(self):
            return self.getToken(Dart2Parser.REQUIRED_, 0)

        def SET_(self):
            return self.getToken(Dart2Parser.SET_, 0)

        def STATIC_(self):
            return self.getToken(Dart2Parser.STATIC_, 0)

        def TYPEDEF_(self):
            return self.getToken(Dart2Parser.TYPEDEF_, 0)

        def ASYNC_(self):
            return self.getToken(Dart2Parser.ASYNC_, 0)

        def HIDE_(self):
            return self.getToken(Dart2Parser.HIDE_, 0)

        def OF_(self):
            return self.getToken(Dart2Parser.OF_, 0)

        def ON_(self):
            return self.getToken(Dart2Parser.ON_, 0)

        def SHOW_(self):
            return self.getToken(Dart2Parser.SHOW_, 0)

        def SYNC_(self):
            return self.getToken(Dart2Parser.SYNC_, 0)

        def AWAIT_(self):
            return self.getToken(Dart2Parser.AWAIT_, 0)

        def YIELD_(self):
            return self.getToken(Dart2Parser.YIELD_, 0)

        def NATIVE_(self):
            return self.getToken(Dart2Parser.NATIVE_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = Dart2Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 486388759756013568) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1190119350744059541) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.IdentifierContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = Dart2Parser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.identifier()
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1237
                self.match(Dart2Parser.C)
                self.state = 1238
                self.identifier()
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_(self):
            return self.getToken(Dart2Parser.IF_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ElementContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ElementContext,i)


        def ELSE_(self):
            return self.getToken(Dart2Parser.ELSE_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_ifElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElement" ):
                listener.enterIfElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElement" ):
                listener.exitIfElement(self)




    def ifElement(self):

        localctx = Dart2Parser.IfElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_ifElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(Dart2Parser.IF_)
            self.state = 1245
            self.match(Dart2Parser.OP)
            self.state = 1246
            self.expr()
            self.state = 1247
            self.match(Dart2Parser.CP)
            self.state = 1248
            self.element()
            self.state = 1251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1249
                self.match(Dart2Parser.ELSE_)
                self.state = 1250
                self.element()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNullExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.LogicalOrExpressionContext,i)


        def QUQU(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.QUQU)
            else:
                return self.getToken(Dart2Parser.QUQU, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_ifNullExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNullExpression" ):
                listener.enterIfNullExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNullExpression" ):
                listener.exitIfNullExpression(self)




    def ifNullExpression(self):

        localctx = Dart2Parser.IfNullExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_ifNullExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.logicalOrExpression()
            self.state = 1258
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1254
                    self.match(Dart2Parser.QUQU)
                    self.state = 1255
                    self.logicalOrExpression() 
                self.state = 1260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_(self):
            return self.getToken(Dart2Parser.IF_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.StatementContext,i)


        def ELSE_(self):
            return self.getToken(Dart2Parser.ELSE_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = Dart2Parser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self.match(Dart2Parser.IF_)
            self.state = 1262
            self.match(Dart2Parser.OP)
            self.state = 1263
            self.expr()
            self.state = 1264
            self.match(Dart2Parser.CP)
            self.state = 1265
            self.statement()
            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1266
                self.match(Dart2Parser.ELSE_)
                self.state = 1267
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportOrExportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def libraryImport(self):
            return self.getTypedRuleContext(Dart2Parser.LibraryImportContext,0)


        def libraryExport(self):
            return self.getTypedRuleContext(Dart2Parser.LibraryExportContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_importOrExport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportOrExport" ):
                listener.enterImportOrExport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportOrExport" ):
                listener.exitImportOrExport(self)




    def importOrExport(self):

        localctx = Dart2Parser.ImportOrExportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_importOrExport)
        try:
            self.state = 1272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1270
                self.libraryImport()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1271
                self.libraryExport()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT_(self):
            return self.getToken(Dart2Parser.IMPORT_, 0)

        def configurableUri(self):
            return self.getTypedRuleContext(Dart2Parser.ConfigurableUriContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def AS_(self):
            return self.getToken(Dart2Parser.AS_, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def combinator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.CombinatorContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.CombinatorContext,i)


        def DEFERRED_(self):
            return self.getToken(Dart2Parser.DEFERRED_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_importSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportSpecification" ):
                listener.enterImportSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportSpecification" ):
                listener.exitImportSpecification(self)




    def importSpecification(self):

        localctx = Dart2Parser.ImportSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_importSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(Dart2Parser.IMPORT_)
            self.state = 1275
            self.configurableUri()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55 or _la==67:
                self.state = 1277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 1276
                    self.match(Dart2Parser.DEFERRED_)


                self.state = 1279
                self.match(Dart2Parser.AS_)
                self.state = 1280
                self.identifier()


            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84 or _la==106:
                self.state = 1283
                self.combinator()
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1289
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrementOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLPL(self):
            return self.getToken(Dart2Parser.PLPL, 0)

        def MM(self):
            return self.getToken(Dart2Parser.MM, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_incrementOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncrementOperator" ):
                listener.enterIncrementOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncrementOperator" ):
                listener.exitIncrementOperator(self)




    def incrementOperator(self):

        localctx = Dart2Parser.IncrementOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_incrementOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            _la = self._input.LA(1)
            if not(_la==26 or _la==37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_initializedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializedIdentifier" ):
                listener.enterInitializedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializedIdentifier" ):
                listener.exitInitializedIdentifier(self)




    def initializedIdentifier(self):

        localctx = Dart2Parser.InitializedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_initializedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.identifier()
            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 1294
                self.match(Dart2Parser.EQ)
                self.state = 1295
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.InitializedIdentifierContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.InitializedIdentifierContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_initializedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializedIdentifierList" ):
                listener.enterInitializedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializedIdentifierList" ):
                listener.exitInitializedIdentifierList(self)




    def initializedIdentifierList(self):

        localctx = Dart2Parser.InitializedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_initializedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.initializedIdentifier()
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1299
                self.match(Dart2Parser.C)
                self.state = 1300
                self.initializedIdentifier()
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializedVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaredIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.DeclaredIdentifierContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def initializedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.InitializedIdentifierContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.InitializedIdentifierContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_initializedVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializedVariableDeclaration" ):
                listener.enterInitializedVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializedVariableDeclaration" ):
                listener.exitInitializedVariableDeclaration(self)




    def initializedVariableDeclaration(self):

        localctx = Dart2Parser.InitializedVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_initializedVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306
            self.declaredIdentifier()
            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 1307
                self.match(Dart2Parser.EQ)
                self.state = 1308
                self.expr()


            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1311
                self.match(Dart2Parser.C)
                self.state = 1312
                self.initializedIdentifier()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(Dart2Parser.ConditionalExpressionContext,0)


        def cascade(self):
            return self.getTypedRuleContext(Dart2Parser.CascadeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_initializerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerExpression" ):
                listener.enterInitializerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerExpression" ):
                listener.exitInitializerExpression(self)




    def initializerExpression(self):

        localctx = Dart2Parser.InitializerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_initializerExpression)
        try:
            self.state = 1320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1318
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1319
                self.cascade(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def arguments(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentsContext,0)


        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def fieldInitializer(self):
            return self.getTypedRuleContext(Dart2Parser.FieldInitializerContext,0)


        def assertion(self):
            return self.getTypedRuleContext(Dart2Parser.AssertionContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_initializerListEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerListEntry" ):
                listener.enterInitializerListEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerListEntry" ):
                listener.exitInitializerListEntry(self)




    def initializerListEntry(self):

        localctx = Dart2Parser.InitializerListEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_initializerListEntry)
        try:
            self.state = 1331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                self.match(Dart2Parser.SUPER_)
                self.state = 1323
                self.arguments()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1324
                self.match(Dart2Parser.SUPER_)
                self.state = 1325
                self.match(Dart2Parser.D)
                self.state = 1326
                self.identifier()
                self.state = 1327
                self.arguments()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1329
                self.fieldInitializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1330
                self.assertion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CO(self):
            return self.getToken(Dart2Parser.CO, 0)

        def initializerListEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.InitializerListEntryContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.InitializerListEntryContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_initializers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializers" ):
                listener.enterInitializers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializers" ):
                listener.exitInitializers(self)




    def initializers(self):

        localctx = Dart2Parser.InitializersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_initializers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(Dart2Parser.CO)
            self.state = 1334
            self.initializerListEntry()
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1335
                self.match(Dart2Parser.C)
                self.state = 1336
                self.initializerListEntry()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS_(self):
            return self.getToken(Dart2Parser.IMPLEMENTS_, 0)

        def typeNotVoidList(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidListContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaces" ):
                listener.enterInterfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaces" ):
                listener.exitInterfaces(self)




    def interfaces(self):

        localctx = Dart2Parser.InterfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(Dart2Parser.IMPLEMENTS_)
            self.state = 1343
            self.typeNotVoidList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_(self):
            return self.getToken(Dart2Parser.IS_, 0)

        def NOT(self):
            return self.getToken(Dart2Parser.NOT, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_isOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOperator" ):
                listener.enterIsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOperator" ):
                listener.exitIsOperator(self)




    def isOperator(self):

        localctx = Dart2Parser.IsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_isOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(Dart2Parser.IS_)
            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 1346
                self.match(Dart2Parser.NOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def CO(self):
            return self.getToken(Dart2Parser.CO, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)




    def label(self):

        localctx = Dart2Parser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.identifier()
            self.state = 1350
            self.match(Dart2Parser.CO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET_(self):
            return self.getToken(Dart2Parser.LET_, 0)

        def staticFinalDeclarationList(self):
            return self.getTypedRuleContext(Dart2Parser.StaticFinalDeclarationListContext,0)


        def IN_(self):
            return self.getToken(Dart2Parser.IN_, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_letExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetExpression" ):
                listener.enterLetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetExpression" ):
                listener.exitLetExpression(self)




    def letExpression(self):

        localctx = Dart2Parser.LetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_letExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(Dart2Parser.LET_)
            self.state = 1353
            self.staticFinalDeclarationList()
            self.state = 1354
            self.match(Dart2Parser.IN_)
            self.state = 1355
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def libraryName(self):
            return self.getTypedRuleContext(Dart2Parser.LibraryNameContext,0)


        def importOrExport(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ImportOrExportContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ImportOrExportContext,i)


        def partDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.PartDirectiveContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.PartDirectiveContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MetadataContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MetadataContext,i)


        def topLevelDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.TopLevelDeclarationContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.TopLevelDeclarationContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_libraryDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDeclaration" ):
                listener.enterLibraryDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDeclaration" ):
                listener.exitLibraryDeclaration(self)




    def libraryDeclaration(self):

        localctx = Dart2Parser.LibraryDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_libraryDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1357
                self.libraryName()


            self.state = 1363
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1360
                    self.importOrExport() 
                self.state = 1365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1369
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1366
                    self.partDirective() 
                self.state = 1371
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4125297258671374320) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1196874750185123541) != 0):
                self.state = 1372
                self.metadata()
                self.state = 1373
                self.topLevelDeclaration()
                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryExportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def EXPORT_(self):
            return self.getToken(Dart2Parser.EXPORT_, 0)

        def configurableUri(self):
            return self.getTypedRuleContext(Dart2Parser.ConfigurableUriContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def combinator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.CombinatorContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.CombinatorContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_libraryExport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryExport" ):
                listener.enterLibraryExport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryExport" ):
                listener.exitLibraryExport(self)




    def libraryExport(self):

        localctx = Dart2Parser.LibraryExportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_libraryExport)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.metadata()
            self.state = 1381
            self.match(Dart2Parser.EXPORT_)
            self.state = 1382
            self.configurableUri()
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==84 or _la==106:
                self.state = 1383
                self.combinator()
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1389
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryImportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def importSpecification(self):
            return self.getTypedRuleContext(Dart2Parser.ImportSpecificationContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_libraryImport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryImport" ):
                listener.enterLibraryImport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryImport" ):
                listener.exitLibraryImport(self)




    def libraryImport(self):

        localctx = Dart2Parser.LibraryImportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_libraryImport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.metadata()
            self.state = 1392
            self.importSpecification()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def LIBRARY_(self):
            return self.getToken(Dart2Parser.LIBRARY_, 0)

        def dottedIdentifierList(self):
            return self.getTypedRuleContext(Dart2Parser.DottedIdentifierListContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_libraryName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryName" ):
                listener.enterLibraryName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryName" ):
                listener.exitLibraryName(self)




    def libraryName(self):

        localctx = Dart2Parser.LibraryNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_libraryName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.metadata()
            self.state = 1395
            self.match(Dart2Parser.LIBRARY_)
            self.state = 1396
            self.dottedIdentifierList()
            self.state = 1397
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OB(self):
            return self.getToken(Dart2Parser.OB, 0)

        def CB(self):
            return self.getToken(Dart2Parser.CB, 0)

        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Dart2Parser.TypeArgumentsContext,0)


        def elements(self):
            return self.getTypedRuleContext(Dart2Parser.ElementsContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_listLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLiteral" ):
                listener.enterListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLiteral" ):
                listener.exitListLiteral(self)




    def listLiteral(self):

        localctx = Dart2Parser.ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_listLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1399
                self.match(Dart2Parser.CONST_)


            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1402
                self.typeArguments()


            self.state = 1405
            self.match(Dart2Parser.OB)
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8734731060839923712) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2271484645058780821) != 0):
                self.state = 1406
                self.elements()


            self.state = 1409
            self.match(Dart2Parser.CB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.NullLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.BooleanLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.NumericLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.StringLiteralContext,0)


        def symbolLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.SymbolLiteralContext,0)


        def listLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.ListLiteralContext,0)


        def setOrMapLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.SetOrMapLiteralContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = Dart2Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_literal)
        try:
            self.state = 1418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1411
                self.nullLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1412
                self.booleanLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1413
                self.numericLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1414
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1415
                self.symbolLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1416
                self.listLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1417
                self.setOrMapLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalFunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def functionSignature(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionSignatureContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_localFunctionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalFunctionDeclaration" ):
                listener.enterLocalFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalFunctionDeclaration" ):
                listener.exitLocalFunctionDeclaration(self)




    def localFunctionDeclaration(self):

        localctx = Dart2Parser.LocalFunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_localFunctionDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.metadata()
            self.state = 1421
            self.functionSignature()
            self.state = 1422
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def initializedVariableDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.InitializedVariableDeclarationContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = Dart2Parser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.metadata()
            self.state = 1425
            self.initializedVariableDeclaration()
            self.state = 1426
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.EqualityExpressionContext,i)


        def AA(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.AA)
            else:
                return self.getToken(Dart2Parser.AA, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = Dart2Parser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_logicalAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.equalityExpression()
            self.state = 1433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1429
                    self.match(Dart2Parser.AA)
                    self.state = 1430
                    self.equalityExpression() 
                self.state = 1435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.LogicalAndExpressionContext,i)


        def PP(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.PP)
            else:
                return self.getToken(Dart2Parser.PP, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = Dart2Parser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_logicalOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.logicalAndExpression()
            self.state = 1441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1437
                    self.match(Dart2Parser.PP)
                    self.state = 1438
                    self.logicalAndExpression() 
                self.state = 1443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ExprContext,i)


        def CO(self):
            return self.getToken(Dart2Parser.CO, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_mapElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapElement" ):
                listener.enterMapElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapElement" ):
                listener.exitMapElement(self)




    def mapElement(self):

        localctx = Dart2Parser.MapElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_mapElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.expr()
            self.state = 1445
            self.match(Dart2Parser.CO)
            self.state = 1446
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.AT)
            else:
                return self.getToken(Dart2Parser.AT, i)

        def metadatum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MetadatumContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MetadatumContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)




    def metadata(self):

        localctx = Dart2Parser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_metadata)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1448
                self.match(Dart2Parser.AT)
                self.state = 1449
                self.metadatum()
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadatumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(Dart2Parser.QualifiedNameContext,0)


        def constructorDesignation(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorDesignationContext,0)


        def arguments(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentsContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_metadatum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadatum" ):
                listener.enterMetadatum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadatum" ):
                listener.exitMetadatum(self)




    def metadatum(self):

        localctx = Dart2Parser.MetadatumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_metadatum)
        try:
            self.state = 1460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.qualifiedName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                self.constructorDesignation()
                self.state = 1458
                self.arguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorSignature(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorSignatureContext,0)


        def initializers(self):
            return self.getTypedRuleContext(Dart2Parser.InitializersContext,0)


        def factoryConstructorSignature(self):
            return self.getTypedRuleContext(Dart2Parser.FactoryConstructorSignatureContext,0)


        def functionSignature(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionSignatureContext,0)


        def STATIC_(self):
            return self.getToken(Dart2Parser.STATIC_, 0)

        def getterSignature(self):
            return self.getTypedRuleContext(Dart2Parser.GetterSignatureContext,0)


        def setterSignature(self):
            return self.getTypedRuleContext(Dart2Parser.SetterSignatureContext,0)


        def operatorSignature(self):
            return self.getTypedRuleContext(Dart2Parser.OperatorSignatureContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_methodSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSignature" ):
                listener.enterMethodSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSignature" ):
                listener.exitMethodSignature(self)




    def methodSignature(self):

        localctx = Dart2Parser.MethodSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_methodSignature)
        self._la = 0 # Token type
        try:
            self.state = 1480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.constructorSignature()
                self.state = 1464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1463
                    self.initializers()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1466
                self.factoryConstructorSignature()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1467
                    self.match(Dart2Parser.STATIC_)


                self.state = 1470
                self.functionSignature()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 1471
                    self.match(Dart2Parser.STATIC_)


                self.state = 1474
                self.getterSignature()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 1475
                    self.match(Dart2Parser.STATIC_)


                self.state = 1478
                self.setterSignature()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1479
                self.operatorSignature()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinusOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(Dart2Parser.MINUS, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_minusOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOperator" ):
                listener.enterMinusOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOperator" ):
                listener.exitMinusOperator(self)




    def minusOperator(self):

        localctx = Dart2Parser.MinusOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_minusOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(Dart2Parser.MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinApplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeNotVoid(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidContext,0)


        def mixins(self):
            return self.getTypedRuleContext(Dart2Parser.MixinsContext,0)


        def interfaces(self):
            return self.getTypedRuleContext(Dart2Parser.InterfacesContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_mixinApplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixinApplication" ):
                listener.enterMixinApplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixinApplication" ):
                listener.exitMixinApplication(self)




    def mixinApplication(self):

        localctx = Dart2Parser.MixinApplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_mixinApplication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.typeNotVoid()
            self.state = 1485
            self.mixins()
            self.state = 1487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1486
                self.interfaces()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinApplicationClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def mixinApplication(self):
            return self.getTypedRuleContext(Dart2Parser.MixinApplicationContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(Dart2Parser.TypeParametersContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_mixinApplicationClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixinApplicationClass" ):
                listener.enterMixinApplicationClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixinApplicationClass" ):
                listener.exitMixinApplicationClass(self)




    def mixinApplicationClass(self):

        localctx = Dart2Parser.MixinApplicationClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_mixinApplicationClass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            self.identifier()
            self.state = 1491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1490
                self.typeParameters()


            self.state = 1493
            self.match(Dart2Parser.EQ)
            self.state = 1494
            self.mixinApplication()
            self.state = 1495
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXIN_(self):
            return self.getToken(Dart2Parser.MIXIN_, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.TypeIdentifierContext,0)


        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(Dart2Parser.TypeParametersContext,0)


        def ON_(self):
            return self.getToken(Dart2Parser.ON_, 0)

        def typeNotVoidList(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidListContext,0)


        def interfaces(self):
            return self.getTypedRuleContext(Dart2Parser.InterfacesContext,0)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MetadataContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MetadataContext,i)


        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_mixinDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixinDeclaration" ):
                listener.enterMixinDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixinDeclaration" ):
                listener.exitMixinDeclaration(self)




    def mixinDeclaration(self):

        localctx = Dart2Parser.MixinDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_mixinDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(Dart2Parser.MIXIN_)
            self.state = 1498
            self.typeIdentifier()
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1499
                self.typeParameters()


            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 1502
                self.match(Dart2Parser.ON_)
                self.state = 1503
                self.typeNotVoidList()


            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1506
                self.interfaces()


            self.state = 1509
            self.match(Dart2Parser.OBC)
            self.state = 1515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8736983277098762224) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1196874750185123477) != 0):
                self.state = 1510
                self.metadata()
                self.state = 1511
                self.classMemberDeclaration()
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1518
            self.match(Dart2Parser.CBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MixinsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(Dart2Parser.WITH_, 0)

        def typeNotVoidList(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidListContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_mixins

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixins" ):
                listener.enterMixins(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixins" ):
                listener.exitMixins(self)




    def mixins(self):

        localctx = Dart2Parser.MixinsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_mixins)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(Dart2Parser.WITH_)
            self.state = 1521
            self.typeNotVoidList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultilineStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineString(self):
            return self.getToken(Dart2Parser.MultiLineString, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_multilineString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultilineString" ):
                listener.enterMultilineString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultilineString" ):
                listener.exitMultilineString(self)




    def multilineString(self):

        localctx = Dart2Parser.MultilineStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_multilineString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.match(Dart2Parser.MultiLineString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.UnaryExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.UnaryExpressionContext,i)


        def multiplicativeOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MultiplicativeOperatorContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MultiplicativeOperatorContext,i)


        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = Dart2Parser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_multiplicativeExpression)
        try:
            self.state = 1542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.unaryExpression()
                self.state = 1531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1526
                        self.multiplicativeOperator()
                        self.state = 1527
                        self.unaryExpression() 
                    self.state = 1533
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1534
                self.match(Dart2Parser.SUPER_)
                self.state = 1538 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1535
                        self.multiplicativeOperator()
                        self.state = 1536
                        self.unaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1540 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ST(self):
            return self.getToken(Dart2Parser.ST, 0)

        def SL(self):
            return self.getToken(Dart2Parser.SL, 0)

        def PC(self):
            return self.getToken(Dart2Parser.PC, 0)

        def SQS(self):
            return self.getToken(Dart2Parser.SQS, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_multiplicativeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperator" ):
                listener.enterMultiplicativeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperator" ):
                listener.exitMultiplicativeOperator(self)




    def multiplicativeOperator(self):

        localctx = Dart2Parser.MultiplicativeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_multiplicativeOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 5348033147437056) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(Dart2Parser.LabelContext,0)


        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_namedArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)




    def namedArgument(self):

        localctx = Dart2Parser.NamedArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_namedArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.label()
            self.state = 1547
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedFormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def defaultNamedParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.DefaultNamedParameterContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.DefaultNamedParameterContext,i)


        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_namedFormalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedFormalParameters" ):
                listener.enterNamedFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedFormalParameters" ):
                listener.exitNamedFormalParameters(self)




    def namedFormalParameters(self):

        localctx = Dart2Parser.NamedFormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_namedFormalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.match(Dart2Parser.OBC)
            self.state = 1550
            self.defaultNamedParameter()
            self.state = 1555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1551
                    self.match(Dart2Parser.C)
                    self.state = 1552
                    self.defaultNamedParameter() 
                self.state = 1557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 1558
                self.match(Dart2Parser.C)


            self.state = 1561
            self.match(Dart2Parser.CBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def typedIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.TypedIdentifierContext,0)


        def REQUIRED_(self):
            return self.getToken(Dart2Parser.REQUIRED_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_namedParameterType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedParameterType" ):
                listener.enterNamedParameterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedParameterType" ):
                listener.exitNamedParameterType(self)




    def namedParameterType(self):

        localctx = Dart2Parser.NamedParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_namedParameterType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.metadata()
            self.state = 1565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 1564
                self.match(Dart2Parser.REQUIRED_)


            self.state = 1567
            self.typedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedParameterTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def namedParameterType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.NamedParameterTypeContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.NamedParameterTypeContext,i)


        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_namedParameterTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedParameterTypes" ):
                listener.enterNamedParameterTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedParameterTypes" ):
                listener.exitNamedParameterTypes(self)




    def namedParameterTypes(self):

        localctx = Dart2Parser.NamedParameterTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_namedParameterTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self.match(Dart2Parser.OBC)
            self.state = 1570
            self.namedParameterType()
            self.state = 1575
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1571
                    self.match(Dart2Parser.C)
                    self.state = 1572
                    self.namedParameterType() 
                self.state = 1577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 1578
                self.match(Dart2Parser.C)


            self.state = 1581
            self.match(Dart2Parser.CBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NegationOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Dart2Parser.NOT, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_negationOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOperator" ):
                listener.enterNegationOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOperator" ):
                listener.exitNegationOperator(self)




    def negationOperator(self):

        localctx = Dart2Parser.NegationOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_negationOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(Dart2Parser.NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW_(self):
            return self.getToken(Dart2Parser.NEW_, 0)

        def constructorDesignation(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorDesignationContext,0)


        def arguments(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentsContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_newExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)




    def newExpression(self):

        localctx = Dart2Parser.NewExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_newExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(Dart2Parser.NEW_)
            self.state = 1586
            self.constructorDesignation()
            self.state = 1587
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonLabelledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(Dart2Parser.BlockContext,0)


        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.LocalVariableDeclarationContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(Dart2Parser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(Dart2Parser.WhileStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(Dart2Parser.DoStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(Dart2Parser.SwitchStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(Dart2Parser.IfStatementContext,0)


        def rethrowStatement(self):
            return self.getTypedRuleContext(Dart2Parser.RethrowStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(Dart2Parser.TryStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(Dart2Parser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(Dart2Parser.ContinueStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(Dart2Parser.ReturnStatementContext,0)


        def yieldStatement(self):
            return self.getTypedRuleContext(Dart2Parser.YieldStatementContext,0)


        def yieldEachStatement(self):
            return self.getTypedRuleContext(Dart2Parser.YieldEachStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(Dart2Parser.ExpressionStatementContext,0)


        def assertStatement(self):
            return self.getTypedRuleContext(Dart2Parser.AssertStatementContext,0)


        def localFunctionDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.LocalFunctionDeclarationContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_nonLabelledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonLabelledStatement" ):
                listener.enterNonLabelledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonLabelledStatement" ):
                listener.exitNonLabelledStatement(self)




    def nonLabelledStatement(self):

        localctx = Dart2Parser.NonLabelledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_nonLabelledStatement)
        try:
            self.state = 1606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1590
                self.localVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1591
                self.forStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1592
                self.whileStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1593
                self.doStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1594
                self.switchStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1595
                self.ifStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1596
                self.rethrowStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1597
                self.tryStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1598
                self.breakStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1599
                self.continueStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1600
                self.returnStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1601
                self.yieldStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1602
                self.yieldEachStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1603
                self.expressionStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1604
                self.assertStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1605
                self.localFunctionDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def normalFormalParameterNoMetadata(self):
            return self.getTypedRuleContext(Dart2Parser.NormalFormalParameterNoMetadataContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_normalFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalFormalParameter" ):
                listener.enterNormalFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalFormalParameter" ):
                listener.exitNormalFormalParameter(self)




    def normalFormalParameter(self):

        localctx = Dart2Parser.NormalFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_normalFormalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.metadata()
            self.state = 1609
            self.normalFormalParameterNoMetadata()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormalParameterNoMetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionFormalParameter(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionFormalParameterContext,0)


        def fieldFormalParameter(self):
            return self.getTypedRuleContext(Dart2Parser.FieldFormalParameterContext,0)


        def simpleFormalParameter(self):
            return self.getTypedRuleContext(Dart2Parser.SimpleFormalParameterContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_normalFormalParameterNoMetadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalFormalParameterNoMetadata" ):
                listener.enterNormalFormalParameterNoMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalFormalParameterNoMetadata" ):
                listener.exitNormalFormalParameterNoMetadata(self)




    def normalFormalParameterNoMetadata(self):

        localctx = Dart2Parser.NormalFormalParameterNoMetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_normalFormalParameterNoMetadata)
        try:
            self.state = 1614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1611
                self.functionFormalParameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1612
                self.fieldFormalParameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1613
                self.simpleFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalFormalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.NormalFormalParameterContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.NormalFormalParameterContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_normalFormalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalFormalParameters" ):
                listener.enterNormalFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalFormalParameters" ):
                listener.exitNormalFormalParameters(self)




    def normalFormalParameters(self):

        localctx = Dart2Parser.NormalFormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_normalFormalParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.normalFormalParameter()
            self.state = 1621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1617
                    self.match(Dart2Parser.C)
                    self.state = 1618
                    self.normalFormalParameter() 
                self.state = 1623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalParameterTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def typedIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.TypedIdentifierContext,0)


        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_normalParameterType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalParameterType" ):
                listener.enterNormalParameterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalParameterType" ):
                listener.exitNormalParameterType(self)




    def normalParameterType(self):

        localctx = Dart2Parser.NormalParameterTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_normalParameterType)
        try:
            self.state = 1630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.metadata()
                self.state = 1625
                self.typedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1627
                self.metadata()
                self.state = 1628
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalParameterTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalParameterType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.NormalParameterTypeContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.NormalParameterTypeContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_normalParameterTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalParameterTypes" ):
                listener.enterNormalParameterTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalParameterTypes" ):
                listener.exitNormalParameterTypes(self)




    def normalParameterTypes(self):

        localctx = Dart2Parser.NormalParameterTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_normalParameterTypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.normalParameterType()
            self.state = 1637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1633
                    self.match(Dart2Parser.C)
                    self.state = 1634
                    self.normalParameterType() 
                self.state = 1639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(Dart2Parser.NULL_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)




    def nullLiteral(self):

        localctx = Dart2Parser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_nullLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(Dart2Parser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Dart2Parser.NUMBER, 0)

        def HEX_NUMBER(self):
            return self.getToken(Dart2Parser.HEX_NUMBER, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)




    def numericLiteral(self):

        localctx = Dart2Parser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_numericLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            _la = self._input.LA(1)
            if not(_la==121 or _la==122):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catchPart(self):
            return self.getTypedRuleContext(Dart2Parser.CatchPartContext,0)


        def block(self):
            return self.getTypedRuleContext(Dart2Parser.BlockContext,0)


        def ON_(self):
            return self.getToken(Dart2Parser.ON_, 0)

        def typeNotVoid(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_onPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnPart" ):
                listener.enterOnPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnPart" ):
                listener.exitOnPart(self)




    def onPart(self):

        localctx = Dart2Parser.OnPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_onPart)
        self._la = 0 # Token type
        try:
            self.state = 1654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1644
                self.catchPart()
                self.state = 1645
                self.block()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1647
                self.match(Dart2Parser.ON_)
                self.state = 1648
                self.typeNotVoid()
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61:
                    self.state = 1649
                    self.catchPart()


                self.state = 1652
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQUIG(self):
            return self.getToken(Dart2Parser.SQUIG, 0)

        def binaryOperator(self):
            return self.getTypedRuleContext(Dart2Parser.BinaryOperatorContext,0)


        def OB(self):
            return self.getToken(Dart2Parser.OB, 0)

        def CB(self):
            return self.getToken(Dart2Parser.CB, 0)

        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = Dart2Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_operator)
        try:
            self.state = 1663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1656
                self.match(Dart2Parser.SQUIG)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1657
                self.binaryOperator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1658
                self.match(Dart2Parser.OB)
                self.state = 1659
                self.match(Dart2Parser.CB)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1660
                self.match(Dart2Parser.OB)
                self.state = 1661
                self.match(Dart2Parser.CB)
                self.state = 1662
                self.match(Dart2Parser.EQ)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPERATOR_(self):
            return self.getToken(Dart2Parser.OPERATOR_, 0)

        def operator(self):
            return self.getTypedRuleContext(Dart2Parser.OperatorContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterListContext,0)


        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_operatorSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorSignature" ):
                listener.enterOperatorSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorSignature" ):
                listener.exitOperatorSignature(self)




    def operatorSignature(self):

        localctx = Dart2Parser.OperatorSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_operatorSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57 or _la==58 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 74593206968291329) != 0):
                self.state = 1665
                self.type_()


            self.state = 1668
            self.match(Dart2Parser.OPERATOR_)
            self.state = 1669
            self.operator()
            self.state = 1670
            self.formalParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalOrNamedFormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalPositionalFormalParameters(self):
            return self.getTypedRuleContext(Dart2Parser.OptionalPositionalFormalParametersContext,0)


        def namedFormalParameters(self):
            return self.getTypedRuleContext(Dart2Parser.NamedFormalParametersContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_optionalOrNamedFormalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalOrNamedFormalParameters" ):
                listener.enterOptionalOrNamedFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalOrNamedFormalParameters" ):
                listener.exitOptionalOrNamedFormalParameters(self)




    def optionalOrNamedFormalParameters(self):

        localctx = Dart2Parser.OptionalOrNamedFormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_optionalOrNamedFormalParameters)
        try:
            self.state = 1674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1672
                self.optionalPositionalFormalParameters()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1673
                self.namedFormalParameters()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalParameterTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalPositionalParameterTypes(self):
            return self.getTypedRuleContext(Dart2Parser.OptionalPositionalParameterTypesContext,0)


        def namedParameterTypes(self):
            return self.getTypedRuleContext(Dart2Parser.NamedParameterTypesContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_optionalParameterTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalParameterTypes" ):
                listener.enterOptionalParameterTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalParameterTypes" ):
                listener.exitOptionalParameterTypes(self)




    def optionalParameterTypes(self):

        localctx = Dart2Parser.OptionalParameterTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_optionalParameterTypes)
        try:
            self.state = 1678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1676
                self.optionalPositionalParameterTypes()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1677
                self.namedParameterTypes()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalPositionalFormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OB(self):
            return self.getToken(Dart2Parser.OB, 0)

        def defaultFormalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.DefaultFormalParameterContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.DefaultFormalParameterContext,i)


        def CB(self):
            return self.getToken(Dart2Parser.CB, 0)

        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_optionalPositionalFormalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalPositionalFormalParameters" ):
                listener.enterOptionalPositionalFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalPositionalFormalParameters" ):
                listener.exitOptionalPositionalFormalParameters(self)




    def optionalPositionalFormalParameters(self):

        localctx = Dart2Parser.OptionalPositionalFormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_optionalPositionalFormalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.match(Dart2Parser.OB)
            self.state = 1681
            self.defaultFormalParameter()
            self.state = 1686
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1682
                    self.match(Dart2Parser.C)
                    self.state = 1683
                    self.defaultFormalParameter() 
                self.state = 1688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 1689
                self.match(Dart2Parser.C)


            self.state = 1692
            self.match(Dart2Parser.CB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalPositionalParameterTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OB(self):
            return self.getToken(Dart2Parser.OB, 0)

        def normalParameterTypes(self):
            return self.getTypedRuleContext(Dart2Parser.NormalParameterTypesContext,0)


        def CB(self):
            return self.getToken(Dart2Parser.CB, 0)

        def C(self):
            return self.getToken(Dart2Parser.C, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_optionalPositionalParameterTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalPositionalParameterTypes" ):
                listener.enterOptionalPositionalParameterTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalPositionalParameterTypes" ):
                listener.exitOptionalPositionalParameterTypes(self)




    def optionalPositionalParameterTypes(self):

        localctx = Dart2Parser.OptionalPositionalParameterTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_optionalPositionalParameterTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.match(Dart2Parser.OB)
            self.state = 1695
            self.normalParameterTypes()
            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 1696
                self.match(Dart2Parser.C)


            self.state = 1699
            self.match(Dart2Parser.CB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def normalParameterTypes(self):
            return self.getTypedRuleContext(Dart2Parser.NormalParameterTypesContext,0)


        def C(self):
            return self.getToken(Dart2Parser.C, 0)

        def optionalParameterTypes(self):
            return self.getTypedRuleContext(Dart2Parser.OptionalParameterTypesContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = Dart2Parser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.state = 1720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1701
                self.match(Dart2Parser.OP)
                self.state = 1702
                self.match(Dart2Parser.CP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1703
                self.match(Dart2Parser.OP)
                self.state = 1704
                self.normalParameterTypes()
                self.state = 1705
                self.match(Dart2Parser.C)
                self.state = 1706
                self.optionalParameterTypes()
                self.state = 1707
                self.match(Dart2Parser.CP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1709
                self.match(Dart2Parser.OP)
                self.state = 1710
                self.normalParameterTypes()
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 1711
                    self.match(Dart2Parser.C)


                self.state = 1714
                self.match(Dart2Parser.CP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1716
                self.match(Dart2Parser.OP)
                self.state = 1717
                self.optionalParameterTypes()
                self.state = 1718
                self.match(Dart2Parser.CP)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partHeader(self):
            return self.getTypedRuleContext(Dart2Parser.PartHeaderContext,0)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MetadataContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MetadataContext,i)


        def topLevelDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.TopLevelDeclarationContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.TopLevelDeclarationContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_partDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartDeclaration" ):
                listener.enterPartDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartDeclaration" ):
                listener.exitPartDeclaration(self)




    def partDeclaration(self):

        localctx = Dart2Parser.PartDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_partDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.partHeader()
            self.state = 1728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4125297258671374320) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1196874750185123541) != 0):
                self.state = 1723
                self.metadata()
                self.state = 1724
                self.topLevelDeclaration()
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def PART_(self):
            return self.getToken(Dart2Parser.PART_, 0)

        def uri(self):
            return self.getTypedRuleContext(Dart2Parser.UriContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_partDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartDirective" ):
                listener.enterPartDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartDirective" ):
                listener.exitPartDirective(self)




    def partDirective(self):

        localctx = Dart2Parser.PartDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_partDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.metadata()
            self.state = 1732
            self.match(Dart2Parser.PART_)
            self.state = 1733
            self.uri()
            self.state = 1734
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def PART_(self):
            return self.getToken(Dart2Parser.PART_, 0)

        def OF_(self):
            return self.getToken(Dart2Parser.OF_, 0)

        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def dottedIdentifierList(self):
            return self.getTypedRuleContext(Dart2Parser.DottedIdentifierListContext,0)


        def uri(self):
            return self.getTypedRuleContext(Dart2Parser.UriContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_partHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartHeader" ):
                listener.enterPartHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartHeader" ):
                listener.exitPartHeader(self)




    def partHeader(self):

        localctx = Dart2Parser.PartHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_partHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.metadata()
            self.state = 1737
            self.match(Dart2Parser.PART_)
            self.state = 1738
            self.match(Dart2Parser.OF_)
            self.state = 1741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 57, 58, 65, 67, 69, 72, 74, 75, 76, 81, 82, 84, 86, 87, 89, 91, 93, 94, 95, 98, 99, 100, 101, 102, 105, 106, 107, 110, 115, 120, 125]:
                self.state = 1739
                self.dottedIdentifierList()
                pass
            elif token in [123, 124]:
                self.state = 1740
                self.uri()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1743
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignableExpression(self):
            return self.getTypedRuleContext(Dart2Parser.AssignableExpressionContext,0)


        def postfixOperator(self):
            return self.getTypedRuleContext(Dart2Parser.PostfixOperatorContext,0)


        def primary(self):
            return self.getTypedRuleContext(Dart2Parser.PrimaryContext,0)


        def selector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.SelectorContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.SelectorContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = Dart2Parser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_postfixExpression)
        try:
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1745
                self.assignableExpression()
                self.state = 1746
                self.postfixOperator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1748
                self.primary()
                self.state = 1752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1749
                        self.selector() 
                    self.state = 1754
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def incrementOperator(self):
            return self.getTypedRuleContext(Dart2Parser.IncrementOperatorContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_postfixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixOperator" ):
                listener.enterPostfixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixOperator" ):
                listener.exitPostfixOperator(self)




    def postfixOperator(self):

        localctx = Dart2Parser.PostfixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_postfixOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self.incrementOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def minusOperator(self):
            return self.getTypedRuleContext(Dart2Parser.MinusOperatorContext,0)


        def negationOperator(self):
            return self.getTypedRuleContext(Dart2Parser.NegationOperatorContext,0)


        def tildeOperator(self):
            return self.getTypedRuleContext(Dart2Parser.TildeOperatorContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_prefixOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperator" ):
                listener.enterPrefixOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperator" ):
                listener.exitPrefixOperator(self)




    def prefixOperator(self):

        localctx = Dart2Parser.PrefixOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_prefixOperator)
        try:
            self.state = 1762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1759
                self.minusOperator()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1760
                self.negationOperator()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1761
                self.tildeOperator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thisExpression(self):
            return self.getTypedRuleContext(Dart2Parser.ThisExpressionContext,0)


        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def unconditionalAssignableSelector(self):
            return self.getTypedRuleContext(Dart2Parser.UnconditionalAssignableSelectorContext,0)


        def argumentPart(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentPartContext,0)


        def functionExpression(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(Dart2Parser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def newExpression(self):
            return self.getTypedRuleContext(Dart2Parser.NewExpressionContext,0)


        def constObjectExpression(self):
            return self.getTypedRuleContext(Dart2Parser.ConstObjectExpressionContext,0)


        def constructorInvocation(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorInvocationContext,0)


        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = Dart2Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_primary)
        try:
            self.state = 1779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1764
                self.thisExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1765
                self.match(Dart2Parser.SUPER_)
                self.state = 1766
                self.unconditionalAssignableSelector()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1767
                self.match(Dart2Parser.SUPER_)
                self.state = 1768
                self.argumentPart()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1769
                self.functionExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1770
                self.literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1771
                self.identifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1772
                self.newExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1773
                self.constObjectExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1774
                self.constructorInvocation()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1775
                self.match(Dart2Parser.OP)
                self.state = 1776
                self.expr()
                self.state = 1777
                self.match(Dart2Parser.CP)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.TypeIdentifierContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.TypeIdentifierContext,i)


        def D(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.D)
            else:
                return self.getToken(Dart2Parser.D, i)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = Dart2Parser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_qualifiedName)
        try:
            self.state = 1791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1781
                self.typeIdentifier()
                self.state = 1782
                self.match(Dart2Parser.D)
                self.state = 1783
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1785
                self.typeIdentifier()
                self.state = 1786
                self.match(Dart2Parser.D)
                self.state = 1787
                self.typeIdentifier()
                self.state = 1788
                self.match(Dart2Parser.D)
                self.state = 1789
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedirectingFactoryConstructorSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FACTORY_(self):
            return self.getToken(Dart2Parser.FACTORY_, 0)

        def constructorName(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorNameContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterListContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def constructorDesignation(self):
            return self.getTypedRuleContext(Dart2Parser.ConstructorDesignationContext,0)


        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_redirectingFactoryConstructorSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedirectingFactoryConstructorSignature" ):
                listener.enterRedirectingFactoryConstructorSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedirectingFactoryConstructorSignature" ):
                listener.exitRedirectingFactoryConstructorSignature(self)




    def redirectingFactoryConstructorSignature(self):

        localctx = Dart2Parser.RedirectingFactoryConstructorSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_redirectingFactoryConstructorSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1793
                self.match(Dart2Parser.CONST_)


            self.state = 1796
            self.match(Dart2Parser.FACTORY_)
            self.state = 1797
            self.constructorName()
            self.state = 1798
            self.formalParameterList()
            self.state = 1799
            self.match(Dart2Parser.EQ)
            self.state = 1800
            self.constructorDesignation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CO(self):
            return self.getToken(Dart2Parser.CO, 0)

        def THIS_(self):
            return self.getToken(Dart2Parser.THIS_, 0)

        def arguments(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentsContext,0)


        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_redirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedirection" ):
                listener.enterRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedirection" ):
                listener.exitRedirection(self)




    def redirection(self):

        localctx = Dart2Parser.RedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_redirection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.match(Dart2Parser.CO)
            self.state = 1803
            self.match(Dart2Parser.THIS_)
            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1804
                self.match(Dart2Parser.D)
                self.state = 1805
                self.identifier()


            self.state = 1808
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.BitwiseOrExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.BitwiseOrExpressionContext,i)


        def typeTest(self):
            return self.getTypedRuleContext(Dart2Parser.TypeTestContext,0)


        def typeCast(self):
            return self.getTypedRuleContext(Dart2Parser.TypeCastContext,0)


        def relationalOperator(self):
            return self.getTypedRuleContext(Dart2Parser.RelationalOperatorContext,0)


        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = Dart2Parser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_relationalExpression)
        try:
            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1810
                self.bitwiseOrExpression()
                self.state = 1816
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1811
                    self.typeTest()

                elif la_ == 2:
                    self.state = 1812
                    self.typeCast()

                elif la_ == 3:
                    self.state = 1813
                    self.relationalOperator()
                    self.state = 1814
                    self.bitwiseOrExpression()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1818
                self.match(Dart2Parser.SUPER_)
                self.state = 1819
                self.relationalOperator()
                self.state = 1820
                self.bitwiseOrExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(Dart2Parser.GT, 0)

        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def LTE(self):
            return self.getToken(Dart2Parser.LTE, 0)

        def LT(self):
            return self.getToken(Dart2Parser.LT, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_relationalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalOperator" ):
                listener.enterRelationalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalOperator" ):
                listener.exitRelationalOperator(self)




    def relationalOperator(self):

        localctx = Dart2Parser.RelationalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_relationalOperator)
        try:
            self.state = 1829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1824
                self.match(Dart2Parser.GT)
                self.state = 1825
                self.match(Dart2Parser.EQ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1826
                self.match(Dart2Parser.GT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1827
                self.match(Dart2Parser.LTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1828
                self.match(Dart2Parser.LT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reserved_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT_(self):
            return self.getToken(Dart2Parser.ASSERT_, 0)

        def BREAK_(self):
            return self.getToken(Dart2Parser.BREAK_, 0)

        def CASE_(self):
            return self.getToken(Dart2Parser.CASE_, 0)

        def CATCH_(self):
            return self.getToken(Dart2Parser.CATCH_, 0)

        def CLASS_(self):
            return self.getToken(Dart2Parser.CLASS_, 0)

        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def CONTINUE_(self):
            return self.getToken(Dart2Parser.CONTINUE_, 0)

        def DEFAULT_(self):
            return self.getToken(Dart2Parser.DEFAULT_, 0)

        def DO_(self):
            return self.getToken(Dart2Parser.DO_, 0)

        def ELSE_(self):
            return self.getToken(Dart2Parser.ELSE_, 0)

        def ENUM_(self):
            return self.getToken(Dart2Parser.ENUM_, 0)

        def EXTENDS_(self):
            return self.getToken(Dart2Parser.EXTENDS_, 0)

        def FALSE_(self):
            return self.getToken(Dart2Parser.FALSE_, 0)

        def FINAL_(self):
            return self.getToken(Dart2Parser.FINAL_, 0)

        def FINALLY_(self):
            return self.getToken(Dart2Parser.FINALLY_, 0)

        def FOR_(self):
            return self.getToken(Dart2Parser.FOR_, 0)

        def IF_(self):
            return self.getToken(Dart2Parser.IF_, 0)

        def IN_(self):
            return self.getToken(Dart2Parser.IN_, 0)

        def IS_(self):
            return self.getToken(Dart2Parser.IS_, 0)

        def NEW_(self):
            return self.getToken(Dart2Parser.NEW_, 0)

        def NULL_(self):
            return self.getToken(Dart2Parser.NULL_, 0)

        def RETHROW_(self):
            return self.getToken(Dart2Parser.RETHROW_, 0)

        def RETURN_(self):
            return self.getToken(Dart2Parser.RETURN_, 0)

        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def SWITCH_(self):
            return self.getToken(Dart2Parser.SWITCH_, 0)

        def THIS_(self):
            return self.getToken(Dart2Parser.THIS_, 0)

        def THROW_(self):
            return self.getToken(Dart2Parser.THROW_, 0)

        def TRUE_(self):
            return self.getToken(Dart2Parser.TRUE_, 0)

        def TRY_(self):
            return self.getToken(Dart2Parser.TRY_, 0)

        def VAR_(self):
            return self.getToken(Dart2Parser.VAR_, 0)

        def VOID_(self):
            return self.getToken(Dart2Parser.VOID_, 0)

        def WHILE_(self):
            return self.getToken(Dart2Parser.WHILE_, 0)

        def WITH_(self):
            return self.getToken(Dart2Parser.WITH_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_reserved_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReserved_word" ):
                listener.enterReserved_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReserved_word" ):
                listener.exitReserved_word(self)




    def reserved_word(self):

        localctx = Dart2Parser.Reserved_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_reserved_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            _la = self._input.LA(1)
            if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & -598553217396976135) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RethrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETHROW_(self):
            return self.getToken(Dart2Parser.RETHROW_, 0)

        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_rethrowStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRethrowStatement" ):
                listener.enterRethrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRethrowStatement" ):
                listener.exitRethrowStatement(self)




    def rethrowStatement(self):

        localctx = Dart2Parser.RethrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_rethrowStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.match(Dart2Parser.RETHROW_)
            self.state = 1834
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN_(self):
            return self.getToken(Dart2Parser.RETURN_, 0)

        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = Dart2Parser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(Dart2Parser.RETURN_)
            self.state = 1838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8734731060839972864) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2271484645057699477) != 0):
                self.state = 1837
                self.expr()


            self.state = 1840
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Dart2Parser.NOT, 0)

        def assignableSelector(self):
            return self.getTypedRuleContext(Dart2Parser.AssignableSelectorContext,0)


        def argumentPart(self):
            return self.getTypedRuleContext(Dart2Parser.ArgumentPartContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector" ):
                listener.enterSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector" ):
                listener.exitSelector(self)




    def selector(self):

        localctx = Dart2Parser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_selector)
        try:
            self.state = 1845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1842
                self.match(Dart2Parser.NOT)
                pass
            elif token in [12, 29, 41, 42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1843
                self.assignableSelector()
                pass
            elif token in [20, 31]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1844
                self.argumentPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOrMapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Dart2Parser.TypeArgumentsContext,0)


        def elements(self):
            return self.getTypedRuleContext(Dart2Parser.ElementsContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_setOrMapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOrMapLiteral" ):
                listener.enterSetOrMapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOrMapLiteral" ):
                listener.exitSetOrMapLiteral(self)




    def setOrMapLiteral(self):

        localctx = Dart2Parser.SetOrMapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_setOrMapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1847
                self.match(Dart2Parser.CONST_)


            self.state = 1851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1850
                self.typeArguments()


            self.state = 1853
            self.match(Dart2Parser.OBC)
            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8734731060839923712) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2271484645058780821) != 0):
                self.state = 1854
                self.elements()


            self.state = 1857
            self.match(Dart2Parser.CBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET_(self):
            return self.getToken(Dart2Parser.SET_, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(Dart2Parser.FormalParameterListContext,0)


        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_setterSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetterSignature" ):
                listener.enterSetterSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetterSignature" ):
                listener.exitSetterSignature(self)




    def setterSignature(self):

        localctx = Dart2Parser.SetterSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_setterSignature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57 or _la==58 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 74593206968291329) != 0):
                self.state = 1859
                self.type_()


            self.state = 1862
            self.match(Dart2Parser.SET_)
            self.state = 1863
            self.identifier()
            self.state = 1864
            self.formalParameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.AdditiveExpressionContext,i)


        def shiftOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.ShiftOperatorContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.ShiftOperatorContext,i)


        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = Dart2Parser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_shiftExpression)
        try:
            self.state = 1883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1866
                self.additiveExpression()
                self.state = 1872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1867
                        self.shiftOperator()
                        self.state = 1868
                        self.additiveExpression() 
                    self.state = 1874
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1875
                self.match(Dart2Parser.SUPER_)
                self.state = 1879 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1876
                        self.shiftOperator()
                        self.state = 1877
                        self.additiveExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1881 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LTLT(self):
            return self.getToken(Dart2Parser.LTLT, 0)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.GT)
            else:
                return self.getToken(Dart2Parser.GT, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_shiftOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftOperator" ):
                listener.enterShiftOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftOperator" ):
                listener.exitShiftOperator(self)




    def shiftOperator(self):

        localctx = Dart2Parser.ShiftOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_shiftOperator)
        try:
            self.state = 1891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1885
                self.match(Dart2Parser.LTLT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1886
                self.match(Dart2Parser.GT)
                self.state = 1887
                self.match(Dart2Parser.GT)
                self.state = 1888
                self.match(Dart2Parser.GT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1889
                self.match(Dart2Parser.GT)
                self.state = 1890
                self.match(Dart2Parser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaredIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.DeclaredIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def COVARIANT_(self):
            return self.getToken(Dart2Parser.COVARIANT_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_simpleFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFormalParameter" ):
                listener.enterSimpleFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFormalParameter" ):
                listener.exitSimpleFormalParameter(self)




    def simpleFormalParameter(self):

        localctx = Dart2Parser.SimpleFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_simpleFormalParameter)
        try:
            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1893
                self.declaredIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1895
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1894
                    self.match(Dart2Parser.COVARIANT_)


                self.state = 1897
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleLineStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SingleLineString(self):
            return self.getToken(Dart2Parser.SingleLineString, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_singleLineString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleLineString" ):
                listener.enterSingleLineString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleLineString" ):
                listener.exitSingleLineString(self)




    def singleLineString(self):

        localctx = Dart2Parser.SingleLineStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_singleLineString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.match(Dart2Parser.SingleLineString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpreadElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def DDD(self):
            return self.getToken(Dart2Parser.DDD, 0)

        def DDDQ(self):
            return self.getToken(Dart2Parser.DDDQ, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_spreadElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpreadElement" ):
                listener.enterSpreadElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpreadElement" ):
                listener.exitSpreadElement(self)




    def spreadElement(self):

        localctx = Dart2Parser.SpreadElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_spreadElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            _la = self._input.LA(1)
            if not(_la==14 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1903
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonLabelledStatement(self):
            return self.getTypedRuleContext(Dart2Parser.NonLabelledStatementContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.LabelContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.LabelContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = Dart2Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1905
                    self.label() 
                self.state = 1910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

            self.state = 1911
            self.nonLabelledStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.StatementContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = Dart2Parser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1913
                    self.statement() 
                self.state = 1918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticFinalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_staticFinalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticFinalDeclaration" ):
                listener.enterStaticFinalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticFinalDeclaration" ):
                listener.exitStaticFinalDeclaration(self)




    def staticFinalDeclaration(self):

        localctx = Dart2Parser.StaticFinalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_staticFinalDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1919
            self.identifier()
            self.state = 1920
            self.match(Dart2Parser.EQ)
            self.state = 1921
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticFinalDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def staticFinalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.StaticFinalDeclarationContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.StaticFinalDeclarationContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_staticFinalDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticFinalDeclarationList" ):
                listener.enterStaticFinalDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticFinalDeclarationList" ):
                listener.exitStaticFinalDeclarationList(self)




    def staticFinalDeclarationList(self):

        localctx = Dart2Parser.StaticFinalDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_staticFinalDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            self.staticFinalDeclaration()
            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 1924
                self.match(Dart2Parser.C)
                self.state = 1925
                self.staticFinalDeclaration()
                self.state = 1930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multilineString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.MultilineStringContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.MultilineStringContext,i)


        def singleLineString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.SingleLineStringContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.SingleLineStringContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = Dart2Parser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1933
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [124]:
                        self.state = 1931
                        self.multilineString()
                        pass
                    elif token in [123]:
                        self.state = 1932
                        self.singleLineString()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1935 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS_(self):
            return self.getToken(Dart2Parser.EXTENDS_, 0)

        def typeNotVoid(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidContext,0)


        def mixins(self):
            return self.getTypedRuleContext(Dart2Parser.MixinsContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_superclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperclass" ):
                listener.enterSuperclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperclass" ):
                listener.exitSuperclass(self)




    def superclass(self):

        localctx = Dart2Parser.SuperclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_superclass)
        self._la = 0 # Token type
        try:
            self.state = 1943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1937
                self.match(Dart2Parser.EXTENDS_)
                self.state = 1938
                self.typeNotVoid()
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1939
                    self.mixins()


                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.mixins()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_(self):
            return self.getToken(Dart2Parser.CASE_, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CO(self):
            return self.getToken(Dart2Parser.CO, 0)

        def statements(self):
            return self.getTypedRuleContext(Dart2Parser.StatementsContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.LabelContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.LabelContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_switchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchCase" ):
                listener.enterSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchCase" ):
                listener.exitSwitchCase(self)




    def switchCase(self):

        localctx = Dart2Parser.SwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_switchCase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 486388759756013568) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1190119350744059541) != 0):
                self.state = 1945
                self.label()
                self.state = 1950
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1951
            self.match(Dart2Parser.CASE_)
            self.state = 1952
            self.expr()
            self.state = 1953
            self.match(Dart2Parser.CO)
            self.state = 1954
            self.statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH_(self):
            return self.getToken(Dart2Parser.SWITCH_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def OBC(self):
            return self.getToken(Dart2Parser.OBC, 0)

        def CBC(self):
            return self.getToken(Dart2Parser.CBC, 0)

        def switchCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.SwitchCaseContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.SwitchCaseContext,i)


        def defaultCase(self):
            return self.getTypedRuleContext(Dart2Parser.DefaultCaseContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = Dart2Parser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            self.match(Dart2Parser.SWITCH_)
            self.state = 1957
            self.match(Dart2Parser.OP)
            self.state = 1958
            self.expr()
            self.state = 1959
            self.match(Dart2Parser.CP)
            self.state = 1960
            self.match(Dart2Parser.OBC)
            self.state = 1964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1961
                    self.switchCase() 
                self.state = 1966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

            self.state = 1968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 486388759756013568) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1190119350744059543) != 0):
                self.state = 1967
                self.defaultCase()


            self.state = 1970
            self.match(Dart2Parser.CBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PO(self):
            return self.getToken(Dart2Parser.PO, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.IdentifierContext,i)


        def operator(self):
            return self.getTypedRuleContext(Dart2Parser.OperatorContext,0)


        def VOID_(self):
            return self.getToken(Dart2Parser.VOID_, 0)

        def D(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.D)
            else:
                return self.getToken(Dart2Parser.D, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_symbolLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolLiteral" ):
                listener.enterSymbolLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolLiteral" ):
                listener.exitSymbolLiteral(self)




    def symbolLiteral(self):

        localctx = Dart2Parser.SymbolLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_symbolLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self.match(Dart2Parser.PO)
            self.state = 1983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 57, 58, 65, 67, 69, 72, 74, 75, 76, 81, 82, 84, 86, 87, 89, 91, 93, 94, 95, 98, 99, 100, 101, 102, 105, 106, 107, 110, 115, 120, 125]:
                self.state = 1973
                self.identifier()
                self.state = 1978
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1974
                        self.match(Dart2Parser.D)
                        self.state = 1975
                        self.identifier() 
                    self.state = 1980
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

                pass
            elif token in [1, 8, 16, 19, 20, 21, 22, 25, 29, 32, 33, 35, 48, 49, 51, 52]:
                self.state = 1981
                self.operator()
                pass
            elif token in [117]:
                self.state = 1982
                self.match(Dart2Parser.VOID_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThisExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS_(self):
            return self.getToken(Dart2Parser.THIS_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_thisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)




    def thisExpression(self):

        localctx = Dart2Parser.ThisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_thisExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.match(Dart2Parser.THIS_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW_(self):
            return self.getToken(Dart2Parser.THROW_, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_throwExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowExpression" ):
                listener.enterThrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowExpression" ):
                listener.exitThrowExpression(self)




    def throwExpression(self):

        localctx = Dart2Parser.ThrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_throwExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(Dart2Parser.THROW_)
            self.state = 1988
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowExpressionWithoutCascadeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW_(self):
            return self.getToken(Dart2Parser.THROW_, 0)

        def expressionWithoutCascade(self):
            return self.getTypedRuleContext(Dart2Parser.ExpressionWithoutCascadeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_throwExpressionWithoutCascade

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowExpressionWithoutCascade" ):
                listener.enterThrowExpressionWithoutCascade(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowExpressionWithoutCascade" ):
                listener.exitThrowExpressionWithoutCascade(self)




    def throwExpressionWithoutCascade(self):

        localctx = Dart2Parser.ThrowExpressionWithoutCascadeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_throwExpressionWithoutCascade)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.match(Dart2Parser.THROW_)
            self.state = 1991
            self.expressionWithoutCascade()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TildeOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQUIG(self):
            return self.getToken(Dart2Parser.SQUIG, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_tildeOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTildeOperator" ):
                listener.enterTildeOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTildeOperator" ):
                listener.exitTildeOperator(self)




    def tildeOperator(self):

        localctx = Dart2Parser.TildeOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_tildeOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.match(Dart2Parser.SQUIG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.ClassDeclarationContext,0)


        def mixinDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.MixinDeclarationContext,0)


        def extensionDeclaration(self):
            return self.getTypedRuleContext(Dart2Parser.ExtensionDeclarationContext,0)


        def enumType(self):
            return self.getTypedRuleContext(Dart2Parser.EnumTypeContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(Dart2Parser.TypeAliasContext,0)


        def EXTERNAL_(self):
            return self.getToken(Dart2Parser.EXTERNAL_, 0)

        def functionSignature(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionSignatureContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getterSignature(self):
            return self.getTypedRuleContext(Dart2Parser.GetterSignatureContext,0)


        def setterSignature(self):
            return self.getTypedRuleContext(Dart2Parser.SetterSignatureContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionBodyContext,0)


        def staticFinalDeclarationList(self):
            return self.getTypedRuleContext(Dart2Parser.StaticFinalDeclarationListContext,0)


        def FINAL_(self):
            return self.getToken(Dart2Parser.FINAL_, 0)

        def CONST_(self):
            return self.getToken(Dart2Parser.CONST_, 0)

        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def LATE_(self):
            return self.getToken(Dart2Parser.LATE_, 0)

        def initializedIdentifierList(self):
            return self.getTypedRuleContext(Dart2Parser.InitializedIdentifierListContext,0)


        def varOrType(self):
            return self.getTypedRuleContext(Dart2Parser.VarOrTypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_topLevelDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDeclaration" ):
                listener.enterTopLevelDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDeclaration" ):
                listener.exitTopLevelDeclaration(self)




    def topLevelDeclaration(self):

        localctx = Dart2Parser.TopLevelDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_topLevelDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1995
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1996
                self.mixinDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1997
                self.extensionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1998
                self.enumType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1999
                self.typeAlias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2000
                self.match(Dart2Parser.EXTERNAL_)
                self.state = 2001
                self.functionSignature()
                self.state = 2002
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2004
                self.match(Dart2Parser.EXTERNAL_)
                self.state = 2005
                self.getterSignature()
                self.state = 2006
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2008
                self.match(Dart2Parser.EXTERNAL_)
                self.state = 2009
                self.setterSignature()
                self.state = 2010
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2012
                self.functionSignature()
                self.state = 2013
                self.functionBody()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2015
                self.getterSignature()
                self.state = 2016
                self.functionBody()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2018
                self.setterSignature()
                self.state = 2019
                self.functionBody()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2021
                _la = self._input.LA(1)
                if not(_la==63 or _la==78):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 2022
                    self.type_()


                self.state = 2025
                self.staticFinalDeclarationList()
                self.state = 2026
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2028
                self.match(Dart2Parser.LATE_)
                self.state = 2029
                self.match(Dart2Parser.FINAL_)
                self.state = 2031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 2030
                    self.type_()


                self.state = 2033
                self.initializedIdentifierList()
                self.state = 2034
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2036
                    self.match(Dart2Parser.LATE_)


                self.state = 2039
                self.varOrType()
                self.state = 2040
                self.initializedIdentifierList()
                self.state = 2041
                self.match(Dart2Parser.SC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY_(self):
            return self.getToken(Dart2Parser.TRY_, 0)

        def block(self):
            return self.getTypedRuleContext(Dart2Parser.BlockContext,0)


        def finallyPart(self):
            return self.getTypedRuleContext(Dart2Parser.FinallyPartContext,0)


        def onPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.OnPartContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.OnPartContext,i)


        def getRuleIndex(self):
            return Dart2Parser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = Dart2Parser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.match(Dart2Parser.TRY_)
            self.state = 2046
            self.block()
            self.state = 2056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61, 99]:
                self.state = 2048 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2047
                        self.onPart()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2050 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 2052
                    self.finallyPart()


                pass
            elif token in [79]:
                self.state = 2055
                self.finallyPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionType(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionTypeContext,0)


        def QU(self):
            return self.getToken(Dart2Parser.QU, 0)

        def typeNotFunction(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotFunctionContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = Dart2Parser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_type)
        self._la = 0 # Token type
        try:
            self.state = 2063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2058
                self.functionType()
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 2059
                    self.match(Dart2Parser.QU)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2062
                self.typeNotFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEDEF_(self):
            return self.getToken(Dart2Parser.TYPEDEF_, 0)

        def typeIdentifier(self):
            return self.getTypedRuleContext(Dart2Parser.TypeIdentifierContext,0)


        def EQ(self):
            return self.getToken(Dart2Parser.EQ, 0)

        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(Dart2Parser.TypeParametersContext,0)


        def functionTypeAlias(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionTypeAliasContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)




    def typeAlias(self):

        localctx = Dart2Parser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.state = 2076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2065
                self.match(Dart2Parser.TYPEDEF_)
                self.state = 2066
                self.typeIdentifier()
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2067
                    self.typeParameters()


                self.state = 2070
                self.match(Dart2Parser.EQ)
                self.state = 2071
                self.type_()
                self.state = 2072
                self.match(Dart2Parser.SC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2074
                self.match(Dart2Parser.TYPEDEF_)
                self.state = 2075
                self.functionTypeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Dart2Parser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(Dart2Parser.TypeListContext,0)


        def GT(self):
            return self.getToken(Dart2Parser.GT, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = Dart2Parser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_typeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self.match(Dart2Parser.LT)
            self.state = 2079
            self.typeList()
            self.state = 2080
            self.match(Dart2Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeCastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asOperator(self):
            return self.getTypedRuleContext(Dart2Parser.AsOperatorContext,0)


        def typeNotVoid(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_typeCast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeCast" ):
                listener.enterTypeCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeCast" ):
                listener.exitTypeCast(self)




    def typeCast(self):

        localctx = Dart2Parser.TypeCastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_typeCast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            self.asOperator()
            self.state = 2083
            self.typeNotVoid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_typedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedIdentifier" ):
                listener.enterTypedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedIdentifier" ):
                listener.exitTypedIdentifier(self)




    def typedIdentifier(self):

        localctx = Dart2Parser.TypedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_typedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self.type_()
            self.state = 2086
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Dart2Parser.IDENTIFIER, 0)

        def ASYNC_(self):
            return self.getToken(Dart2Parser.ASYNC_, 0)

        def HIDE_(self):
            return self.getToken(Dart2Parser.HIDE_, 0)

        def OF_(self):
            return self.getToken(Dart2Parser.OF_, 0)

        def ON_(self):
            return self.getToken(Dart2Parser.ON_, 0)

        def SHOW_(self):
            return self.getToken(Dart2Parser.SHOW_, 0)

        def SYNC_(self):
            return self.getToken(Dart2Parser.SYNC_, 0)

        def AWAIT_(self):
            return self.getToken(Dart2Parser.AWAIT_, 0)

        def YIELD_(self):
            return self.getToken(Dart2Parser.YIELD_, 0)

        def DYNAMIC_(self):
            return self.getToken(Dart2Parser.DYNAMIC_, 0)

        def NATIVE_(self):
            return self.getToken(Dart2Parser.NATIVE_, 0)

        def FUNCTION_(self):
            return self.getToken(Dart2Parser.FUNCTION_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)




    def typeIdentifier(self):

        localctx = Dart2Parser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_typeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            _la = self._input.LA(1)
            if not(_la==57 or _la==58 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 74311731991580673) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.TypeContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.TypeContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = Dart2Parser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            self.type_()
            self.state = 2095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2091
                self.match(Dart2Parser.C)
                self.state = 2092
                self.type_()
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.TypeIdentifierContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.TypeIdentifierContext,i)


        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = Dart2Parser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            self.typeIdentifier()
            self.state = 2101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 2099
                self.match(Dart2Parser.D)
                self.state = 2100
                self.typeIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNotFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VOID_(self):
            return self.getToken(Dart2Parser.VOID_, 0)

        def typeNotVoidNotFunction(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidNotFunctionContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_typeNotFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNotFunction" ):
                listener.enterTypeNotFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNotFunction" ):
                listener.exitTypeNotFunction(self)




    def typeNotFunction(self):

        localctx = Dart2Parser.TypeNotFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_typeNotFunction)
        try:
            self.state = 2105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2103
                self.match(Dart2Parser.VOID_)
                pass
            elif token in [57, 58, 69, 81, 84, 95, 98, 99, 106, 110, 120, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2104
                self.typeNotVoidNotFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNotVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionType(self):
            return self.getTypedRuleContext(Dart2Parser.FunctionTypeContext,0)


        def QU(self):
            return self.getToken(Dart2Parser.QU, 0)

        def typeNotVoidNotFunction(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidNotFunctionContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_typeNotVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNotVoid" ):
                listener.enterTypeNotVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNotVoid" ):
                listener.exitTypeNotVoid(self)




    def typeNotVoid(self):

        localctx = Dart2Parser.TypeNotVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_typeNotVoid)
        try:
            self.state = 2112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2107
                self.functionType()
                self.state = 2109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 2108
                    self.match(Dart2Parser.QU)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2111
                self.typeNotVoidNotFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNotVoidListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeNotVoid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.TypeNotVoidContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.TypeNotVoidContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_typeNotVoidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNotVoidList" ):
                listener.enterTypeNotVoidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNotVoidList" ):
                listener.exitTypeNotVoidList(self)




    def typeNotVoidList(self):

        localctx = Dart2Parser.TypeNotVoidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_typeNotVoidList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.typeNotVoid()
            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2115
                self.match(Dart2Parser.C)
                self.state = 2116
                self.typeNotVoid()
                self.state = 2121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNotVoidNotFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNameContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(Dart2Parser.TypeArgumentsContext,0)


        def QU(self):
            return self.getToken(Dart2Parser.QU, 0)

        def FUNCTION_(self):
            return self.getToken(Dart2Parser.FUNCTION_, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_typeNotVoidNotFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNotVoidNotFunction" ):
                listener.enterTypeNotVoidNotFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNotVoidNotFunction" ):
                listener.exitTypeNotVoidNotFunction(self)




    def typeNotVoidNotFunction(self):

        localctx = Dart2Parser.TypeNotVoidNotFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_typeNotVoidNotFunction)
        try:
            self.state = 2133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2122
                self.typeName()
                self.state = 2124
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 2123
                    self.typeArguments()


                self.state = 2127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 2126
                    self.match(Dart2Parser.QU)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2129
                self.match(Dart2Parser.FUNCTION_)
                self.state = 2131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 2130
                    self.match(Dart2Parser.QU)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNotVoidNotFunctionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeNotVoidNotFunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.TypeNotVoidNotFunctionContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.TypeNotVoidNotFunctionContext,i)


        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_typeNotVoidNotFunctionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNotVoidNotFunctionList" ):
                listener.enterTypeNotVoidNotFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNotVoidNotFunctionList" ):
                listener.exitTypeNotVoidNotFunctionList(self)




    def typeNotVoidNotFunctionList(self):

        localctx = Dart2Parser.TypeNotVoidNotFunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_typeNotVoidNotFunctionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.typeNotVoidNotFunction()
            self.state = 2140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2136
                self.match(Dart2Parser.C)
                self.state = 2137
                self.typeNotVoidNotFunction()
                self.state = 2142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadata(self):
            return self.getTypedRuleContext(Dart2Parser.MetadataContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def EXTENDS_(self):
            return self.getToken(Dart2Parser.EXTENDS_, 0)

        def typeNotVoid(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = Dart2Parser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.metadata()
            self.state = 2144
            self.identifier()
            self.state = 2147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 2145
                self.match(Dart2Parser.EXTENDS_)
                self.state = 2146
                self.typeNotVoid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Dart2Parser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Dart2Parser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(Dart2Parser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(Dart2Parser.GT, 0)

        def C(self, i:int=None):
            if i is None:
                return self.getTokens(Dart2Parser.C)
            else:
                return self.getToken(Dart2Parser.C, i)

        def getRuleIndex(self):
            return Dart2Parser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = Dart2Parser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2149
            self.match(Dart2Parser.LT)
            self.state = 2150
            self.typeParameter()
            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5:
                self.state = 2151
                self.match(Dart2Parser.C)
                self.state = 2152
                self.typeParameter()
                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2158
            self.match(Dart2Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(Dart2Parser.IsOperatorContext,0)


        def typeNotVoid(self):
            return self.getTypedRuleContext(Dart2Parser.TypeNotVoidContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_typeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTest" ):
                listener.enterTypeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTest" ):
                listener.exitTypeTest(self)




    def typeTest(self):

        localctx = Dart2Parser.TypeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_typeTest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2160
            self.isOperator()
            self.state = 2161
            self.typeNotVoid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixOperator(self):
            return self.getTypedRuleContext(Dart2Parser.PrefixOperatorContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(Dart2Parser.UnaryExpressionContext,0)


        def awaitExpression(self):
            return self.getTypedRuleContext(Dart2Parser.AwaitExpressionContext,0)


        def postfixExpression(self):
            return self.getTypedRuleContext(Dart2Parser.PostfixExpressionContext,0)


        def SUPER_(self):
            return self.getToken(Dart2Parser.SUPER_, 0)

        def minusOperator(self):
            return self.getTypedRuleContext(Dart2Parser.MinusOperatorContext,0)


        def tildeOperator(self):
            return self.getTypedRuleContext(Dart2Parser.TildeOperatorContext,0)


        def incrementOperator(self):
            return self.getTypedRuleContext(Dart2Parser.IncrementOperatorContext,0)


        def assignableExpression(self):
            return self.getTypedRuleContext(Dart2Parser.AssignableExpressionContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = Dart2Parser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_unaryExpression)
        try:
            self.state = 2177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.prefixOperator()
                self.state = 2164
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2166
                self.awaitExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2167
                self.postfixExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2170
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [25]:
                    self.state = 2168
                    self.minusOperator()
                    pass
                elif token in [51]:
                    self.state = 2169
                    self.tildeOperator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2172
                self.match(Dart2Parser.SUPER_)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2174
                self.incrementOperator()
                self.state = 2175
                self.assignableExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnconditionalAssignableSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OB(self):
            return self.getToken(Dart2Parser.OB, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CB(self):
            return self.getToken(Dart2Parser.CB, 0)

        def D(self):
            return self.getToken(Dart2Parser.D, 0)

        def identifier(self):
            return self.getTypedRuleContext(Dart2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_unconditionalAssignableSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnconditionalAssignableSelector" ):
                listener.enterUnconditionalAssignableSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnconditionalAssignableSelector" ):
                listener.exitUnconditionalAssignableSelector(self)




    def unconditionalAssignableSelector(self):

        localctx = Dart2Parser.UnconditionalAssignableSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_unconditionalAssignableSelector)
        try:
            self.state = 2185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2179
                self.match(Dart2Parser.OB)
                self.state = 2180
                self.expr()
                self.state = 2181
                self.match(Dart2Parser.CB)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2183
                self.match(Dart2Parser.D)
                self.state = 2184
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UriContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_uri

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUri" ):
                listener.enterUri(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUri" ):
                listener.exitUri(self)




    def uri(self):

        localctx = Dart2Parser.UriContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_uri)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2187
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UriTestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifierList(self):
            return self.getTypedRuleContext(Dart2Parser.DottedIdentifierListContext,0)


        def EE(self):
            return self.getToken(Dart2Parser.EE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(Dart2Parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_uriTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUriTest" ):
                listener.enterUriTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUriTest" ):
                listener.exitUriTest(self)




    def uriTest(self):

        localctx = Dart2Parser.UriTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_uriTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            self.dottedIdentifierList()
            self.state = 2192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 2190
                self.match(Dart2Parser.EE)
                self.state = 2191
                self.stringLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarOrTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_(self):
            return self.getToken(Dart2Parser.VAR_, 0)

        def type_(self):
            return self.getTypedRuleContext(Dart2Parser.TypeContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_varOrType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarOrType" ):
                listener.enterVarOrType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarOrType" ):
                listener.exitVarOrType(self)




    def varOrType(self):

        localctx = Dart2Parser.VarOrTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_varOrType)
        try:
            self.state = 2196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2194
                self.match(Dart2Parser.VAR_)
                pass
            elif token in [57, 58, 69, 81, 84, 95, 98, 99, 106, 110, 117, 120, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2195
                self.type_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE_(self):
            return self.getToken(Dart2Parser.WHILE_, 0)

        def OP(self):
            return self.getToken(Dart2Parser.OP, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def CP(self):
            return self.getToken(Dart2Parser.CP, 0)

        def statement(self):
            return self.getTypedRuleContext(Dart2Parser.StatementContext,0)


        def getRuleIndex(self):
            return Dart2Parser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = Dart2Parser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.match(Dart2Parser.WHILE_)
            self.state = 2199
            self.match(Dart2Parser.OP)
            self.state = 2200
            self.expr()
            self.state = 2201
            self.match(Dart2Parser.CP)
            self.state = 2202
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldEachStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD_(self):
            return self.getToken(Dart2Parser.YIELD_, 0)

        def ST(self):
            return self.getToken(Dart2Parser.ST, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_yieldEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldEachStatement" ):
                listener.enterYieldEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldEachStatement" ):
                listener.exitYieldEachStatement(self)




    def yieldEachStatement(self):

        localctx = Dart2Parser.YieldEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_yieldEachStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2204
            self.match(Dart2Parser.YIELD_)
            self.state = 2205
            self.match(Dart2Parser.ST)
            self.state = 2206
            self.expr()
            self.state = 2207
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD_(self):
            return self.getToken(Dart2Parser.YIELD_, 0)

        def expr(self):
            return self.getTypedRuleContext(Dart2Parser.ExprContext,0)


        def SC(self):
            return self.getToken(Dart2Parser.SC, 0)

        def getRuleIndex(self):
            return Dart2Parser.RULE_yieldStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)




    def yieldStatement(self):

        localctx = Dart2Parser.YieldStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_yieldStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self.match(Dart2Parser.YIELD_)
            self.state = 2210
            self.expr()
            self.state = 2211
            self.match(Dart2Parser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[21] = self.cascade_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def cascade_sempred(self, localctx:CascadeContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         




