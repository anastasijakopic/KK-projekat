# Generated from grammar/Dart2Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,273,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,
        205,8,33,1,34,4,34,208,8,34,11,34,12,34,209,1,35,4,35,213,8,35,11,
        35,12,35,214,1,35,1,35,5,35,219,8,35,10,35,12,35,222,9,35,1,36,1,
        36,1,36,1,36,5,36,228,8,36,10,36,12,36,231,9,36,1,36,1,36,1,37,1,
        37,5,37,237,8,37,10,37,12,37,240,9,37,1,38,1,38,1,38,1,38,5,38,246,
        8,38,10,38,12,38,249,9,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,257,
        8,39,10,39,12,39,260,9,39,1,39,1,39,1,39,1,39,1,39,1,40,4,40,268,
        8,40,11,40,12,40,269,1,40,1,40,1,258,0,41,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,1,0,6,1,0,48,57,2,0,34,34,92,92,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,
        282,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,1,83,1,0,0,0,3,86,1,0,0,0,5,91,1,0,0,0,7,95,1,0,0,0,
        9,101,1,0,0,0,11,104,1,0,0,0,13,111,1,0,0,0,15,115,1,0,0,0,17,121,
        1,0,0,0,19,126,1,0,0,0,21,130,1,0,0,0,23,137,1,0,0,0,25,144,1,0,
        0,0,27,149,1,0,0,0,29,151,1,0,0,0,31,153,1,0,0,0,33,155,1,0,0,0,
        35,157,1,0,0,0,37,159,1,0,0,0,39,162,1,0,0,0,41,165,1,0,0,0,43,167,
        1,0,0,0,45,170,1,0,0,0,47,172,1,0,0,0,49,175,1,0,0,0,51,178,1,0,
        0,0,53,181,1,0,0,0,55,183,1,0,0,0,57,185,1,0,0,0,59,187,1,0,0,0,
        61,189,1,0,0,0,63,191,1,0,0,0,65,193,1,0,0,0,67,204,1,0,0,0,69,207,
        1,0,0,0,71,212,1,0,0,0,73,223,1,0,0,0,75,234,1,0,0,0,77,241,1,0,
        0,0,79,252,1,0,0,0,81,267,1,0,0,0,83,84,5,105,0,0,84,85,5,102,0,
        0,85,2,1,0,0,0,86,87,5,101,0,0,87,88,5,108,0,0,88,89,5,115,0,0,89,
        90,5,101,0,0,90,4,1,0,0,0,91,92,5,102,0,0,92,93,5,111,0,0,93,94,
        5,114,0,0,94,6,1,0,0,0,95,96,5,119,0,0,96,97,5,104,0,0,97,98,5,105,
        0,0,98,99,5,108,0,0,99,100,5,101,0,0,100,8,1,0,0,0,101,102,5,100,
        0,0,102,103,5,111,0,0,103,10,1,0,0,0,104,105,5,114,0,0,105,106,5,
        101,0,0,106,107,5,116,0,0,107,108,5,117,0,0,108,109,5,114,0,0,109,
        110,5,110,0,0,110,12,1,0,0,0,111,112,5,118,0,0,112,113,5,97,0,0,
        113,114,5,114,0,0,114,14,1,0,0,0,115,116,5,102,0,0,116,117,5,105,
        0,0,117,118,5,110,0,0,118,119,5,97,0,0,119,120,5,108,0,0,120,16,
        1,0,0,0,121,122,5,98,0,0,122,123,5,111,0,0,123,124,5,111,0,0,124,
        125,5,108,0,0,125,18,1,0,0,0,126,127,5,105,0,0,127,128,5,110,0,0,
        128,129,5,116,0,0,129,20,1,0,0,0,130,131,5,100,0,0,131,132,5,111,
        0,0,132,133,5,117,0,0,133,134,5,98,0,0,134,135,5,108,0,0,135,136,
        5,101,0,0,136,22,1,0,0,0,137,138,5,83,0,0,138,139,5,116,0,0,139,
        140,5,114,0,0,140,141,5,105,0,0,141,142,5,110,0,0,142,143,5,103,
        0,0,143,24,1,0,0,0,144,145,5,118,0,0,145,146,5,111,0,0,146,147,5,
        105,0,0,147,148,5,100,0,0,148,26,1,0,0,0,149,150,5,43,0,0,150,28,
        1,0,0,0,151,152,5,45,0,0,152,30,1,0,0,0,153,154,5,42,0,0,154,32,
        1,0,0,0,155,156,5,47,0,0,156,34,1,0,0,0,157,158,5,61,0,0,158,36,
        1,0,0,0,159,160,5,61,0,0,160,161,5,61,0,0,161,38,1,0,0,0,162,163,
        5,33,0,0,163,164,5,61,0,0,164,40,1,0,0,0,165,166,5,60,0,0,166,42,
        1,0,0,0,167,168,5,60,0,0,168,169,5,61,0,0,169,44,1,0,0,0,170,171,
        5,62,0,0,171,46,1,0,0,0,172,173,5,62,0,0,173,174,5,61,0,0,174,48,
        1,0,0,0,175,176,5,38,0,0,176,177,5,38,0,0,177,50,1,0,0,0,178,179,
        5,124,0,0,179,180,5,124,0,0,180,52,1,0,0,0,181,182,5,40,0,0,182,
        54,1,0,0,0,183,184,5,41,0,0,184,56,1,0,0,0,185,186,5,123,0,0,186,
        58,1,0,0,0,187,188,5,125,0,0,188,60,1,0,0,0,189,190,5,59,0,0,190,
        62,1,0,0,0,191,192,5,44,0,0,192,64,1,0,0,0,193,194,5,46,0,0,194,
        66,1,0,0,0,195,196,5,116,0,0,196,197,5,114,0,0,197,198,5,117,0,0,
        198,205,5,101,0,0,199,200,5,102,0,0,200,201,5,97,0,0,201,202,5,108,
        0,0,202,203,5,115,0,0,203,205,5,101,0,0,204,195,1,0,0,0,204,199,
        1,0,0,0,205,68,1,0,0,0,206,208,7,0,0,0,207,206,1,0,0,0,208,209,1,
        0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,70,1,0,0,0,211,213,7,0,
        0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,
        0,0,215,216,1,0,0,0,216,220,5,46,0,0,217,219,7,0,0,0,218,217,1,0,
        0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,72,1,0,0,
        0,222,220,1,0,0,0,223,229,5,34,0,0,224,228,8,1,0,0,225,226,5,92,
        0,0,226,228,9,0,0,0,227,224,1,0,0,0,227,225,1,0,0,0,228,231,1,0,
        0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,
        0,0,232,233,5,34,0,0,233,74,1,0,0,0,234,238,7,2,0,0,235,237,7,3,
        0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,
        0,0,239,76,1,0,0,0,240,238,1,0,0,0,241,242,5,47,0,0,242,243,5,47,
        0,0,243,247,1,0,0,0,244,246,8,4,0,0,245,244,1,0,0,0,246,249,1,0,
        0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,
        0,0,250,251,6,38,0,0,251,78,1,0,0,0,252,253,5,47,0,0,253,254,5,42,
        0,0,254,258,1,0,0,0,255,257,9,0,0,0,256,255,1,0,0,0,257,260,1,0,
        0,0,258,259,1,0,0,0,258,256,1,0,0,0,259,261,1,0,0,0,260,258,1,0,
        0,0,261,262,5,42,0,0,262,263,5,47,0,0,263,264,1,0,0,0,264,265,6,
        39,0,0,265,80,1,0,0,0,266,268,7,5,0,0,267,266,1,0,0,0,268,269,1,
        0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,272,6,
        40,0,0,272,82,1,0,0,0,11,0,204,209,214,220,227,229,238,247,258,269,
        1,6,0,0
    ]

class Dart2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    WHILE = 4
    DO = 5
    RETURN = 6
    VAR = 7
    FINAL = 8
    BOOL = 9
    INT = 10
    DOUBLE = 11
    STRING = 12
    VOID = 13
    PLUS = 14
    MINUS = 15
    MULT = 16
    DIV = 17
    ASSIGN = 18
    EQ = 19
    NEQ = 20
    LT = 21
    LTE = 22
    GT = 23
    GTE = 24
    AND = 25
    OR = 26
    LPAREN = 27
    RPAREN = 28
    LBRACE = 29
    RBRACE = 30
    SEMI = 31
    COMMA = 32
    DOT = 33
    BOOL_LITERAL = 34
    INT_LITERAL = 35
    DOUBLE_LITERAL = 36
    STRING_LITERAL = 37
    ID = 38
    LINE_COMMENT = 39
    BLOCK_COMMENT = 40
    WS = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'while'", "'do'", "'return'", "'var'", 
            "'final'", "'bool'", "'int'", "'double'", "'String'", "'void'", 
            "'+'", "'-'", "'*'", "'/'", "'='", "'=='", "'!='", "'<'", "'<='", 
            "'>'", "'>='", "'&&'", "'||'", "'('", "')'", "'{'", "'}'", "';'", 
            "','", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "WHILE", "DO", "RETURN", "VAR", "FINAL", 
            "BOOL", "INT", "DOUBLE", "STRING", "VOID", "PLUS", "MINUS", 
            "MULT", "DIV", "ASSIGN", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
            "AND", "OR", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", 
            "COMMA", "DOT", "BOOL_LITERAL", "INT_LITERAL", "DOUBLE_LITERAL", 
            "STRING_LITERAL", "ID", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "IF", "ELSE", "FOR", "WHILE", "DO", "RETURN", "VAR", "FINAL", 
                  "BOOL", "INT", "DOUBLE", "STRING", "VOID", "PLUS", "MINUS", 
                  "MULT", "DIV", "ASSIGN", "EQ", "NEQ", "LT", "LTE", "GT", 
                  "GTE", "AND", "OR", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "SEMI", "COMMA", "DOT", "BOOL_LITERAL", "INT_LITERAL", 
                  "DOUBLE_LITERAL", "STRING_LITERAL", "ID", "LINE_COMMENT", 
                  "BLOCK_COMMENT", "WS" ]

    grammarFileName = "Dart2Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


